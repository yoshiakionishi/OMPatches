; OM File Header - Saved 2023/09/12 06:04:50
; (7.02 :patc (om-make-point 10 160) (om-make-point 57 159) (om-make-point 1002 594) "" 183 0 nil "2023/09/12 06:04:50")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "logistic-equation" (quote ((let ((box (om-load-boxcall (quote abstraction) "Final-Version-bpc-realization" (om-load-patch-abs1 "Final-Version-bpc-realization" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "x-y-divider" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 617 286) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 220 229) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 224 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 153 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 176 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 128 224) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 49 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 214 312) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 112 317) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (2 0 4 0 nil 0) (4 1 6 0 nil 0) (0 1 6 1 nil 0) (4 0 7 0 nil 0) (0 0 7 1 nil 0))) 2 "x-y-divider" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "logistic-equation-bpc" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 594 214) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 563 405) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 495 454) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 301 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 322 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 178 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 391 278) nil nil nil (list (let ((box (om-load-boxin "input" 1 (om-make-point 55 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 215 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 250 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 241 227) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 295 309) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 195 309) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((0 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (1 0 3 0 nil 0) (3 1 5 0 nil 0) (3 0 6 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 328 430) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 407 68) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 142 70) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ATOM" (quote atom) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 200 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 278 352) (om-make-point 113 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 421 512) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 286 500) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((6 1 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (4 0 2 1 nil 0) (7 0 3 0 nil 0) (8 0 4 0 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (10 0 6 0 nil 0) (4 0 9 0 nil 0) (9 0 10 0 nil 0) (2 0 10 1 nil 0) (5 0 10 2 nil 0) (1 0 11 0 nil 0) (6 0 12 0 nil 0))) 1 "logistic-equation-bpc" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 548 365) (om-make-point 240 135) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quotequote (6364 6364 6364 6364 6365 6365 6366 6366 6366 6367 6367 6368 6368 6368 6369 6369 6370 6370 6370 6371 6371 6372 6372 6372 6372 6373 6373 6374 6374 6374 6374 6375 6375 6375 6375 6376 6377 6377 6377 6377 6378 6379 6379 6379 6379 6380 6380 6381 6381 6381 6382 6382 6383 6383 6383 6384 6384 6385 6385 6385 6385 6386 6386 6387 6387 6387 6387 6388 6388 6389 6389 6389 6389 6390 6390 6391 6391 6391 6391 6392 6392 6392 6392 6393 6393 6394 6394 6394 6394 6395 6395 6396 6396 6396 6396 6397 6397 6398 6398 6398 6398 6399 6400 6400 6400 6400 6401 6401 6402 6402 6402 6402 6403 6403 6404 6404 6404 6405 6405 6405 6405 6406 6407 6407 6407 6408 6408 6409 6409 6409 6409 6410 6410 6411 6411 6411 6412 6412 6413 6413 6413 6413 6414 6414 6414 6414 6415 6415 6416 6416 6416 6416 6417 6417 6418 6418 6418 6418 6419 6419 6420 6420 6420 6420 6421 6421 6422 6422 6422 6422 6423 6423 6423 6423 6424 6424 6425 6425 6425 6425 6426 6426 6427 6427 6427 6427 6428 6428 6429 6429 6429 6430 6430 6430 6430 6431 6431 6432 6432 6432 6432 6433 6433 6434 6434 6434 6435 6435 6436 6436 6436 6436 6437 6437 6437 6437 6438 6438 6439 6439 6439 6439 6440 6440 6441 6441 6441 6441 6442 6442 6443 6443 6443 6443 6444 6444 6444 6444 6445 6445 6446 6446 6446 6446 6447 6447 6448 6448 6448 6448 6449 6449 6449 6449 6450 6450 6451 6451 6451 6451 6452 6452 6453 6453 6453 6453 6454 6454 6455 6455 6455 6455 6456 6456 6456 6456 6457 6457 6458 6458 6458 6458 6459 6459 6460 6460 6460 6460 6461 6461 6461 6461 6462 6462 6463 6463 6463 6463 6464 6464 6465 6465 6465 6465 6466 6466 6466 6466 6467 6467 6468 6468 6468 6468 6469 6469 6470 6470 6470 6470 6471 6471 6471 6471 6472 6472 6473 6473 6473 6473 6474 6474 6475 6475 6475 6475 6476 6476 6476 6476 6477 6477 6478 6478 6478 6478 6479 6479 6479 6479 6480 6480 6481 6481 6481 6481 6482 6482 6483 6483 6483 6483 6484 6484 6484 6484 6485 6485 6486 6486 6486 6486 6487 6487 6488 6488 6488 6488 6489 6489 6489 6489 6490 6490 6491 6491 6491 6491 6492 6492 6492 6492 6493 6493 6494 6494 6494 6494 6495 6495 6496 6496 6496 6496 6497 6497 6497 6497 6498 6498 6499 6499 6499 6499 6500 6500 6500 6500 6501 6501 6502 6502 6502 6502 6503 6503 6503 6503 6504 6504 6505 6505 6505 6505 6506 6506 6507 6507 6507 6507 6508 6508 6508 6508 6509 6509 6510 6510 6510 6510 6511 6511 6511 6511 6512 6512 6513 6513 6513 6513 6514 6514 6514 6514 6515 6515 6516 6516 6516 6516 6517 6517 6517 6517 6518 6518 6519 6519 6519 6519 6520 6520 6521 6521 6521 6521 6522 6522 6522 6522 6523 6523 6523 6524 6524 6524 6524 6525 6525 6525 6525 6525 6525 6525 6526 6526 6527 6527 6527 6527 6527 6527 6527 6527 6528 6528 6528 6528 6528 6528 6528 6528 6528 6528 6529 6529 6530 6530 6530 6530 6530 6531 6531 6531 6531 6531 6531 6531 6531 6531 6531 6531 6531 6531 6532 6532 6532 6532 6532 6532 6532 6532 6532 6533 6533 6533 6533 6533 6533 6533 6533 6533 6533 6533 6533 6533 6533 6533 6533 6533 6533 6533 6534 6534 6534 6534 6534 6534 6534 6534 6534 6534 6534 6534 6534 6535 6535 6536 6536 6536 6536 6536 6536 6536 6536 6536 6536 6536 6537 6537 6537 6537 6537 6537 6537 6537 6537 6537 6537 6537 6537 6537 6537 6537 6537 6537 6538 6538 6538 6538 6538 6538 6538 6538 6538 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6539 6540 6540 6540 6540 6540 6540 6540 6540 6540 6540 6540 6540 6540 6540 6540 6540 6540 6540 6540 6540 6540 6540 6541 6541 6541 6541 6541 6542 6542 6542 6542 6542 6542 6542 6542 6542 6542 6542 6542 6542 6542 6542 6542 6542 6542 6542 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6543 6544 6544 6544 6544 6544 6544 6544 6544 6544 6544 6544 6544 6544 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6545 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6546 6547 6547 6547 6547 6547 6547 6547 6547 6547 6547 6547 6547 6547 6547 6547 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6548 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6549 6550 6550 6550 6550 6550 6550 6550 6550 6550 6550 6550 6550 6550 6550 6550 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6551 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6552 6553 6553 6553 6553 6553 6553 6553 6553 6553 6553 6553 6553 6553 6553 6553 6554 6553 6554 6553 6554 6553 6554 6553 6554 6553 6553 6553 6553 6553 6553 6554 6554 6554 6554 6554 6554 6554 6554 6554 6554 6554 6554 6554 6554 6554 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6555 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6556 6557 6557 6557 6557 6557 6557 6557 6557 6557 6557 6557 6557 6557 6557 6557 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6558 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6559 6560 6560 6560 6560 6560 6560 6560 6560 6560 6560 6560 6560 6560 6560 6560 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6561 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6562 6563 6563 6563 6563 6563 6563 6563 6563 6563 6563 6563 6563 6563 6563 6563 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6564 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6565 6566 6566 6566 6566 6566 6566 6566 6566 6566 6566 6566 6566 6566 6566 6566 6567 6566 6567 6566 6567 6566 6567 6566 6567 6566 6567 6566 6567 6566 6567 6567 6567 6567 6567 6567 6567 6567 6567 6567 6567 6567 6567 6567 6567 6567 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6568 6569 6569 6569 6569 6569 6569 6569 6569 6569 6569 6569 6569 6569 6569 6569 6570 6569 6570 6569 6570 6569 6570 6569 6569 6569 6569 6569 6569 6569 6569 6570 6570 6570 6570 6570 6570 6570 6570 6570 6570 6570 6570 6570 6570 6570 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6571 6572 6572 6572 6572 6572 6572 6572 6572 6572 6572 6572 6572 6572 6572 6572 6573 6572 6572 6572 6572 6572 6572 6572 6572 6572 6572 6572 6572 6572 6572 6573 6573 6573 6573 6573 6573 6573 6573 6573 6573 6573 6573 6573 6573 6573 6574 6573 6574 6573 6574 6573 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6574 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6575 6576 6576 6576 6576 6576 6576 6576 6576 6576 6576 6576 6576 6576 6576 6576 6577 6576 6577 6576 6577 6576 6577 6576 6577 6576 6577 6576 6577 6576 6577 6577 6577 6577 6577 6577 6577 6577 6577 6577 6577 6577 6577 6577 6577 6577 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6578 6579 6579 6579 6579 6579 6579 6579 6579 6579 6579 6579 6579 6579 6579 6579 6580 6579 6580 6579 6580 6579 6580 6579 6580 6579 6580 6579 6580 6579 6579 6580 6580 6580 6580 6580 6580 6580 6580 6580 6580 6580 6580 6580 6580 6580 6581 6580 6581 6580 6581 6580 6581 6580 6581 6580 6581 6581 6581 6581 6581 6581 6581 6581 6581 6581 6581 6581 6581 6581 6581 6581 6581 6581 6581 6581 6582 6582 6582 6582 6582 6582 6582 6582 6582 6582 6582 6582 6582 6582 6582 6583 6582 6583 6582 6583 6582 6583 6582 6582 6582 6582 6582 6582 6582 6582 6583 6583 6583 6583 6583 6583 6583 6583 6583 6583 6583 6583 6583 6583 6583 6584 6583 6584 6583 6584 6583 6584 6583 6584 6583 6584 6583 6584 6583 6584 6584 6584 6584 6584 6584 6584 6584 6584 6584 6584 6584 6584 6584 6584 6584 6585 6584 6585 6584 6585 6584 6585 6584 6585 6585 6585 6585 6585 6585 6585 6586 6585 6586 6585 6586 6585 6585 6585 6585 6585 6585 6585 6585 6585 6585 6586 6586 6586 6586 6586 6586 6586 6586 6586 6586 6586 6586 6586 6586 6586 6587 6586 6587 6586 6587 6586 6587 6586 6587 6586 6587 6586 6587 6586 6587 6587 6587 6587 6587 6587 6587 6587 6587 6587 6587 6587 6587 6587 6587 6587 6588 6587 6588 6587 6588 6587 6588 6587 6588 6587 6588 6587 6588 6587 6588 6589 6588 6589 6588 6589 6588 6588 6588 6588 6588 6588 6588 6588 6588 6588 6589 6588 6589 6588 6589 6588 6589 6588 6589 6589 6589 6589 6589 6589 6589 6590 6589 6590 6589 6590 6589 6590 6589 6590 6589 6590 6589 6590 6589 6590 6590 6589 6590 6589 6590 6590 6590 6590 6590 6590 6590 6590 6590 6590 6590 6591 6590 6591 6590 6591 6590 6591 6590 6591 6590 6591 6590 6591 6590 6591 6592 6591 6592 6591 6592 6591 6591 6591 6591 6591 6591 6591 6591 6591 6591 6592 6591 6592 6591 6592 6591 6592 6591 6592 6591 6592 6591 6592 6591 6592 6593 6592 6593 6592 6593 6592 6593 6592 6593 6592 6593 6592 6593 6592 6593 6594 6592 6593 6592 6593 6592 6593 6592 6593 6592 6593 6592 6593 6593 6593 6594 6593 6594 6593 6594 6593 6594 6593 6594 6593 6594 6593 6594 6593 6594 6595 6593 6595 6593 6595 6593 6595 6594 6594 6594 6594 6594 6594 6594 6594 6595 6594 6595 6594 6595 6594 6595 6594 6595 6594 6595 6594 6595 6594 6595 6596 6594 6596 6594 6596 6595 6596 6595 6596 6595 6596 6595 6596 6595 6595 6597 6595 6597 6595 6596 6595 6596 6595 6596 6595 6596 6595 6596 6595 6596 6597 6595 6597 6596 6597 6596 6597 6596 6597 6596 6597 6596 6597 6596 6597 6598 6596 6598 6596 6598 6596 6598 6596 6597 6596 6597 6596 6597 6596 6597 6599 6596 6598 6597 6598 6597 6598 6597 6598 6597 6598 6597 6598 6597 6598 6599 6597 6599 6597 6599 6597 6599 6597 6599 6597 6599 6597 6599 6598 6599 6600 6598 6600 6598 6600 6598 6599 6598 6599 6598 6599 6598 6599 6598 6599 6600 6598 6600 6598 6600 6598 6600 6598 6600 6599 6600 6599 6600 6599 6600 6601 6599 6601 6599 6601 6599 6601 6599 6601 6599 6600 6599 6600 6599 6600 6602 6599 6602 6599 6601 6599 6601 6599 6601 6600 6601 6600 6601 6600 6601 6602 6600 6602 6600 6602 6600 6602 6600 6602 6600 6602 6600 6602 6600 6602 6603 6600 6603 6600 6603 6600 6603 6601 6602 6601 6602 6601 6602 6601 6602 6604 6601 6603 6601 6603 6601 6603 6601 6603 6601 6603 6601 6603 6601 6603 6604 6601 6604 6601 6604 6601 6604 6602 6604 6602 6604 6602 6603 6602 6603 6605 6602 6605 6602 6605 6602 6604 6602 6604 6602 6604 6602 6604 6602 6604 6606 6602 6605 6602 6605 6602 6605 6603 6605 6603 6605 6603 6605 6603 6605 6606 6603 6606 6603 6606 6603 6606 6603 6606 6603 6605 6603 6605 6603 6605 6607 6603 6607 6603 6607 6603 6606 6604 6606 6604 6606 6604 6606 6604 6606 6608 6604 6607 6604 6607 6604 6607 6604 6607 6604 6607 6604 6607 6605 6607 6608 6604 6608 6604 6608 6604 6608 6605 6608 6605 6607 6605 6607 6605 6607 6609 6604 6609 6605 6609 6605 6608 6605 6608 6605 6608 6605 6608 6606 6608 6610 6605 6610 6605 6609 6605 6609 6606 6609 6606 6609 6606 6609 6606 6608 6610 6605 6610 6606 6610 6606 6610 6606 6610 6606 6609 6606 6609 6607 6609 6611 6606 6611 6606 6611 6606 6610 6607 6610 6607 6610 6607 6610 6607 6610 6612 6606 6612 6607 6611 6607 6611 6607 6611 6607 6611 6607 6611 6608 6610 6613 6607 6612 6607 6612 6607 6612 6607 6612 6608 6611 6608 6611 6608 6611 6613 6607 6613 6607 6613 6608 6613 6608 6612 6608 6612 6608 6612 6609 6612 6614 6608 6614 6608 6613 6608 6613 6608 6613 6609 6613 6609 6613 6609 6612 6615 6608 6614 6608 6614 6609 6614 6609 6614 6609 6613 6609 6613 6609 6613 6616 6608 6615 6609 6615 6609 6615 6609 6614 6610 6614 6610 6614 6610 6614 6616 6609 6616 6609 6616 6609 6615 6610 6615 6610 6615 6610 6615 6610 6614 6617 6609 6617 6609 6616 6610 6616 6610 6616 6610 6616 6611 6615 6611 6615 6618 6609 6618 6610 6617 6610 6617 6611 6617 6611 6616 6611 6616 6611 6616 6619 6610 6618 6610 6618 6611 6618 6611 6617 6611 6617 6611 6617 6612 6616 6620 6610 6619 6611 6619 6611 6618 6611 6618 6612 6618 6612 6617 6612 6617 6620 6611 6620 6611 6619 6611 6619 6612 6619 6612 6618 6612 6618 6613 6618 6621 6611 6621 6611 6620 6612 6620 6612 6620 6612 6619 6613 6619 6613 6619 6622 6611 6622 6612 6621 6612 6621 6612 6620 6613 6620 6613 6620 6613 6619 6623 6611 6622 6612 6622 6612 6621 6613 6621 6613 6621 6613 6620 6614 6620 6624 6612 6623 6612 6623 6613 6622 6613 6622 6614 6622 6614 6621 6614 6621 6625 6612 6624 6613 6624 6613 6623 6613 6623 6614 6622 6614 6622 6615 6622 6625 6612 6625 6613 6624 6613 6624 6614 6623 6614 6623 6615 6623 6615 6622 6626 6613 6626 6613 6625 6614 6625 6614 6624 6615 6624 6615 6624 6615 6623 6627 6613 6627 6613 6626 6614 6626 6614 6625 6615 6625 6615 6624 6616 6624 6628 6613 6628 6614 6627 6614 6627 6615 6626 6615 6626 6616 6625 6616 6625 6629 6613 6629 6614 6628 6614 6627 6615 6627 6615 6626 6616 6626 6616 6626 6630 6613 6630 6614 6629 6615 6628 6615 6628 6616 6627 6616 6627 6617 6626 6631 6614 6630 6614 6630 6615 6629 6615 6629 6616 6628 6616 6628 6617 6627 6632 6614 6631 6614 6631 6615 6630 6616 6630 6616 6629 6617 6629 6617 6628 6633 6614 6632 6614 6632 6615 6631 6616 6631 6616 6630 6617 6630 6617 6629 6634 6614 6634 6615 6633 6615 6632 6616 6632 6617 6631 6617 6630 6618 6630 6635 6614 6635 6615 6634 6615 6633 6616 6632 6617 6632 6617 6631 6618 6631 6636 6614 6636 6615 6635 6616 6634 6616 6633 6617 6633 6617 6632 6618 6632 6638 6614 6637 6615 6636 6616 6635 6616 6635 6617 6634 6618 6633 6618 6633 6639 6614 6638 6615 6637 6616 6636 6616 6636 6617 6635 6618 6634 6618 6634 6640 6614 6639 6615 6638 6616 6637 6616 6637 6617 6636 6618 6635 6618 6635 6641 6614 6640 6615 6639 6616 6638 6616 6638 6617 6637 6618 6636 6619 6636 6642 6614 6641 6615 6640 6616 6640 6616 6639 6617 6638 6618 6637 6619 6637 6644 6614 6643 6615 6642 6616 6641 6616 6640 6617 6639 6618 6638 6619 6638 6645 6614 6644 6615 6643 6615 6642 6616 6641 6617 6640 6618 6640 6619 6639 6646 6613 6645 6614 6644 6615 6643 6616 6642 6617 6642 6618 6641 6619 6640 6648 6613 6647 6614 6646 6615 6645 6616 6644 6617 6643 6618 6642 6619 6641 6649 6613 6648 6614 6647 6615 6646 6616 6645 6617 6644 6618 6643 6619 6642 6651 6613 6649 6614 6648 6615 6647 6616 6646 6617 6645 6618 6644 6619 6644 6652 6612 6651 6613 6650 6615 6649 6616 6648 6617 6647 6618 6646 6618 6645 6654 6612 6652 6613 6651 6614 6650 6615 6649 6616 6648 6617 6647 6618 6646 6655 6611 6654 6613 6653 6614 6651 6615 6650 6616 6649 6617 6648 6618 6647 6657 6611 6655 6612 6654 6613 6653 6615 6652 6616 6651 6617 6650 6618 6649 6658 6610 6657 6612 6656 6613 6654 6614 6653 6615 6652 6616 6651 6617 6650 6660 6610 6659 6611 6657 6613 6656 6614 6655 6615 6654 6616 6653 6617 6652 6662 6609 6660 6611 6659 6612 6658 6613 6656 6615 6655 6616 6654 6617 6653 6664 6609 6662 6610 6661 6611 6659 6613 6658 6614 6657 6615 6656 6616 6655 6665 6608 6664 6609 6662 6611 6661 6612 6660 6614 6658 6615 6657 6616 6656 6667 6607 6666 6609 6664 6610 6663 6612 6661 6613 6660 6614 6659 6615 6658 6669 6606 6668 6608 6666 6609 6665 6611 6663 6612 6662 6614 6661 6615 6659 6671 6605 6670 6607 6668 6609 6667 6610 6665 6612 6664 6613 6662 6614 6661 6673 6604 6672 6606 6670 6608 6668 6609 6667 6611 6666 6612 6664 6613 6663 6676 6603 6674 6605 6672 6607 6670 6608 6669 6610 6668 6611 6666 6613 6665 6678 6602 6676 6604 6674 6606 6673 6607 6671 6609 6670 6610 6668 6612 6667 6680 6601 6678 6603 6676 6605 6675 6606 6673 6608 6672 6610 6670 6611 6669 6682 6600 6680 6602 6679 6604 6677 6605 6675 6607 6674 6609 6672 6610 6671 6685 6599 6683 6601 6681 6602 6679 6604 6677 6606 6676 6607 6674 6609 6673 6687 6597 6685 6599 6683 6601 6682 6603 6680 6605 6678 6606 6677 6608 6675 6690 6596 6688 6598 6686 6600 6684 6602 6682 6603 6680 6605 6679 6607 6677 6692 6594 6690 6596 6688 6598 6686 6600 6685 6602 6683 6604 6681 6605 6680 6695 6593 6693 6595 6691 6597 6689 6599 6687 6601 6685 6602 6684 6604 6682 6698 6591 6696 6593 6694 6595 6692 6597 6690 6599 6688 6601 6686 6603 6685 6701 6589 6698 6591 6696 6594 6694 6596 6692 6597 6691 6599 6689 6601 6687 6704 6587 6701 6590 6699 6592 6697 6594 6695 6596 6693 6598 6692 6599 6690 6707 6585 6704 6588 6702 6590 6700 6592 6698 6594 6696 6596 6694 6598 6693 6710 6583 6707 6586 6705 6588 6703 6590 6701 6592 6699 6594 6697 6596 6695 6713 6581 6711 6583 6708 6586 6706 6588 6704 6590 6702 6592 6700 6594 6698 6716 6579 6714 6581 6712 6584 6709 6586 6707 6588 6705 6590 6703 6592 6701 6720 6577 6717 6579 6715 6581 6713 6584 6711 6586 6708 6588 6706 6590 6705 6723 6574 6721 6577 6718 6579 6716 6581 6714 6583 6712 6586 6710 6588 6708 6727 6571 6724 6574 6722 6576 6720 6579 6717 6581 6715 6583 6713 6585 6711 6730 6569 6728 6571 6725 6574 6723 6576 6721 6578 6719 6581 6717 6583 6715 6734 6566 6732 6569 6729 6571 6727 6573 6725 6576 6722 6578 6720 6580 6718 6738 6563 6735 6566 6733 6568 6731 6571 6728 6573 6726 6575 6724 6578 6722 6742 6560 6739 6563 6737 6565 6734 6568 6732 6570 6730 6572 6728 6575 6726 6746 6557 6743 6560 6741 6562 6738 6565 6736 6567 6734 6569 6732 6572 6730 6750 6554 6747 6556 6745 6559 6743 6562 6740 6564 6738 6566 6736 6569 6734 6754 6550 6752 6553 6749 6556 6747 6558 6744 6561 6742 6563 6740 6565 6738 6759 6547 6756 6550 6754 6552 6751 6555 6749 6557 6746 6560 6744 6562 6742 6763 6543 6761 6546 6758 6549 6756 6551 6753 6554 6751 6556 6749 6558 6746 6768 6540 6765 6542 6763 6545 6760 6548 6758 6550 6755 6552 6753 6555 6751 6772 6536 6770 6539 6767 6541 6765 6544 6762 6546 6760 6549 6758 6551 6756 6777 6532 6774 6535 6772 6537 6770 6540 6767 6542 6765 6545 6763 6547 6760 6782 6528 6779 6530 6777 6533 6774 6536 6772 6538 6770 6541 6767 6543 6765 6787 6524 6784 6526 6782 6529 6779 6532 6777 6534 6775 6537 6772 6539 6770 6792 6519 6789 6522 6787 6525 6784 6527 6782 6530 6780 6532 6778 6535 6775 6797 6515 6795 6518 6792 6520 6790 6523 6787 6525 6785 6528 6783 6530 6781 6802 6510 6800 6513 6797 6516 6795 6518 6793 6521 6790 6523 6788 6525 6786 6808 6506 6805 6508 6803 6511 6800 6513 6798 6516 6796 6518 6794 6521 6791 6813 6501 6811 6504 6808 6506 6806 6509 6804 6511 6801 6513 6799 6516 6797 6818 6496 6816 6499 6814 6501 6811 6504 6809 6506 6807 6508 6805 6511 6803 6824 6491 6822 6494 6819 6496 6817 6499 6815 6501 6813 6503 6811 6506 6809 6830 6486 6827 6488 6825 6491 6823 6493 6821 6496 6819 6498 6816 6500 6814 6835 6481 6833 6483 6831 6486 6829 6488 6827 6490 6824 6493 6822 6495 6820 6841 6475 6839 6478 6837 6480 6835 6483 6833 6485 6830 6487 6828 6489 6826 6847 6470 6845 6472 6843 6475 6841 6477 6839 6479 6837 6482 6835 6484 6833 6853 6464 6851 6467 6849 6469 6847 6471 6845 6474 6843 6476 6841 6478 6839 6859 6459 6857 6461 6855 6463 6853 6466 6851 6468 6849 6470 6847 6472 6845 6865 6453 6863 6455 6861 6458 6859 6460 6857 6462 6855 6464 6853 6466 6852 6871 6447 6869 6450 6867 6452 6865 6454 6864 6456 6862 6458 6860 6460 6858 6877 6441 6876 6444 6874 6446 6872 6448 6870 6450 6868 6452 6866 6454 6865 6884 6435 6882 6438 6880 6440 6878 6442 6876 6444 6875 6446 6873 6448 6871 6890 6429 6888 6432 6886 6434 6885 6436 6883 6437 6881 6439 6880 6441 6878 6896 6423 6894 6425 6893 6427 6891 6429 6889 6431 6888 6433 6886 6435 6885 6903 6417 6901 6419 6899 6421 6898 6423 6896 6425 6894 6427 6893 6428 6891 6909 6411 6907 6413 6906 6415 6904 6417 6903 6418 6901 6420 6900 6422 6898 6915 6405 6914 6407 6912 6408 6911 6410 6909 6412 6908 6413 6906 6415 6905 6922 6398 6920 6400 6919 6402 6917 6404 6916 6405 6914 6407 6913 6408 6912 6928 6392 6927 6394 6925 6395 6924 6397 6922 6399 6921 6400 6920 6402 6919 6935 6386 6933 6387 6932 6389 6930 6390 6929 6392 6928 6393 6927 6395 6926 6941 6379 6940 6381 6938 6382 6937 6384 6936 6385 6935 6387 6933 6388 6932 6947 6373 6946 6374 6945 6376 6944 6377 6943 6379 6941 6380 6940 6381 6939 6954 6366 6953 6368 6951 6369 6950 6371 6949 6372 6948 6373 6947 6374 6946 6960 6360 6959 6361 6958 6363 6957 6364 6956 6365 6955 6366 6954 6367 6953 6967 6353 6966 6355 6965 6356 6963 6357 6962 6358 6962 6359 6961 6361 6960 6973 6347 6972 6348 6971 6349 6970 6350 6969 6352 6968 6353 6967 6354 6966 6980 6340 6979 6341 6978 6343 6977 6344 6976 6345 6975 6346 6974 6347 6973 6986 6334 6985 6335 6984 6336 6983 6337 6982 6338 6981 6339 6981 6340 6980 6992 6327 6991 6328 6990 6329 6990 6330 6989 6331 6988 6332 6987 6333 6987 6999 6321 6998 6322 6997 6323 6996 6324 6995 6324 6995 6325 6994 6326 6993 7005 6314 7004 6315 7003 6316 7003 6317 7002 6318 7001 6319 7000 6319 7000 7011 6308 7010 6308 7010 6309 7009 6310 7008 6311 7008 6312 7007 6312 7006 7017 6301 7017 6302 7016 6303 7015 6304 7015 6304 7014 6305 7013 6306 7013 7024 6295 7023 6295 7022 6296 7022 6297 7021 6298 7020 6298 7020 6299 7019 7030 6288 7029 6289 7028 6290 7028 6290 7027 6291 7027 6292 7026 6292 7026 7036 6282 7035 6282 7035 6283 7034 6284 7034 6284 7033 6285 7033 6286 7032 7042 6275 7041 6276 7041 6277 7040 6277 7040 6278 7039 6278 7039 6279 7039 7048 6269 7047 6270 7047 6270 7046 6271 7046 6271 7046 6272 7045 6272 7045 7054 6263 7053 6263 7053 6264 7052 6264 7052 6265 7052 6265 7051 6266 7051 7060 6256 7059 6257 7059 6257 7058 6258 7058 6258 7058 6259 7057 6259 7057 7066 6250 7065 6250 7065 6251 7064 6251 7064 6252 7064 6252 7063 6253 7063 7071 6244 7071 6244 7071 6245 7070 6245 7070 6246 7070 6246 7069 6246 7069 7077 6238 7077 6238 7077 6238 7076 6239 7076 6239 7076 6240 7075 6240 7075 7083 6231 7083 6232 7082 6232 7082 6233 7082 6233 7082 6233 7081 6234 7081 7089 6225 7088 6226 7088 6226 7088 6226 7088 6227 7087 6227 7087 6227 7087 7094 6219 7094 6220 7094 6220 7094 6220 7093 6220 7093 6221 7093 6221 7093 7100 6213 7100 6213 7099 6214 7099 6214 7099 6214 7099 6215 7099 6215 7098 7105 6207 7105 6207 7105 6208 7105 6208 7105 6208 7104 6208 7104 6209 7104 7111 6201 7111 6201 7110 6202 7110 6202 7110 6202 7110 6202 7110 6203 7110 7116 6195 7116 6196 7116 6196 7116 6196 7116 6196 7115 6196 7115 6197 7115 7122 6189 7122 6190 7121 6190 7121 6190 7121 6190 7121 6190 7121 6191 7121 7127 6184 7127 6184 7127 6184 7127 6184 7126 6184 7126 6185 7126 6185 7126 7132 6178 7132 6178 7132 6178 7132 6178 7132 6179 7132 6179 7132 6179 7131 7138 6172 7137 6172 7137 6172 7137 6173 7137 6173 7137 6173 7137 6173 7137 7143 6166 7143 6167 7143 6167 7142 6167 7142 6167 7142 6167 7142 6167 7142 7148 6161 7148 6161 7148 6161 7148 6161 7147 6161 7147 6161 7147 6162 7147 7153 6155 7153 6155 7153 6155 7153 6156 7153 6156 7153 6156 7152 6156 7152 7158 6150 7158 6150 7158 6150 7158 6150 7158 6150 7158 6150 7158 6150 7157 7163 6144 7163 6144 7163 6144 7163 6144 7163 6145 7163 6145 7163 6145 7163 7168 6139 7168 6139 7168 6139 7168 6139 7168 6139 7168 6139 7168 6139 7168 7173 6133 7173 6133 7173 6133 7173 6133 7173 6134 7173 6134 7173 6134 7172 7178 6128 7178 6128 7178 6128 7178 6128 7178 6128 7177 6128 7177 6128 7177 7183 6122 7183 6123 7182 6123 7182 6123 7182 6123 7182 6123 7182 6123 7182 7187 6117 7187 6117 7187 6117 7187 6117 7187 6117 7187 6118 7187 6118 7187 7192 6112 7192 6112 7192 6112 7192 6112 7192 6112 7192 6112 7192 6112 7192 7197 6107 7197 6107 7197 6107 7197 6107 7197 6107 7197 6107 7197 6107 7196 7201 6102 7201 6102 7201 6102 7201 6102 7201 6102 7201 6102 7201 6102 7201 7206 6096 7206 6096 7206 6097 7206 6097 7206 6097 7206 6097 7206 6097 7206 7211 6091 7211 6091 7210 6091 7210 6091 7210 6091 7210 6092 7210 6092 7210 7215 6086 7215 6086 7215 6086 7215 6086 7215 6086 7215 6086 7215 6086 7215 7220 6081 7220 6081 7219 6081 7219 6081 7219 6081 7219 6081 7219 6081 7219 7224 6076 7224 6076 7224 6076 7224 6076 7224 6076 7224 6076 7224 6076 7224 7228 6071 7228 6071 7228 6071 7228 6071 7228 6071 7228 6071 7228 6071 7228 7233 6066 7233 6066 7233 6066 7233 6067 7233 6067 7233 6067 7233 6067 7233 7237 6062 7237 6062 7237 6062 7237 6062 7237 6062 7237 6062 7237 6062 7237 7241 6057 7241 6057 7241 6057 7241 6057 7241 6057 7241 6057 7241 6057 7241 7246 6052 7246 6052 7246 6052 7246 6052 7246 6052 7246 6052 7246 6052 7246 7250 6047 7250 6047 7250 6047 7250 6047 7250 6047 7250 6047 7250 6047 7250 7254 6042 7254 6042 7254 6042 7254 6042 7254 6042 7254 6043 7254 6043 7254 7258 6038 7258 6038 7258 6038 7258 6038 7258 6038 7258 6038 7258 6038 7258 7262 6033 7262 6033 7262 6033 7262 6033 7262 6033 7262 6033 7262 6033 7262 7266 6028 7266 6028 7266 6028 7266 6028 7266 6028 7266 6028 7266 6028 7266 7271 6024 7271 6024 7271 6024 7270 6024 7270 6024 7270 6024 7270 6024 7270 7275 6019 7275 6019 7275 6019 7275 6019 7275 6019 7275 6019 7275 6019 7275 7279 6015 7279 6015 7279 6015 7279 6015 7279 6015 7279 6015 7279 6015 7279 7283 6010 7283 6010 7283 6010 7283 6010 7283 6010 7283 6010 7283 6010 7283 7286 6006 7286 6006 7286 6006 7286 6006 7286 6006 7286 6006 7286 6006 7286 7290 6001 7290 6001 7290 6001 7290 6001 7290 6001 7290 6001 7290 6001 7290 7294 5997 7294 5997 7294 5997 7294 5997 7294 5997 7294 5997 7294 5997 7294 7298 5992 7298 5992 7298 5992 7298 5992 7298 5992 7298 5992 7298 5992 7298 7302 5988 7302 5988 7302 5988 7302 5988 7302 5988 7302 5988 7302 5988 7302 7306 5984 7306 5984 7306 5984 7306 5984 7306 5984 7306 5984 7306 5984 7306 7310 5979 7310 5979 7310 5979 7310 5979 7310 5979 7310 5979 7310 5979 7310 7313 5975 7313 5975 7313 5975 7313 5975 7313 5975 7313 5975 7313 5975 7313 7317 5971 7317 5971 7317 5971 7317 5971 7317 5971 7317 5971 7317 5971 7317 7321 5967 7321 5967 7321 5967 7321 5967 7321 5967 7321 5967 7321 5967 7321 7324 5962 7324 5962 7324 5962 7324 5962 7324 5962 7324 5962 7324 5962 7324 7328 5958 7328 5958 7328 5958 7328 5958 7328 5958 7328 5958 7328 5958 7328 7332 5954 7332 5954 7332 5954 7332 5954 7332 5954 7332 5954 5954 7332 7335 5950 7335 5950 7335 5950 7335 5950 7335 5950 7335 5950 7335 5950 7335 7339 5946 7339 5946 7339 5946 7339 5946 7339 5946 5946 7339 7342 5942 7342 5942 7342 5942 7342 5942 7342 5942 5942 7342 7346 5938 7346 5938 7346 5938 7346 5938 7346 5938 7346 5938 5938 7346 7350 5934 7350 5934 7350 5934 5934 7350 7353 5929 7353 5929 5929 7353 7356 5925 5925 7356 7360 5921 7360 5921 5921 7360 7363 5917 7363 5917 5917 7363 7367 5914 7367 5914 5914 7367 7370 5910 5910 7370 7374 5906 7374 5906 5906 7374 7377 5902 5902 7377 5898 7380 5894 7384 5890 7387 5886 7390 5883 7393 5879 7397 5875 7400 5871 7403 5868 7406 5864 7409 5860 7413 5857 7416 5853 7419 5849 7422 5846 7425 5842 7428 5838 7431 5835 7434 5831 7437 5828 7440 5824 7443 5821 7446 5817 7449 5814 7452 5810 7455 5807 7458 5803 7461 5800 7464 5796 7467 5793 7470 5790 7473 5786 7475 5783 7478 5779 7481 5776 7484 5773 7487 5769 7490 5766 7492 5763 7495 5759 7498 5756 7501 5753 7503 5750 7506 5746 7509 5743 7511 5740 7514 5737 7517 5734 7520 5730 7522 5727 7525 5724 7527 5721 7530 5718 7533 5715 7535 5712 7538 5708 7540 5705 7543 5702 7546 5699 7548 5696 7551 5693 7553 5690 7556 5687 7558 5684 7561 5681 7563 5678 7566 5675 7568 5672 7571 5669 7573 5666 7576 5663 7578 5660 7581 5657 7583 5654 7585 5651 7588 5648 7590 5645 7593 5642 7595 5639 7597 5637 7600 5634 7602 5631 7604 5628 7607 5625 7609 5622 7611 5619 7614 5616 7616 5614 7618 5611 7621 5608 7623 5605 7625 5602 7628 5600 7630 5597 7632 5594 7634 5591 7637 5589 7639 5586 7641 5583 7643 5580 7646 5578 7648 5575 7650 5572 7652 5569 7654 5567 7657 5564 7659 5561 7661 5559 7663 5556 7665 5553 7667 5551 7670 5548 7672 5545 7674 5543 7676 5540 7678 5537 7680 5535 7682 5532 7684 5529 7687 5527 7689 5524 7691 5522 7693 5519 7695 5516 7697 5514 7699 5511 7701 5509 7703 5506 7705 5504 7707 5504 7707 5501 7709 5501 7709 5499 7711 5496 7713 5493 7715 5491 7717 5488 7719 5486 7721 5483 7723 5481 7725 5478 7727 5476 7729 5473 7731 5471 7733 5468 7735 5466 7737 5463 7739 5461 7741 5461 7741 5459 7743 5456 7745 5454 7747 5451 7749 5449 7751 5446 7753 5444 7755 5442 7756 5439 7758 5437 7760 5434 7762 5432 7764 5429 7766 5429 7766 5427 7768 5425 7770 5422 7772 5420 7773 5418 7775 5418 7775 5415 7777 5413 7779 5410 7781 5408 7783 5406 7785 5403 7786 5401 7788 5399 7790 5396 7792 5394 7794 5392 7796 5392 7796 5389 7797 5387 7799 5385 7801 5383 7803 5380 7805 5378 7806 5378 7806 5376 7808 5373 7810 5371 7812 5371 7812 5369 7813 5366 7815 5364 7817 5362 7819 5360 7820 5360 7820 5357 7822 5355 7824 5355 7824 5353 7826 5351 7827 5348 7829 5346 7831 5344 7833 5342 7834 5340 7836 5337 7838 5335 7840 5333 7841 5331 7843 5328 7845 5326 7846 5324 7848 5322 7850 5320 7851 5317 7853 5315 7855 5313 7856 5311 7858 5309 7860 5307 7862 5304 7863 5302 7865 5300 7866 5298 7868 5296 7870 5294 7871 5294 7871 5292 7873 5289 7875 5287 7876 5285 7878 5283 7880 5281 7881 5279 7883 5279 7883 5277 7884 5275 7886 5272 7888 5270 7889 5268 7891 5266 7893 5264 7894 5262 7896 5260 7897 5260 7897 5258 7899 5256 7900 5254 7902 5251 7904 5249 7905 5247 7907 5245 7908 5243 7910 5241 7911 5239 7913 5237 7915 5235 7916 5233 7918 5231 7919 5229 7921 5227 7922 5225 7924 5223 7925 5221 7927 5221 7927 5219 7928 5219 7928 5217 7930 5215 7932 5213 7933 5211 7935 5209 7936 5207 7938 5205 7939 5203 7941 5201 7942 5199 7944 5197 7945 5195 7947 5193 7948 5193 7948 5191 7950 5189 7951 5189 7951 5187 7953 5185 7954 5183 7956 5181 7957 5179 7958 5177 7960 5177 7960 5175 7961 5173 7963 5171 7964 5169 7966 5167 7967 5165 7969 5163 7970 5161 7972 5159 7973 5157 7975 5155 7976 5154 7977 5154 7977 5152 7979 5150 7980 5148 7982 5146 7983 5144 7985 5142 7986 5140 7987 5140 7987 5138 7989 5138 7989 5136 7990 5134 7992 5132 7993 5131 7994 5129 7996 5127 7997 5125 7999 5123 8000 5121 8001 5119 8003 5117 8004 5117 8004 5115 8006 5114 8007 5112 8008 5110 8010 5108 8011 5106 8013 5106 8013 5104 8014 5102 8015 5101 8017 5099 8018 5097 8019 5095 8021 5093 8022 5091 8023 5089 8025 5089 8025 5088 8026 5088 8026 5086 8028 5086 8028 5084 8029 5082 8030 5080 8032 5078 8033 5078 8033 5077 8034 5075 8036 5073 8037 5071 8038 5071 8038 5069 8040 5068 8041 5066 8042 5064 8044 5062 8045 5060 8046 5059 8048 5057 8049 5055 8050 5053 8052 5053 8052 5051 8053 5050 8054 5048 8055 5046 8057 5044 8058 5044 8058 5042 8059 5041 8061 5039 8062 5037 8063 5035 8065 5034 8066 5032 8067 5030 8068 5030 8068 5028 8070 5027 8071 5025 8072 5023 8073 5021 8075 5019 8076 5018 8077 5016 8079 5014 8080 5013 8081 5011 8082 5009 8084 5007 8085 5006 8086 5004 8087 5002 8089 5000 8090 4999 8091 4997 8092 4995 8094 4993 8095 4993 8095 4992 8096 4990 8097 4988 8099 4988 8099 4987 8100 4985 8101 4983 8102 4983 8102 4981 8104 4980 8105 4980 8105 4978 8106 4976 8107 4975 8108 4975 8108 4973 8110 4971 8111 4970 8112 4968 8113 4966 8115 4966 8115 4965 8116 4963 8117 4961 8118 4959 8119 4958 8121 4956 8122 4956 8122 4954 8123 4953 8124 4951 8125 4949 8127 4948 8128 4946 8129 4946 8129 4944 8130 4943 8131 4941 8133 4939 8134 4938 8135 4936 8136 4934 8137 4934 8137 4933 8138 4931 8140 4930 8141 4930 8141 4930 8141 4928 8142 4926 8143 4925 8144 4923 8145 4921 8147 4920 8148 4918 8149 4916 8150 4916 8150 4915 8151 4913 8152 4912 8154 4912 8154 4910 8155 4908 8156 4908 8156 4907 8157 4905 8158 4903 8159 4903 8159 4902 8161 4900 8162 4900 8162 4899 8163 4897 8164 4895 8165 4894 8166 4894 8166 4892 8167 4891 8168 4889 8170 4889 8170 4887 8171 4886 8172 4886 8172 4884 8173 4883 8174 4881 8175 4879 8176 4879 8176 4878 8178 4878 8178 4876 8179 4875 8180 4875 8180 4873 8181 4871 8182 4871 8182 4870 8183 4870 8183 4868 8184 4867 8185 4865 8186 4864 8188 4862 8189 4862 8189 4860 8190 4859 8191 4857 8192 4857 8192 4856 8193 4854 8194 4854 8194 4853 8195 4853 8195 4851 8196 4851 8196 4849 8197 4848 8199 4848 8199 4846 8200 4845 8201 4845 8201 4843 8202 4842 8203 4840 8204 4840 8204 4839 8205 4837 8206 4836 8207 4836 8207 4834 8208 4832 8209 4831 8211 4831 8211 4831 8211 4829 8212 4828 8213 4826 8214 4825 8215 4823 8216 4823 8216 4822 8217 4822 8217 4820 8218 4819 8219 4819 8219 4817 8220 4817 8220 4816 8221 4816 8221 4814 8222 4814 8222 4813 8223 4811 8224 4809 8225 4808 8227 4806 8228 4805 8229 4805 8229 4803 8230 4803 8230 4802 8231 4802 8231 4800 8232 4799 8233 4797 8234 4796 8235 4794 8236 4793 8237 4791 8238 4791 8238 4790 8239 4788 8240 4787 8241 4785 8242 4784 8243 4782 8244 4781 8245 4781 8245 4779 8246 4778 8247 4778 8247 4776 8248 4776 8248 4775 8249 4775 8249 4773 8250 4772 8251 4772 8251 4771 8252 4771 8252 4769 8254 4768 8255 4766 8256 4765 8257 4765 8257 4763 8258 4763 8258 4762 8259 4760 8260 4759 8261 4759 8261 4757 8262 4756 8263 4754 8264 4753 8265 4751 8266 4750 8267 4748 8268 4748 8268 4747 8269 4746 8270 4744 8271 4744 8271 4743 8272 4743 8272 4741 8273 4740 8274 4738 8275 4737 8276 4737 8276 4735 8277 4735 8277 4734 8278 4733 8279 4733 8279 4731 8280 4730 8281 4728 8282 4727 8283 4727 8283 4725 8284 4724 8285 4722 8286 4722 8286 4721 8287 4720 8288 4718 8288 4717 8289 4715 8290 4714 8291 4714 8291 4712 8292 4712 8292 4711 8293 4711 8293 4710 8294 4710 8294 4708 8295 4707 8296 4705 8297 4705 8297 4704 8298 4703 8299 4703 8299 4701 8300 4700 8301 4698 8302 4697 8303 4695 8304 4695 8304 4694 8305 4694 8305 4693 8306 4691 8307 4691 8307 4690 8308 4690 8308 4688 8309 4687 8310 4686 8311 4686 8311 4684 8312 4684 8312 4683 8313 4683 8313 4681 8314 4680 8314 4679 8315 4679 8315 4677 8316 4676 8317 4674 8318 4673 8319 4673 8319 4672 8320 4670 8321 4670 8321 4669 8322 4669 8322 4668 8323 4668 8323 4666 8324 4666 8324 4665 8325 4665 8325 4663 8326 4663 8326 4662 8327 4661 8328 4659 8329 4658 8329 4658 8329 4657 8330 4657 8330 4655 8331 4655 8331 4654 8332 4654 8332 4652 8333 4652 8333 4651 8334 4650 8335 4650 8335 4648 8336 4647 8337 4646 8338 4644 8339 4643 8340 4643 8340 4641 8341 4640 8341 4640 8341 4639 8342 4639 8342 4637 8343 4637 8343 4636 8344 4636 8344 4635 8345 4635 8345 4633 8346 4633 8346 4632 8347 4632 8347 4631 8348 4629 8349 4629 8349 4628 8350 4627 8351 4625 8351 4624 8352 4624 8352 4623 8353 4621 8354 4621 8354 4620 8355 4620 8355 4618 8356 4617 8357 4616 8358 4614 8359 4613 8360 4612 8360 4612 8360 4610 8361 4610 8361 4609 8362 4608 8363 4608 8363 4606 8364 4605 8365 4605 8365 4604 8366 4602 8367 4601 8368 4600 8368 4599 8369 4599 8369 4597 8370 4597 8370 4596 8371 4596 8371 4595 8372 4595 8372 4593 8373 4593 8373 4593 8373 4593 8373 4592 8374 4591 8375 4589 8375 4589 8375 4588 8376 4587 8377 4587 8377 4585 8378 4584 8379 4583 8380 4581 8381 4581 8381 4580 8382 4580 8382 4579 8382 4577 8383 4577 8383 4576 8384 4575 8385 4574 8386 4574 8386 4572 8387 4572 8387 4571 8388 4570 8389 4570 8389 4568 8389 4568 8389 4567 8390 4567 8390 4566 8391 4564 8392 4563 8393 4563 8393 4562 8394 4561 8395 4559 8395 4559 8395 4558 8396 4558 8396 4557 8397 4557 8397 4555 8398 4555 8398 4554 8399 4554 8399 4553 8400 4553 8400 4552 8401 4550 8401 4550 8401 4549 8402 4549 8402 4549 8402 4549 8402 4548 8403 4548 8403 4546 8404 4545 8405 4545 8405 4544 8406 4543 8406 4541 8407 4541 8407 4540 8408 4540 8408 4539 8409 4539 8409 4537 8410 4537 8410 4536 8411 4535 8411 4534 8412 4534 8412 4532 8413 4532 8413 4531 8414 4531 8414 4531 8414 4530 8415 4530 8415 4529 8416 4529 8416 4527 8416 4527 8416 4526 8417 4526 8417 4525 8418 4525 8418 4524 8419 4524 8419 4522 8420 4521 8421 4521 8421 4520 8421 4520 8421 4518 8422 4518 8422 4517 8423 4517 8423 4516 8424 4515 8425 4513 8426 4513 8426 4512 8426 4512 8426 4511 8427 4511 8427 4510 8428 4510 8428 4508 8429 4508 8429 4507 8430 4506 8431 4506 8431 4505 8431 4505 8431 4503 8432 4503 8432 4502 8433 4502 8433 4501 8434 4500 8435 4500 8435 4498 8435 4498 8435 4497 8436 4497 8436 4496 8437 4496 8437 4495 8438 4495 8438 8439 4494 4494 8439 4494 8439 4492 8439 4492 8439 8440 4491 8440 4491 4491 8440 4491 8440 8441 4490 8441 4490 8441 4490 4490 8441 4490 8441 8442 4489 8442 4489 8442 4489 8442 4489 8442 4489 8442 4489 8442 4489 8442 8443 4487 8443 4487 8443 4487 8443 4487 4487 8443 4487 8443 8443 4486 8443 4486 4486 8443 4486 8443 8444 4485 8444 4485 8444 4485 8444 4485 8444 4485 4485 8444 4485 8444 8445 4484 8445 4484 8445 4484 8445 4484 8445 4484 8445 4484 8445 4484 8445 8446 4482 8446 4482 8446 4482 8446 4482 8446 4482 8446 4482 8446 4482 8446 8447 4481 8447 4481 8447 4481 8447 4481 8447 4481 8447 4481 8447 4481 8447 8448 4480 8447 4480 8448 4480 8447 4480 8448 4480 8447 4480 8447 4480 8447 8448 4479 8448 4479 8448 4479 8448 4479 8448 4479 8448 4479 8448 4479 8448 8449 4477 8449 4478 8449 4477 8449 4478 8449 4477 8449 4478 8449 4477 8449 8450 4476 8450 4476 8450 4476 8450 4476 8450 4476 8450 4476 8450 4476 8450 8451 4475 8451 4475 8451 4475 8451 4475 8451 4475 8451 4475 8451 4475 8451 8452 4474 8451 4474 8452 4474 8451 4474 8451 4474 8451 4474 8451 4474 8451 8452 4473 8452 4473 8452 4473 8452 4473 8452 4473 8452 4473 8452 4473 8452 8453 4471 8453 4471 8453 4471 8453 4471 8453 4471 8453 4471 8453 4471 8453 8454 4470 8454 4470 8454 4470 8454 4470 8454 4470 8454 4470 8454 4470 8454 8455 4469 8455 4469 8455 4469 8455 4469 8455 4469 8455 4469 8455 4469 8455 8456 4468 8455 4468 8455 4468 8455 4468 8455 4468 8455 4468 8455 4468 8455 8456 4466 8456 4467 8456 4466 8456 4467 8456 4466 8456 4467 8456 4466 8456 8457 4465 8457 4465 8457 4465 8457 4465 8457 4465 8457 4465 8457 4465 8457 8458 4464 8458 4464 8458 4464 8458 4464 8458 4464 8458 4464 8458 4464 8458 8459 4463 8459 4463 8459 4463 8459 4463 8459 4463 8459 4463 8459 4463 8459 8460 4461 8459 4462 8459 4461 8459 4462 8459 4461 8459 4462 8459 4462 8459 8460 4460 8460 4461 8460 4460 8460 4461 8460 4460 8460 4461 8460 4460 8460 8461 4459 8461 4459 8461 4459 8461 4459 8461 4459 8461 4459 8461 4459 8461 8462 4458 8462 4458 8462 4458 8462 4458 8462 4458 8462 4458 8462 4458 8462 8463 4456 8462 4457 8463 4456 8462 4457 8463 4457 8462 4457 8463 4457 8462 8464 4455 8463 4456 8463 4455 8463 4456 8463 4455 8463 4456 8463 4455 8463 8464 4454 8464 4455 8464 4454 8464 4455 8464 4454 8464 4455 8464 4454 8464 8465 4453 8465 4454 8465 4453 8465 4454 8465 4453 8465 4454 8465 4453 8465 8466 4451 8465 4453 8466 4451 8465 4452 8466 4451 8466 4452 8466 4452 8466 8467 4450 8466 4451 8467 4450 8466 4451 8467 4450 8466 4451 8467 4450 8466 8468 4449 8467 4450 8468 4449 8467 4450 8468 4449 8467 4450 8467 4449 8467 8468 4447 8468 4449 8468 4447 8468 4449 8468 4448 8468 4449 8468 4448 8468 8469 4446 8468 4448 8469 4446 8468 4448 8469 4446 8468 4448 8469 4446 8469 8470 4444 8469 4447 8470 4445 8469 4447 8470 4445 8469 4447 8470 4445 8469 8471 4443 8470 4446 8471 4443 8470 4446 8471 4444 8470 4446 8471 4444 8470 8472 4442 8470 4445 8472 4442 8471 4445 8472 4442 8471 4445 8472 4442 8471 8473 4440 8471 4444 8473 4441 8471 4444 8473 4441 8471 4444 8472 4441 8471 8474 4439 8472 4443 8474 4439 8472 4443 8473 4439 8472 4443 8473 4440 8472 8475 4437 8472 4442 8474 4438 8473 4442 8474 4438 8473 4442 8474 4438 8473 8476 4436 8473 4442 8475 4436 8473 4441 8475 4436 8473 4441 8475 4437 8473 8476 4434 8474 4441 8476 4434 8474 4440 8476 4435 8474 4440 8476 4435 8474 8477 4432 8474 4440 8477 4433 8474 4440 8477 4433 8475 4439 8477 4434 8475 8478 4431 8475 4439 8478 4431 8475 4439 8478 4432 8475 4438 8478 4432 8475 8479 4429 8475 4439 8479 4429 8476 4438 8479 4430 8476 4438 8479 4431 8476 8481 4427 8476 4438 8480 4428 8476 4438 8480 4428 8476 4437 8480 4429 8477 8482 4425 8476 4438 8481 4426 8477 4437 8481 4426 8477 4436 8481 4427 8477 8483 4423 8477 4438 8482 4424 8477 4437 8482 4425 8477 4436 8482 4425 8478 8484 4421 8477 4437 8484 4422 8477 4436 8483 4423 8478 4435 8483 4423 8478 8485 4418 8477 4437 8485 4419 8478 4436 8484 4420 8478 4435 8484 4421 8478 8486 4416 8478 4437 8486 4417 8478 4436 8486 4418 8478 4435 8485 4419 8479 8488 4413 8478 4437 8487 4415 8478 4436 8487 4416 8479 4435 8486 4417 8479 8489 4411 8478 4438 8489 4412 8478 4436 8488 4413 8479 4435 8488 4414 8479 8491 4408 8478 4438 8490 4409 8479 4437 8490 4411 8479 4435 8489 4412 8480 8492 4405 8478 4439 8492 4406 8479 4437 8491 4408 8479 4436 8490 4409 8480 8494 4401 8478 4440 8493 4403 8479 4438 8493 4405 8479 4437 8492 4406 8480 8496 4398 8478 4441 8495 4400 8478 4439 8494 4401 8479 4438 8494 4403 8480 8497 4394 8477 4442 8497 4396 8478 4441 8496 4398 8479 4439 8495 4399 8479 8499 4390 8477 4444 8499 4392 8478 4442 8498 4394 8478 4440 8497 4396 8479 8501 4386 8476 4446 8501 4388 8477 4444 8500 4390 8478 4442 8499 4392 8479 8504 4381 8476 4448 8503 4383 8476 4446 8502 4385 8477 4444 8501 4387 8478 8506 4376 8475 4451 8505 4379 8476 4449 8504 4381 8477 4447 8503 4383 8477 8508 4371 8474 4454 8507 4374 8475 4452 8506 4376 8476 4450 8506 4378 8477 8511 4366 8473 4458 8510 4368 8474 4455 8509 4370 8475 4453 8508 4372 8475 8513 4360 8471 4461 8512 4362 8472 4459 8511 4365 8473 4457 8511 4367 8474 8516 4354 8470 4465 8515 4356 8471 4463 8514 4358 8472 4461 8513 4361 8473 8519 4347 8468 4470 8518 4350 8469 4468 8517 4352 8470 4465 8516 4354 8471 8522 4341 8466 4475 8521 4343 8467 4473 8520 4345 8468 4470 8519 4347 8469 8525 4334 8464 4481 8524 4336 8465 4478 8523 4338 8466 4476 8523 4340 8467 8529 4326 8462 4486 8528 4328 8463 4484 8527 4331 8464 4482 8526 4333 8465 8532 4319 8460 4493 8531 4321 8461 4490 8530 4323 8462 4488 8529 4325 8463 8535 4311 8457 4499 8535 4313 8458 4497 8534 4315 8459 4495 8533 4317 8460 8539 4303 8455 4506 8538 4305 8456 4504 8537 4306 8456 4502 8537 4308 8457 8543 4295 8452 4513 8542 4296 8453 4511 8541 4298 8454 4509 8541 4299 8454 8546 4286 8449 4521 8546 4288 8450 4519 8545 4289 8451 4517 8544 4291 8451 8550 4278 8446 4528 8549 4279 8447 4527 8549 4280 8447 4525 8548 4282 8448 8554 4269 8443 4536 8553 4270 8444 4535 8553 4272 8444 4533 8552 4273 8445 8557 4261 8440 4544 8557 4262 8441 4543 8557 4263 8441 4542 8556 4264 8442 8561 4252 8437 4553 8561 4253 8437 4551 8560 4254 8438 4550 8560 4255 8438 8565 4244 8434 4561 8565 4244 8434 4560 8564 4245 8434 4559 8564 4246 8435 8569 4235 8430 4569 8568 4236 8431 4568 8568 4237 8431 4567 8568 4237 8431 8572 4227 8427 4577 8572 4227 8428 4577 8572 4228 8428 4576 8571 4229 8428 8576 4219 8424 4585 8576 4219 8424 4585 8575 4220 8425 4584 8575 4220 8425 8579 4211 8421 4594 8579 4211 8421 4593 8579 4211 8421 4593 8579 4212 8422 8583 4203 8418 4602 8583 4203 8418 4601 8582 4203 8418 4601 8582 4204 8418 8586 4195 8415 4610 8586 4195 8415 4609 8586 4196 8415 4609 8586 4196 8415 8589 4187 8412 4617 8589 4188 8412 4617 8589 4188 8412 4617 8589 4188 8412 8593 4180 8409 4625 8593 4180 8409 4625 8592 4180 8409 4624 8592 4181 8409 8596 4173 8406 4632 8596 4173 8406 4632 8596 4173 8406 4632 8596 4173 8406 8599 4166 8403 4640 8599 4166 8403 4640 8599 4166 8403 4640 8599 4166 8403 8602 4159 8400 4647 8602 4159 8400 4647 8602 4159 8400 4647 8602 4159 8400 8605 4152 8397 4654 8605 4152 8398 4654 8605 4152 8398 4654 8605 4152 8398 8608 4146 8395 4661 8608 4146 8395 4661 8608 4146 8395 4661 8608 4146 8395 8610 4139 8392 4668 8610 4139 8392 4668 8610 4139 8392 4668 8610 4139 8392 8613 4133 8390 4674 8613 4133 8390 4674 8613 4133 8390 4674 8613 4133 8390 8616 4127 8387 4681 8616 4127 8387 4681 8616 4127 8387 4681 8616 4127 8387 8619 4121 8385 4687 8619 4121 8385 4687 8619 4121 8385 4687 8619 4121 8385 8621 4115 8382 4694 8621 4115 8382 4693 8621 4115 8382 4693 8621 4115 8382 8624 4109 8380 4700 8624 4109 8380 4700 8624 4109 8380 4700 8624 4109 8380 8626 4103 8378 4706 8626 4103 8378 4706 8626 4103 8378 4706 8626 4103 8378 8629 4098 8376 4712 8629 4098 8376 4712 8629 4098 8376 4712 8629 4098 8376 8631 4092 8373 4717 8631 4092 8373 4717 8631 4092 8373 4717 8631 4092 8373 8633 4087 8371 4723 8633 4087 8371 4723 4723 8633 4087 8371 8636 4082 8369 4729 4729 8636 4082 8369 8638 4077 4734 8638 4077 8367 8640 4072 8365 4740 4740 8640 4072 8365 4745 8642 4067 8363 4750 8644 4062 8361 4755 8647 4057 8359 4761 8649 4052 8357 4766 8651 4048 8355 4766 8651 4048 8355 4771 8653 4043 8353 4775 8655 4038 8352 4780 8657 4034 8350 4780 8657 4034 8350 4785 8659 4030 8348 4790 8661 4025 8346 4795 8663 4021 8345 4799 8665 4017 8343 4804 8666 4012 8341 4808 8668 4008 8340 4813 8670 4004 8338 4817 8672 4000 8336 4822 8674 3996 8335 4826 8676 3992 8333 4830 8677 3988 8332 4830 8677 3988 8332 4835 8679 3984 8330 4839 8681 3980 8329 4843 8683 3977 8327 4843 8683 3977 8327 4847 8684 3973 8326 4851 8686 3969 8324 4855 8688 3965 8323 4855 8688 3965 8323 4859 8689 3962 8321 4863 8691 3958 8320 4867 8692 3955 8318 4871 8694 3951 8317 4875 8696 3947 8316 4879 8697 3944 8314 4883 8699 3941 8313 4887 8700 3937 8311 4890 8702 3934 8310 4894 8703 3930 8309 4898 8705 3927 8307 4902 8706 3924 8306 4902 8706 3924 8306 4905 8708 3920 8305 4909 8709 3917 8304 4913 8711 3914 8302 4916 8712 3911 8301 4916 8712 3911 8301 4920 8714 3907 8300 4920 8714 3907 8300 4920 8714 3907 8300 4923 8715 3904 8299 4927 8717 3901 8297 4927 8717 3901 8297 4930 8718 3898 8296 4930 8718 3898 8296 4934 8720 3895 8295 4937 8721 3892 8294 4941 8722 3889 8293 4944 8724 3886 8291 4944 8724 3886 8291 4947 8725 3883 8290 4951 8727 3879 8289 4954 8728 3877 8288 4958 8729 3874 8287 4958 8729 3874 8287 4961 8731 3871 8286 4961 8731 3871 8286 4964 8732 3868 8285 4967 8733 3865 8283 4971 8735 3862 8282 4974 8736 3859 8281 4974 8736 3859 8281 4974 8736 3859 8281 4977 8737 3856 8280 4980 8738 3853 8279 4980 8738 3853 8279 4984 8740 3850 8278 4987 8741 3848 8277 4987 8741 3848 8277 4987 8741 3848 8277 4990 8742 3845 8276 4993 8744 3842 8275 4996 8745 3839 8274 4996 8745 3839 8274 4999 8746 3837 8273 5002 8747 3834 8272 5005 8749 3831 8271 5005 8749 3831 8271 5009 8750 3828 8270 5012 8751 3826 8268 5012 8751 3826 8269 5015 8752 3823 8267 5018 8754 3820 8266 5021 8755 3818 8265 5024 8756 3815 8264 5027 8757 3813 8264 5027 8757 3813 8264 5030 8758 3810 8263 5030 8758 3810 8263 5032 8759 3807 8262 5035 8761 3805 8261 5038 8762 3802 8260 5041 8763 3800 8259 5044 8764 3797 8258 5047 8765 3795 8257 5050 8766 3792 8256 5053 8768 3790 8255 5056 8769 3787 8254 5058 8770 3785 8253 5061 8771 3782 8252 5064 8772 3780 8251 5064 8772 3780 8251 5067 8773 3777 8250 5070 8774 3775 8249 5072 8776 3773 8248 5075 8777 3770 8248 5078 8778 3768 8247 5081 8779 3766 8246 5083 8780 3763 8245 5083 8780 3763 8245 5086 8781 3761 8244 5089 8782 3758 8243 5091 8783 3756 8242 5094 8784 3754 8241 5097 8785 3751 8241 5100 8786 3749 8240 5100 8786 3749 8240 5102 8787 3747 8239 5102 8787 3747 8239 5105 8788 3745 8238 5105 8788 3745 8238 5107 8790 3742 8237 5107 8790 3742 8237 5110 8791 3740 8236 5113 8792 3738 8236 5113 8792 3738 8236 5115 8793 3736 8235 5115 8793 3736 8235 5118 8794 3733 8234 5118 8794 3733 8234 5118 8794 3733 8234 5120 8795 3731 8233 5123 8796 3729 8232 5123 8796 3729 8232 5126 8797 3727 8231 5126 8797 3727 8231 5128 8798 3724 8231 5128 8798 3724 8231 5131 8799 3722 8230 5133 8800 3720 8229 5136 8801 3718 8228 5138 8802 3716 8227 5141 8803 3714 8227 5143 8804 3711 8226 5146 8805 3709 8225 5146 8805 3709 8225 5148 8806 3707 8224 5148 8806 3707 8224 5151 8807 3705 8224 5151 8807 3705 8224 5153 8808 3703 8223 5156 8809 3701 8222 5158 8810 3699 8221 5158 8810 3699 8221 5161 8811 3697 8221 5161 8811 3697 8221 5163 8812 3695 8220 5163 8812 3695 8220 5166 8813 3692 8219 5166 8813 3692 8219 8814 3690 8218 5168 5168 8814 3690 8218 5168 8814 3690 8218 8815 3688 8218 5170 5170 8815 3688 8218 5170 8815 3688 8218 8816 3686 8217 5173 5173 8816 3686 8217 5173 8816 3686 8217 8817 3684 8216 5175 8817 3684 8216 5175 8817 3684 8216 5175 8817 3684 8216 8817 3682 8215 5178 8817 3682 8215 5178 8817 3682 8215 5178 8817 3682 8215 8818 3680 8215 5180 8818 3680 8215 5180 8818 3680 8215 5180 8818 3680 8215 8819 3678 8214 5182 8819 3678 8214 5182 8819 3678 8214 5182 8819 3678 8214 8820 3676 8213 5185 8820 3676 8213 5185 8820 3676 8213 5185 8820 3676 8213 8821 3674 8212 5187 8821 3674 8212 5187 8821 3674 8212 5187 8821 3674 8212 8822 3672 8212 5189 8822 3672 8212 5190 8822 3672 8212 5189 8822 3672 8212 8823 3670 8211 5192 8823 3670 8211 5192 8823 3670 8211 5192 8823 3670 8211 8824 3668 8210 5194 8824 3668 8210 5194 8824 3668 8210 5194 8824 3668 8210 8825 3666 8210 5196 8825 3666 8209 5197 8825 3666 8210 5196 8825 3666 8210 8826 3664 8209 5198 8826 3664 8209 5199 8826 3664 8209 5199 8826 3664 8209 8827 3663 8209 5200 8827 3662 8208 5202 8827 3662 8208 5201 8827 3662 8208 8828 3661 8208 5203 8828 3660 8207 5204 8828 3661 8208 5203 8828 3660 8207 8828 3659 8207 5204 8829 3658 8206 5207 8828 3659 8207 5205 8829 3658 8206 8829 3657 8207 5206 8830 3656 8205 5210 8829 3657 8207 5207 8830 3656 8206 8830 3656 8207 5208 8831 3653 8204 5213 8830 3655 8206 5208 8831 3654 8205 8831 3654 8206 5209 8832 3651 8203 5216 8831 3654 8206 5210 8832 3651 8204 8831 3653 8206 5210 8833 3648 8202 5220 8832 3652 8206 5211 8833 3649 8202 8832 3652 8207 5210 8834 3646 8201 5224 8832 3651 8206 5211 8834 3646 8201 8832 3651 8207 5210 8836 3643 8199 5228 8833 3650 8206 5211 8835 3643 8199 8833 3651 8208 5209 8837 3639 8197 5234 8833 3650 8207 5211 8837 3640 8198 8833 3651 8209 5207 8838 3636 8194 5240 8833 3650 8208 5209 8838 3637 8195 8833 3651 8211 5204 8840 3632 8192 5247 8833 3650 8210 5206 8840 3632 8192 8833 3653 8213 5199 8842 3627 8188 5255 8833 3651 8212 5202 8842 3628 8189 8832 3654 8216 5193 8844 3622 8184 5265 8833 3653 8215 5196 8844 3623 8185 8831 3657 8219 5186 8846 3616 8180 5275 8832 3656 8218 5188 8846 3617 8181 8830 3660 8223 5177 8849 3610 8176 5286 8831 3659 8223 5179 8848 3611 8176 8829 3664 8228 5168 8851 3604 8171 5298 8830 3663 8227 5169 8851 3605 8171 8828 3668 8233 5157 8854 3598 8166 5310 8828 3667 8232 5158 8853 3598 8166 8827 3672 8238 5146 8856 3592 8161 5322 8827 3671 8238 5147 8856 3592 8161 8825 3676 8243 5135 8858 3586 8156 5333 8825 3676 8243 5136 8858 3586 8156 8824 3680 8248 5124 8861 3580 8151 5344 8824 3680 8248 5125 8861 3580 8151 8823 3684 8253 5114 8863 3575 8147 5354 8823 3684 8253 5114 8863 3575 8147 8822 3688 8258 5104 8865 3570 8143 5364 8822 3688 8258 5104 8865 3570 8143 8821 3691 8262 5094 8867 3565 8139 5373 8821 3691 8262 5095 8867 3565 8139 8820 3694 8266 5086 8869 3561 8136 5381 8820 3694 8266 5086 8869 3561 8136 8819 3697 8270 5077 8870 3556 8133 5389 8819 3697 8270 5077 8870 3556 8133 8818 3700 8274 5069 5397 8818 3700 8274 5069 8872 3552 8130 5404 8817 3703 8278 5061 8874 3548 8127 5411 8816 3705 8281 5054 8875 3545 8124 5417 8815 3708 8285 5047 8877 3541 8122 5424 8815 3710 8288 5040 8878 3538 8119 5430 8814 3712 8291 5033 8879 3534 8117 5436 8814 3714 8294 5027 8881 3531 8114 5441 8813 3716 8297 5020 8882 3528 8112 5447 8813 3718 8300 5014 8884 3524 8110 5452 8812 3720 8303 5008 8885 3521 8108 5458 8812 3722 8306 5002 8886 3518 8106 5463 8811 3724 8308 4997 8887 3515 8104 5468 8811 3725 8311 4991 8889 3512 8102 8810 3727 8314 4986 8890 3510 8100 5473 8810 3727 8314 4986 8890 3510 8100 8810 3728 8316 4980 8891 3507 8098 5477 8810 3728 8316 4980 8891 3507 8098 5482 8810 3730 8319 4975 8892 3504 8096 5487 8809 3731 8321 4970 8893 3501 8095 5491 8809 3733 8324 4965 8894 3499 8093 8809 3734 8326 4960 8896 3496 8091 5496 8809 3734 8326 4960 8896 3496 8091 8808 3735 8328 4955 8897 3494 8090 5500 8808 3735 8328 4955 8897 3494 8090 5504 8808 3737 8331 4950 8898 3491 8088 8808 3738 8333 4945 8899 3489 8087 5508 8808 3738 8333 4945 8899 3489 8087 8808 3739 8335 4941 8900 3486 8085 5512 8808 3739 8335 4941 8900 3486 8085 8807 3740 8337 4936 8901 3484 8084 5516 8807 3740 8337 4936 8901 3484 8084 8807 3742 8340 4931 8902 3481 8082 5520 8807 3741 8339 4932 8902 3481 8082 8807 3743 8342 4926 8903 3479 8081 5524 8807 3742 8341 4928 8903 3479 8081 8806 3745 8345 4921 8904 3477 8080 5527 8807 3743 8343 4924 8904 3476 8079 8806 3747 8348 4914 8905 3475 8079 5530 8807 3743 8344 4922 8905 3474 8077 8805 3750 8352 4905 8905 3474 8078 5532 8808 3742 8344 4923 8906 3471 8075 8803 3755 8357 4893 8906 3473 8079 5531 8809 3738 8343 4928 8908 3467 8072 8801 3761 8364 4877 8906 3474 8081 5528 8812 3732 8338 4939 8910 3462 8068 8799 3768 8371 4860 8905 3475 8083 5523 8815 3724 8332 4954 8912 3458 8064 8797 3774 8378 4845 8905 3477 8086 5518 8818 3716 8326 4969 8913 3454 8061 8795 3780 8384 4832 8905 3478 8088 5513 8821 3709 8320 4983 8915 3450 8058 8794 3784 8388 4821 8905 3478 8090 5510 8823 3703 8316 4995 8916 3447 8056 8792 3787 8393 4812 8905 3479 8092 5507 8826 3697 8312 5006 8917 3444 8053 8791 3790 8397 4803 8905 3479 8094 5504 8828 3692 8308 5015 8919 3441 8051 8791 3793 8400 4795 8905 3480 8095 5502 8830 3686 8304 5025 8920 3438 8050 8790 3796 8404 4786 8905 3480 8097 5498 8832 3680 8299 5037 8921 3436 8048 8788 3802 8410 4772 8904 3483 8101 5490 8837 3669 8290 5060 8921 3435 8048 8786 3806 8415 4761 8903 3485 8105 5483 8840 3659 8282 5080 8921 3435 8049 8786 3808 8417 4756 8904 3485 8105 5482 8842 3656 8280 5085 8922 3433 8048 8785 3810 8421 4748 8903 3486 8108 5478 8844 3649 8275 5098 8923 3432 8048 8804 3761 8379 4850 8919 3442 8060 5583 8806 3754 8373 4864 8921 3438 8056 8834 3679 8306 5026 8928 3417 8034 5641 8782 3821 8432 4721 8901 3494 8119 8792 3795 8411 4774 8912 3465 8088 5524 8832 3685 8312 5011 8930 3414 8031 8797 3782 8401 4800 8917 3451 8074 5556 8820 3717 8343 4939 8930 3414 8033 8870 3580 8212 5246 8911 3468 8094 5513 8838 3668 8299 5044 8932 3409 8028 8851 3635 8268 5118 8929 3418 8040 5632 8791 3798 8418 4760 8913 3462 8088 8784 3817 8435 4718 8906 3481 8110 5478 8853 3628 8262 5131 8929 3419 8041 8774 3846 8460 4656 8894 3516 8149 5391 8882 3551 8185 5309 8902 3494 8125 8911 3470 8101 5500 8848 3644 8280 5091 8934 3404 8026 5663 8780 3829 8447 8897 3509 8144 5404 8880 3556 8193 5294 8908 3479 8111 5478 8857 3620 8257 8940 3390 8013 5694 8767 3864 8479 4613 8886 3539 8177 5331 8901 3499 8134 8889 3531 8170 5348 8898 3508 8145 5405 8883 3550 8189 5304 8908 3479 8113 8835 3681 8320 5000 8942 3383 8007 5708 8763 3877 8491 4583 8880 3557 8198 8775 3847 8468 4642 8898 3509 8148 5399 8887 3539 8180 5326 8906 3487 8124 8942 3386 8012 5698 8771 3858 8478 4616 8892 3525 8166 5359 8899 3506 8146 8917 3455 8092 5525 8847 3649 8293 5066 8945 3378 8005 5715 8763 3878 8496 8847 3650 8295 5062 8946 3375 8002 5722 8761 3886 8503 4555 8877 3569 8214 8875 3574 8220 5237 8929 3424 8060 5597 8821 3723 8365 4896 8945 3379 8008 8894 3522 8168 5356 8904 3492 8136 5429 8884 3549 8196 5293 8919 3451 8091 8839 3675 8322 4999 8951 3362 7990 5750 8750 3917 8531 4486 8857 3626 8275 8778 3841 8471 4637 8905 3491 8137 5428 8887 3543 8192 5304 8919 3452 8094 8749 3920 8536 4476 8855 3630 8281 5097 8950 3365 7996 5738 8758 3895 8516 8760 3891 8515 4530 8876 3574 8227 5226 8937 3404 8042 5639 8808 3760 8404 8741 3942 8555 4429 8839 3676 8328 4988 8956 3349 7980 5774 8741 3942 8555 8739 3949 8561 4413 8834 3691 8343 4952 8957 3349 7980 5775 8742 3940 8555 8739 3948 8562 4412 8835 3689 8342 4955 8958 3345 7977 5782 8739 3948 8562 8825 3717 8370 4889 8955 3353 7987 5762 8752 3915 8538 4474 8861 3618 8276 8871 3589 8248 5180 8950 3370 8009 5717 8777 3847 8485 4608 8906 3492 8147 8739 3951 8568 4398 8832 3697 8354 4930 8961 3339 7973 5793 8737 3957 8572 8958 3347 7984 5772 8750 3921 8547 4454 8857 3631 8291 5080 8961 3337 7972 8811 3756 8410 4795 8950 3370 8013 5711 8784 3831 8475 4636 8917 3462 8117 8801 3784 8436 4732 8940 3398 8045 5640 8819 3735 8392 4839 8957 3351 7991 8811 3756 8413 4790 8952 3367 8010 5717 8783 3834 8480 4624 8917 3465 8122 8967 3323 7959 5827 8723 3995 8606 4303 8794 3803 8455 4686 8933 3419 8071 8930 3429 8084 5558 8858 3629 8295 5074 8968 3321 7958 5830 8723 3997 8609 8796 3801 8456 4686 8936 3413 8067 5596 8844 3670 8336 4977 8971 3313 7950 8817 3744 8406 4809 8959 3346 7991 5762 8764 3888 8528 4504 8884 3558 8226 8706 4043 8645 4204 8746 3936 8567 4406 8847 3662 8331 4992 8974 3306 7944 8940 3403 8060 5614 8839 3683 8352 4941 8974 3307 7945 5861 8709 4036 8641 8964 3334 7979 5789 8752 3920 8558 4432 8860 3626 8298 5071 8974 3305 7945 8749 3931 8567 4409 8852 3650 8323 5013 8977 3297 7936 5882 8698 4067 8665 8974 3306 7949 5856 8715 4021 8634 4235 8768 3879 8527 4510 8892 3537 8210 8796 3804 8466 4665 8939 3405 8066 5602 8850 3657 8332 4992 8980 3291 7930 8713 4028 8642 4216 8760 3901 8547 4460 8876 3583 8259 5165 8971 3315 7961 8675 4130 8710 4036 8649 4199 8752 3925 8567 4411 8858 3635 8313 5038 8982 7923 5914 8684 4107 8697 4071 8674 4134 8714 4027 8643 4214 8762 3899 8548 8696 4075 8678 4124 8709 4040 8654 4186 8747 3939 8580 4378 8846 3669 8348 8671 4142 8721 4008 8632 4243 8780 3849 8510 4557 8916 3475 8150 5420 8923 8776 3860 8520 4532 8909 3495 8173 5367 8939 3410 8078 5581 8866 3614 8297 8964 3340 7998 5757 8783 3844 8508 4564 8920 3463 8139 5446 8917 3472 8149 8961 3347 8007 5738 8794 3814 8484 4625 8939 3410 8080 5578 8870 3605 8290 8778 3859 8523 4527 8911 3491 8172 5373 8941 3405 8076 5588 8867 3613 8300 7917 5932 8680 4122 8715 4029 8653 4193 8758 3913 8567 4416 8870 3607 8294 7900 5969 8656 4186 8755 3921 8575 4396 8862 3627 8315 5040 8993 3258 7902 8985 3282 7933 5899 8704 4059 8676 4133 8724 4004 8638 4233 8783 3845 8515 8546 4472 8896 3535 8224 5256 8973 3317 7977 5806 8762 3903 8563 4429 8879 8925 3454 8137 5456 8923 3460 8143 5441 8927 3446 8129 5474 8916 3477 8163 8733 3984 8627 4264 8803 3792 8473 4657 8956 3365 8036 5680 8832 3713 8402 8640 4230 8786 3839 8515 4553 8928 3446 8131 5472 8920 3469 8156 5415 8938 8598 4341 8845 3679 8373 4905 8998 3247 7894 5985 8651 4201 8771 3881 8550 8378 4893 8998 3246 7894 5986 8653 4198 8771 3882 8552 4458 8897 3535 8229 8629 4260 8806 3785 8472 4661 8962 3349 8022 5714 8820 3748 8439 4744 8980 8421 4789 8989 3274 7932 5909 8707 4054 8682 4121 8726 4003 8647 4214 8782 8643 4226 8790 3830 8513 4560 8936 3425 8112 5517 8910 3500 8195 5329 8967 8900 3528 8227 5255 8984 3289 7953 5866 8737 3976 8629 4262 8811 3774 8466 8576 4400 8879 3587 8289 5111 9004 3231 7881 6018 8635 4246 8804 3795 8485 8976 3312 7983 5802 8778 3866 8546 4478 8911 3496 8195 5332 8970 3329 8004 8972 3324 7998 5771 8797 3815 8505 4582 8948 3393 8080 5592 8885 3572 8276 8797 3815 8506 4581 8949 3390 8078 5597 8884 3574 8280 5135 9006 3228 7880 4358 8865 3628 8335 5004 9014 3206 7853 6079 8593 9015 3203 7850 6086 8590 4368 8871 3612 8320 5041 9014 3204 7852 6082 8593 9016 3199 7847 6093 8585 4381 8878 3592 8302 5085 9013 3207 7856 6073 8601 7864 6058 8614 4307 8844 3687 8396 4859 9010 3217 7871 6045 8623 4282 8831 8814 3772 8475 4664 8978 3311 7989 5795 8790 3836 8530 4524 8937 3427 8127 9020 3190 7838 6114 8572 4415 8897 3542 8253 5202 9005 3232 7893 6001 8658 8163 5411 8960 3362 8053 5658 8865 3631 8345 4984 9021 3187 7835 6121 8567 8702 4076 8714 4044 8692 4102 8731 3998 8660 4188 8784 3854 8548 4479 8924 9010 3218 7878 6034 8638 4248 8819 3759 8467 4684 8988 3284 7961 5859 8757 8266 5174 9014 3209 7866 6059 8620 4294 8845 3689 8404 4841 9016 3203 7860 8262 5184 9014 3209 7868 6056 8624 4286 8842 3697 8413 4820 9014 3208 7866 8440 4755 9006 3233 7900 5990 8674 4154 8769 3898 8589 4376 8887 3572 8291 8115 5524 8929 3453 8164 5413 8967 3345 8040 5691 8856 3658 8379 4906 9025 8396 4865 9023 3183 7838 6121 8576 4411 8905 3523 8242 5233 9010 3221 7887 8067 5632 8887 3574 8297 5105 9027 3173 7825 6149 8554 4467 8929 3456 8170 8694 4102 8741 3976 8654 4210 8807 3797 8509 4583 8969 3340 8036 5702 8854 7804 6192 8520 4557 8963 3360 8061 5647 8882 3588 8313 5068 9032 3159 7809 8572 4425 8915 3495 8216 5297 9003 3244 7921 5952 8707 4068 8721 4031 8695 8298 5104 9032 3160 7812 6178 8534 4521 8953 3387 8096 5572 8918 3488 8209 8897 3549 8276 5158 9028 3171 7828 6145 8563 4448 8927 3462 8182 5376 8986 8816 3774 8495 4622 8987 3292 7984 5820 8795 3831 8544 4497 8947 3406 8120 8547 4490 8946 3410 8126 5507 8947 3407 8122 5515 8944 3416 8132 5493 8952 8382 4905 9038 3145 7797 6213 8509 4588 8980 3314 8013 5759 8833 3729 8456 9031 3165 7825 6156 8559 4461 8937 3435 8156 5439 8973 3334 8039 5703 8864 8363 4952 9043 3131 7780 6247 8481 4660 9002 3250 7936 5925 8734 3999 8681 8940 3427 8150 5455 8970 3343 8052 5675 8880 3599 8334 5023 9045 3126 7774 8105 5558 8933 3448 8174 5400 8988 3291 7989 5813 8807 3803 8527 4544 8971 8497 4623 8996 3269 7963 5870 8774 3894 8604 4346 8892 3564 8301 5103 9043 8235 5260 9024 3187 7859 6089 8619 4308 8875 3613 8352 4982 9048 3116 7764 8248 5230 9031 3169 7836 6138 8581 4408 8923 3479 8212 5315 9014 3218 7900 8964 3363 8081 5615 8914 3505 8242 5247 9029 3174 7844 6123 8594 4374 8909 8772 3900 8614 4322 8886 3584 8326 5046 9052 3108 7757 6300 8440 4768 9033 8089 5598 8924 3477 8213 5314 9018 3207 7890 6029 8670 4176 8808 3802 8534 8264 5196 9041 3141 7803 6210 8525 4555 8983 3308 8018 5755 8848 3691 8434 8513 4585 8994 3279 7983 5833 8805 3812 8545 4503 8967 3356 8077 5626 8914 7746 6325 8421 4818 9045 3129 7789 6240 8500 4619 9005 3247 7944 5918 8752 8990 3290 8000 5798 8828 3750 8493 4639 9011 3228 7921 5967 8720 4044 8728 7821 6175 8559 4469 8958 3384 8114 5547 8952 3401 8134 5501 8969 3352 8075 8603 4355 8910 3519 8267 5194 9048 3123 7785 6250 8494 4635 9013 3225 7919 9062 3081 7728 6366 8386 4905 9059 3090 7740 6342 8410 4847 9054 3105 7761 9023 3196 7884 6049 8665 4194 8828 3750 8497 4629 9014 3223 7919 5975 8719 9026 3189 7876 6066 8653 4227 8848 3695 8447 4756 9043 3137 7807 6208 8535 8499 4626 9015 3219 7916 5983 8716 4059 8745 3980 8689 4131 8792 3850 8587 3068 7713 6397 8360 4973 9067 3064 7709 6407 8351 4996 9069 3064 7709 6407 8351 4996 9069 3061 7706 6414 8344 5012 9070 3058 7703 6420 8339 5026 9071 3056 7700 6426 8334 5038 9072 3056 7700 6426 8334 5038 9072 8330 5049 9073 3053 7698 6431 8330 5048 9073 3053 7698 6431 8330 5048 9073 8325 5061 9073 3052 7697 6435 8327 5056 9074 3051 7696 6437 8326 5060 9074 8314 5088 9073 3053 7699 6431 8333 5044 9075 3046 7690 6448 8315 5087 9073 3056 7705 6420 8345 5015 9077 3041 7684 6461 8302 5118 9072 3058 7709 6413 8353 4995 9079 3038 7680 6470 8294 5138 9072 8288 5153 9071 3060 7713 6408 8360 4979 9080 3035 7677 6476 8288 5153 9071 8279 5175 9070 3064 7720 6394 8375 4944 9080 3035 7678 6476 8289 5151 9073 8278 5178 9071 3062 7718 6399 8372 4952 9082 3030 7673 6487 8279 5176 9071 8365 4969 9083 3026 7667 6499 8267 5205 9068 3070 7730 6376 8395 4895 9080 8422 4830 9074 3052 7707 6423 8349 5009 9085 3021 7662 6509 8257 5230 9066 8414 4849 9078 3043 7694 6449 8323 5074 9084 3024 7667 6501 8267 5207 9070 8336 5042 9087 3017 7657 6520 8247 5255 9064 3085 7754 6331 8444 4777 9069 7777 6285 8488 4665 9048 3132 7820 6197 8568 4461 8983 3322 8064 5675 8923 9090 3008 7647 6541 8226 5306 9056 3109 7789 6261 8512 4605 9033 3175 7879 8381 4933 9089 3010 7650 6537 8232 5291 9060 3096 7773 6294 8482 4683 9054 8396 4897 9088 3013 7656 6526 8245 5262 9067 3075 7745 6352 8428 4819 9080 8201 5366 9045 3142 7838 6164 8601 4377 8952 3411 8176 5425 9028 3192 7905 8186 5403 9036 3169 7876 6087 8665 4208 8867 3656 8438 4795 9080 3040 7698 7629 6581 8186 5402 9037 3165 7872 6096 8659 4225 8877 3626 8409 4867 9090 7628 6585 8184 5409 9036 3169 7877 6086 8668 4200 8865 3662 8446 4776 9079 9086 3021 7674 6497 8283 5176 9087 3018 7670 6505 8274 5196 9085 3027 7681 9080 3040 7701 6444 8341 5038 9099 2983 7619 6603 8165 5454 9025 3204 7925 7627 6588 8183 5412 9039 3162 7871 6101 8660 4224 8882 3615 8402 4887 9096 8452 4764 9082 3036 7697 6453 8333 5057 9101 2978 7614 6614 8154 5480 9018 9077 3050 7718 6413 8377 4951 9103 2974 7609 6624 8143 5507 9010 3248 7986 8755 3970 8718 4069 8789 3875 8644 4268 8910 3537 8326 5077 9103 2975 7611 9100 2984 7626 6594 8180 5422 9041 3158 7870 6106 8660 4226 8888 3601 8393 9097 2991 7638 6573 8206 5363 9059 3105 7799 6254 8534 4557 9036 3174 7893 9020 3220 7954 5928 8795 3863 8637 4289 8924 3498 8287 5173 9098 2991 7638 8994 3297 8053 5714 8924 3499 8289 5167 9100 2985 7631 6587 8192 5398 9052 8782 3899 8669 4204 8880 3624 8422 4845 9102 2978 7621 6607 8169 5450 9037 8457 4756 9091 3013 7673 6508 8284 5182 9100 2985 7632 6588 8193 5395 9055 9005 3267 8018 5792 8885 3612 8411 4871 9108 2963 7601 6647 8124 5555 9001 8928 3491 8284 5182 9103 2978 7624 6605 8176 5438 9045 3150 7867 6119 8659 8705 4109 8827 3776 8570 4469 9013 3243 7990 5856 8849 3713 8512 4617 9063 8926 3497 8294 5161 9108 2963 7604 6644 8132 5540 9011 3251 8001 5832 8865 9070 3076 7768 6324 8479 4703 9086 3028 7700 6460 8342 5046 9118 2934 7561 8128 5551 9009 3256 8011 5814 8878 3633 8438 4809 9106 2968 7614 6627 8154 8193 5400 9063 3100 7803 6254 8548 4530 9040 3165 7893 6068 8705 4113 8834 9115 2944 7580 6693 8077 5669 8959 3403 8191 5406 9062 3101 7807 6247 8555 8925 3501 8303 5142 9116 2940 7575 6704 8064 5697 8947 3440 8235 5304 9090 8979 3346 8126 5559 9011 3253 8011 5816 8882 3624 8434 4820 9113 2950 7591 8584 4436 9010 3256 8016 5806 8889 3606 8416 4866 9120 2931 7564 6727 8038 8128 5555 9015 3242 7999 5843 8868 3665 8477 4713 9097 2998 7664 6536 8266 8846 3728 8538 4558 9057 3118 7835 6194 8608 4376 8987 3326 8105 5609 8993 7778 6311 8502 4652 9086 3034 7719 6431 8382 4952 9129 2904 7525 6801 7945 7586 6689 8089 5647 8978 3351 8137 5536 9026 3211 7962 5928 8817 3810 8614 7668 6533 8274 5216 9115 2946 7591 6679 8102 5617 8993 3308 8086 5653 8976 7509 6834 7905 6051 8730 4050 8804 3847 8648 4272 8940 3463 8270 5226 9115 7666 6538 8270 5227 9116 2945 7591 6681 8102 5619 8995 3304 8083 5661 8975 8404 4901 9133 2895 7517 6821 7924 6011 8763 3962 8742 4018 8784 3905 8698 9014 3247 8015 5816 8894 3595 8416 4873 9131 2899 7524 6810 7940 5978 8788 8435 4826 9128 2911 7543 6774 7988 5875 8859 3696 8517 4617 9085 3038 7732 8996 3301 8084 5662 8980 3350 8144 5525 9039 3176 7924 6015 8763 3962 8746 9029 3207 7965 5926 8827 3785 8601 4399 9009 3265 8040 5762 8929 3497 8315 7854 6163 8648 4277 8951 3434 8245 5291 9111 2961 7622 6629 8172 5463 9064 9093 3015 7703 6471 8352 5034 9143 2865 7477 6900 7824 6228 8592 4423 9022 8367 4999 9145 2861 7471 6912 7808 6262 8563 4502 9054 3133 7870 6133 8676 7542 6781 7985 5886 8859 3697 8525 4599 9087 3034 7732 6415 8413 4884 9141 9146 2857 7468 6919 7800 6279 8548 4540 9070 3087 7808 6263 8564 4501 9056 7804 6271 8558 4517 9063 3107 7837 6204 8619 4357 8997 3301 8093 5648 8995 7935 5997 8786 3904 8710 4111 8861 3695 8526 4599 9091 3025 7722 6439 8392 9128 2914 7558 6755 8023 5805 8914 3545 8376 4980 9151 2844 7450 6954 7753 8918 3533 8364 5008 9152 2840 7445 6964 7740 6404 8430 4845 9143 2867 7487 8755 3990 8780 3922 8728 4064 8833 3774 8603 4400 9022 3232 8009 5839 8896 8926 3511 8343 5062 9153 2838 7443 6970 7733 6419 8418 4877 9149 2850 7462 7705 6476 8358 5025 9156 2831 7433 6989 7707 6472 8363 5015 9156 2830 7432 7950 5969 8813 3831 8657 4258 8956 3425 8249 5291 9126 2920 7573 6732 8059 8353 5040 9158 2825 7425 7003 7688 6511 8322 5116 9154 2838 7447 6966 7743 7435 6987 7713 6463 8376 4985 9160 2820 7418 7017 7670 6549 8281 5215 9143 8065 5719 8971 3382 8201 5406 9101 2999 7694 6502 8334 5087 9158 2825 7427 7673 6544 8289 5198 9148 2857 7479 6910 7825 6237 8601 4410 9035 3197 7970 9078 3069 7797 6296 8548 4548 9089 3035 7749 6394 8452 4797 9148 2856 7478 7462 6943 7781 6330 8517 4631 9115 2958 7636 6618 8205 5400 9106 2984 7675 7635 6620 8204 5401 9107 2982 7673 6547 8288 5201 9151 2848 7468 6933 7796 8323 5119 9162 2815 7417 7026 7662 6568 8266 5256 9143 2873 7508 6861 7897 8637 4317 8998 3308 8118 5602 9036 3196 7975 5923 8856 3716 8564 4511 9081 7565 6757 8038 5785 8944 3465 8305 5163 9160 2822 7430 7004 7696 6504 8340 9167 2800 7396 7065 7607 6679 8137 5561 9056 3137 7897 6092 8734 4056 8844 7572 6745 8055 5748 8967 3398 8231 5342 9129 2916 7579 6732 8072 5709 8988 7967 5944 8847 3744 8595 4432 9055 3140 7904 6080 8746 4025 8825 3805 8650 8988 3338 8161 5509 9080 3066 7803 6292 8562 4518 9090 3037 7760 6379 8477 8164 5501 9084 3054 7787 6326 8531 4600 9117 2954 7639 6619 8214 5385 9122 7908 6073 8755 4002 8812 3844 8686 4189 8936 3491 8342 5078 9175 2778 7365 8708 4130 8901 3592 8450 4808 9165 2809 7417 7034 7660 6581 8261 5275 9151 7723 6457 8400 4935 9178 2769 7353 7147 7487 6909 7841 6216 8637 4323 9011 7457 6963 7765 6373 8489 4710 9150 2855 7492 6900 7855 6188 8663 4253 8976 8556 4538 9104 2997 7708 6488 8369 5014 9182 2758 7336 7178 7440 6996 7719 7866 6167 8684 4199 8948 3458 8310 5160 9174 2783 7378 7106 7554 6788 8010 8702 4150 8919 3542 8403 4929 9183 2756 7335 7181 7437 7002 7712 6483 8377 8799 3883 8727 4081 8876 3667 8533 4599 9127 2928 7608 6687 8140 5563 9070 8385 4978 9187 2744 7318 7214 7387 7094 7576 6748 8064 5738 8987 3345 8180 7315 7218 7380 7107 7557 6785 8017 5843 8927 3519 8383 4983 9188 2741 7312 7364 7135 7514 6867 7909 6080 8761 3989 8814 3842 8697 4165 8934 3501 8364 7468 6951 7792 6326 8545 4571 9123 2941 7632 6645 8197 5435 9122 2946 7639 7331 7195 7421 7037 7667 6577 8278 5242 9171 2796 7407 7063 7628 6653 8187 9043 3182 7978 5932 8874 3673 8546 4569 9125 2935 7626 6658 8183 5467 9113 7301 7248 7336 7187 7435 7014 7703 6507 8359 5044 9194 2725 7291 7264 7310 7665 6584 8274 5254 9172 2793 7404 7071 7619 6673 8167 5507 9102 3008 7737 3453 8316 5151 9189 2742 7321 7215 7392 7092 7587 6735 8090 5684 9025 3237 7247 7341 7181 7448 6994 7735 6446 8429 4872 9193 2731 7305 7244 7345 7175 8058 5760 8988 3349 8196 5440 9129 2928 7619 6675 8167 5508 9105 3000 7727 4307 9024 3241 8062 5750 8994 3330 8175 5492 9112 2978 7696 6525 8345 5083 7116 7555 6800 8010 5868 8925 3532 8409 4924 9200 2709 7270 7306 7244 7348 3472 8344 5087 9201 2707 7268 7310 7240 7357 7159 7488 6925 7839 6236 8641 7632 6653 8198 5439 9134 2912 7600 6715 8122 5617 9065 3122 7906 6096 8763 6841 7958 5983 8850 3747 8628 4359 9055 3151 7947 6007 8833 3797 8673 4238 5773 8987 3353 8208 5417 9143 2885 7559 6795 8021 5846 8944 3479 8356 5060 7374 7133 7532 6847 7952 5998 8842 3772 8653 4292 9024 3244 8073 5731 9012 4455 9100 3016 7760 6404 8483 4740 9185 2758 7358 7161 7489 6928 7841 6237 2969 7691 6543 8334 5116 9206 2693 7250 7346 7183 7456 6989 7754 6417 8471 4943 9211 2678 7225 7388 7110 7571 6776 8050 5784 8986 3358 8219 5394 9155 9196 2724 7305 7256 7337 7200 7430 7038 7683 6560 8317 5159 9204 2699 7263 8996 3330 8187 5472 9133 2919 7619 6686 8167 5519 9116 2971 7698 6532 8350 2908 7603 6718 8128 5608 9080 3081 7858 6205 8681 4221 8993 3340 8200 5442 2771 7386 7118 7563 6796 8028 5836 8960 3436 8316 5163 9208 2690 7250 7350 8836 3791 8680 4225 8997 3327 8186 5475 9135 2912 7611 6704 8148 5565 9101 5543 9111 2987 7725 6482 8410 4931 9218 2658 7197 7439 7026 7706 6519 8368 9174 2795 7428 7046 7676 6579 8302 5200 9206 2695 7262 7334 7211 7417 7066 6913 7872 6179 8710 4146 8953 3457 8344 5097 9219 2657 7197 7443 7022 7715 7119 7567 6792 8039 5816 8978 3385 8261 5300 9190 2745 7347 7190 7453 7003 7696 6543 8346 5093 9222 2648 7184 7464 6984 7772 6390 8512 4674 9186 2760 8372 5030 9226 2636 7164 7498 6923 7861 6205 8690 4200 8990 3351 8222 5395 8854 3746 8647 4319 9056 3155 7971 5970 8880 3670 8574 4511 9139 2904 7605 7310 7260 7344 7201 7441 7030 7708 6521 8374 5026 9228 2629 7153 7518 6889 8721 4118 8942 3491 8390 4988 9230 2625 7147 7529 6869 7940 6039 8831 3811 5995 8865 3715 8621 4389 9093 3044 7819 6298 8609 4421 9107 3002 7757 6424 8193 5468 9152 2868 7553 6825 8002 5904 8930 3528 8432 4883 9227 2633 7163 2614 7131 7557 6819 8012 5883 8946 3483 8384 5004 9234 2614 7131 7557 6819 5915 8926 3542 8450 4838 9225 2640 7178 7482 6959 7818 6302 8609 4425 9113 9162 2835 7505 6918 7877 6178 8724 4113 8946 3485 8388 4996 9236 2607 7120 8849 3764 8673 4254 9032 3232 8082 5727 9042 3201 8042 5819 8990 3356 8238 7276 7324 7242 7380 7145 7539 6857 7965 5990 8876 3686 8601 4448 9126 2948 9223 2648 7196 7457 7008 7750 6446 8467 4796 9225 2644 7188 7470 6985 7784 4080 8929 3536 8449 4844 9232 2621 7149 7535 6866 7954 6016 8859 3735 8650 7079 7644 6657 8227 5392 9185 2766 7397 7118 7584 6774 8080 5736 9042 3203 7168 7505 6923 7877 6184 8726 4112 8952 3469 8377 5026 9243 2586 7089 7630 7443 7038 7710 6530 8379 5022 9245 2582 7083 7640 6668 8217 5419 9180 2784 7238 7393 7128 7572 6800 8048 5811 9003 3320 8202 5454 9170 2815 7480 6971 8231 5385 9193 2746 7367 7174 7499 6938 7858 6226 8691 4207 9015 3286 8160 3743 8664 4281 9057 3158 7994 5933 8926 3545 8466 4805 9234 2615 7145 7547 3134 7961 6005 8876 3691 8616 4413 9122 2963 7714 6524 8391 4996 9250 2567 8800 3908 8810 3879 8786 3947 8841 3792 8711 4154 8986 3371 8269 5296 9219 6626 8273 5287 9222 2656 7218 7431 7065 7674 6606 8298 5227 9233 2620 7156 7751 6453 8472 4791 9237 2607 7135 7567 6815 8035 5845 8990 3362 8261 5318 7716 6523 8396 4986 9255 2553 7039 7716 6523 8396 4986 9255 2553 7039 7033 7725 6507 8416 4937 9255 2554 7041 7714 6530 8389 5002 9256 2549 7033 7392 7139 7564 6823 8026 5866 8979 3393 8302 5221 9239 2603 7129 7578 6796 7251 7383 7156 7537 6875 7957 6020 8873 3703 8636 4363 9108 3008 7789 6377 6467 8463 4818 9248 2577 7086 7648 6662 8237 5379 9207 2706 7310 7284 7328 6925 7889 6170 8754 4041 8920 3567 8501 4721 9232 2626 7173 7513 6922 7892 7068 7677 6606 8306 5213 9246 2584 7100 7628 6703 8188 5497 9171 2818 7498 4253 9057 3165 8016 5893 8968 3429 8349 5109 9259 2542 7024 7745 6471 8462 7145 7559 6837 8014 5899 8966 3437 8360 5082 9262 2532 7008 7771 6419 8518 6899 7930 6084 8831 3827 8756 4037 8922 3565 8503 4719 9237 2613 7154 7546 2876 7596 6770 8106 5691 9090 3066 7881 6191 8741 4079 8953 3475 8405 4969 8934 3531 8468 4809 9255 2556 7054 7705 6557 8370 5057 9267 2517 6983 7810 8563 4562 9199 2733 7365 7196 7482 6986 7808 6347 8597 4472 9166 2834 7529 9040 3218 8094 5721 9078 3103 7937 6072 8845 3790 8728 4117 8982 3391 8311 6690 8212 5445 9199 2733 7366 7195 7485 6983 7814 6335 8612 4434 9154 2874 3517 8458 4837 9264 2530 7010 7774 6419 8527 4659 9230 2635 7199 7480 6992 7693 6583 8345 5125 9269 2514 6981 7819 6327 8621 4410 9146 2899 7637 6696 3895 8823 3853 8788 3953 8870 3720 8668 4283 9086 3083 7912 6129 8803 3910 8799 3921 8845 3790 8734 4103 8978 3404 8332 5158 9268 2517 6990 7808 6352 7808 6353 8599 4470 9174 2811 7500 6958 7855 6253 8696 4208 9046 3204 8081 9229 2640 7212 7463 7028 7754 6465 8483 4776 9261 2540 7033 7746 6481 8466 6395 8558 4580 9216 2683 7289 7337 7254 7395 7152 7561 6846 8016 5905 8977 9035 3238 8130 5645 9128 2956 7731 6513 8433 4907 9279 2484 6931 7898 6165 4498 9190 2764 7427 7096 7652 6672 8246 5371 9232 2632 7201 7485 6991 7812 9120 2981 7770 6434 8521 4681 9247 2586 7120 7615 6745 8153 5592 9155 2874 9259 2547 7051 7724 6530 8416 4951 9285 2465 6900 7946 6063 8866 3734 8690 7758 6463 8493 4756 9265 2529 7020 7772 6433 8524 4673 9248 2585 7121 7617 6225 8731 4116 8998 3349 8276 5302 9255 2563 7082 7678 6623 8309 5219 9271 7669 6643 8287 5276 9262 2541 7043 7738 6503 8450 4867 9283 2472 6916 7926 8778 3988 8910 3609 8572 4550 9216 2686 7301 7324 7284 7353 7234 7437 7085 8977 3414 8357 5103 9288 2457 6888 7967 6020 8905 3623 8588 4509 9203 2728 4823 9282 2478 6928 7911 6143 8808 3903 8846 3793 8752 4059 8965 3451 8401 8956 3477 8432 4915 9292 2446 6869 7996 5957 8955 3481 8437 4904 9291 2448 2701 7330 7277 7367 7212 7477 7016 7786 6411 8556 4594 9235 2627 7203 7492 6026 8906 3624 8593 4497 9203 2727 7377 7197 7503 6968 7857 6263 8704 4194 6259 8709 4182 9050 3199 8092 5743 9093 3067 7909 6151 8806 3912 8858 3762 8642 4365 9150 2894 7650 6687 8242 5391 9243 2603 7162 7561 6861 8012 5926 4999 9301 2419 6822 8066 5803 9061 3165 8049 5843 9037 3238 8147 5617 9159 6660 8277 5307 9267 2527 7027 7774 6439 8531 4662 9260 2550 7069 7709 6572 6890 7974 6011 8923 3577 8550 4615 9248 2587 7136 7605 6778 8127 5665 9139 6160 8804 3919 8870 3732 8706 4192 9062 3163 8049 5844 9040 3231 8140 5634 8675 4279 9113 3010 7832 6320 8657 4327 9137 2934 7718 6556 8405 4992 9306 9300 2424 6837 8051 5843 9043 3222 8130 5660 9145 2910 7682 6630 8318 5209 8897 3653 8633 4395 9172 2827 7551 6886 7984 5992 8942 3523 8496 4757 9287 2735 7399 7167 7561 6867 8011 5933 8986 3394 8349 5134 9303 2414 6820 8077 8040 5868 9030 3261 8185 5532 9206 2724 7382 7199 7511 6963 7876 6231 8747 2906 7678 6640 8310 5231 9292 2449 6888 7984 5996 8943 3521 8497 4756 9290 4053 8979 3415 8378 5064 9312 2387 6769 8148 5623 9169 2838 7572 6849 8040 2769 7461 7058 7737 6525 8449 4883 9310 2394 6785 8128 5670 9148 2905 7680 4332 9150 2899 7671 6658 8292 5277 9287 2466 6923 7938 6100 8865 3748 8732 3401 8365 5098 9314 2382 6763 8159 5598 9184 2793 7502 6985 7849 6292 8696 2374 6748 8180 5550 9206 2726 7390 7189 7533 6927 7934 6109 8860 3765 8750 7946 6085 8881 3705 8694 4232 9100 3054 7907 6169 8811 3906 8874 3726 8715 5867 9041 3232 8156 5607 9183 2796 7510 6973 7870 6251 8738 4112 9027 3275 3904 8874 3726 8717 4171 9066 3158 8057 5838 9060 3175 8080 5785 9093 3077 7994 5981 8965 3461 8440 4910 9321 2362 6728 8210 5481 9237 2627 7224 7479 8252 5380 9271 2521 7033 7784 6434 8558 4604 9266 2536 7060 7741 6521 8461 7712 6583 8392 5035 9326 2346 6699 8250 5387 9270 2523 7038 7777 6450 8542 3803 8793 3960 8924 3584 8579 4549 9251 2584 7149 7604 6798 8121 5694 9148 9125 2978 7803 6397 8601 4490 9232 2647 7262 7419 7145 7612 6783 8143 5643 5487 9241 2617 7211 7506 6986 7858 6282 8717 4175 9076 3131 8026 5913 9019 9007 3339 8301 5263 9305 2413 6833 8077 5797 9094 3076 7949 6085 8892 3678 9073 3141 8042 5877 9045 3224 8155 5616 9191 2777 7487 7023 7804 6397 8604 2903 7692 6627 8345 5156 9324 2352 6715 8236 5425 9266 2539 7072 7730 6551 7665 6682 8278 5323 9296 2444 6895 7994 5988 8970 3449 8436 4926 9333 2325 6417 8586 4534 9255 2575 7140 7626 6760 8179 5562 9218 2691 7346 7281 7392 8827 3867 8858 3779 8780 4000 8964 3470 8462 4860 9330 2335 6684 8278 5325 3334 8302 5267 9312 2393 6800 8128 5683 9164 2861 7629 6757 8185 5549 9226 6240 8766 4042 8997 3371 8348 5151 9331 2331 6679 8287 5304 9305 2415 6843 8612 4466 9235 2641 7262 7430 7135 7637 6742 8207 5498 9248 2597 7183 7560 6173 8828 3867 8862 3768 8775 4018 8982 3418 8407 5004 9342 2296 6610 8373 5250 9320 2368 6755 8193 5534 9237 2634 7251 7450 7099 7696 6626 8355 5136 6619 8365 5111 9340 2304 6627 8355 5136 9338 2311 6642 8337 5183 9332 2329 9346 2286 6592 8399 5028 9346 2286 6592 8399 5028 9347 2281 6583 8410 4999 9348 2278 6577 8418 4980 9348 2278 6577 8418 4980 9349 2275 6573 8425 4964 9350 2273 6569 8430 4950 9350 2273 6569 8430 4950 9350 2273 6569 8430 4950 9351 2270 6564 8437 4932 9351 2272 6568 8433 4943 9351 2270 6564 8437 4933 9349 2277 6579 8420 4977 9353 2263 6551 8454 4890 9348 2281 6589 8410 5004 9355 2258 6542 8465 4863 9356 2255 6537 8472 4844 9347 2284 6596 8402 5024 9356 2255 6537 8472 4844 9357 2251 6529 8482 4820 9345 2290 6609 8388 5061 9356 2256 6538 8472 4846 9343 2299 6627 8368 5113 9354 2263 6553 8455 4890 9354 2262 6552 8457 4886 9341 2304 6639 8354 5148 9352 2270 6570 8437 4936 9358 2248 6525 8489 4802 9359 2247 6523 8493 4794 9345 2292 6614 8385 5070 9359 2246 6520 8496 4785 2360 6752 8213 5496 9270 2533 7084 7737 6558 8454 4896 9358 2249 6528 8488 7518 6990 7881 6255 8773 4031 9012 3335 8325 5223 9345 2293 6618 8383 5077 2484 6993 7877 6264 8766 4051 9028 3289 8268 5365 9315 2390 6814 8132 5690 2353 6741 8231 5456 9288 2477 6982 7895 6226 8803 3948 8952 3516 8540 4670 8147 5655 9206 2738 7450 7119 7685 6666 8327 5220 9349 2280 6595 8415 4999 8668 4327 9199 2762 7491 7043 7805 6420 8613 4478 9266 2548 7115 7693 6652 3048 7942 6126 8894 3686 8722 4177 9116 3021 7901 6215 8817 3910 8925 3597 9323 2366 6771 8195 5544 9260 2568 7155 7631 6777 8188 5562 9253 2592 7198 2590 7196 7565 6906 8011 5973 9017 3322 8317 5247 9349 2280 6599 8413 5005 9322 2370 6780 8185 5570 9252 2595 7206 7550 6936 7968 6071 8943 3544 8579 9375 2198 6431 8607 4496 9280 2507 7044 7808 6419 8620 4461 9266 2551 7125 9313 2399 6838 8109 5752 9164 2873 7680 6683 8313 5259 9351 2276 6593 8424 8099 5776 9151 2913 7744 6554 8472 4856 9370 2216 6469 8567 4604 9318 2382 2189 6415 8627 4443 9262 2564 7152 7642 6761 8215 5500 9285 2492 7018 7850 2231 6503 8532 4699 9346 2294 6633 8380 5094 9377 2193 6425 8618 4467 9273 6439 8604 4507 9290 2476 6990 7895 6237 8807 3943 8962 3490 8526 4717 9351 9009 3349 8359 5147 9374 2202 6443 8601 4517 9295 2460 6962 7938 6143 8892 5292 9352 2276 6598 8425 4981 9383 2172 6381 8668 4334 9217 2709 7414 7197 5595 9252 2598 7219 7537 6968 7930 6162 8878 3739 8788 3999 9009 3352 8365 9368 2223 6491 8551 4652 9341 2313 6675 8333 5215 9369 2220 6485 8558 4634 5064 9386 2165 6369 8684 4291 9199 2767 7516 7011 7869 6297 8755 4092 9077 8550 4655 9344 2302 6656 8359 5151 9380 2184 6410 8642 4409 9257 2582 7193 8078 5831 9131 2981 7859 6320 8736 4148 9117 3023 7922 6184 8863 3784 8834 9356 2263 6577 8457 4901 9387 2160 6362 8694 4264 9188 2804 7580 6892 8047 8881 3734 8790 3995 9013 3343 8361 5149 9384 2172 6387 8669 4334 9226 2683 9380 2184 6415 8642 4411 9263 2565 7165 7632 6791 8188 5575 9269 2545 7128 9377 2197 6442 8613 4488 9296 2458 6967 7941 6145 8902 3673 8733 4159 9129 8077 5837 9133 2977 7857 6328 8734 4157 9129 2989 7876 6287 8774 4044 9053 9049 3234 8225 5488 9308 2421 6898 8043 5916 9082 3134 8089 5810 9151 2922 6930 7998 6019 9008 3360 8387 5085 9396 2134 6311 8753 4105 9097 3088 8024 2135 6314 8750 4111 9103 3071 8001 6014 9013 3344 8369 5133 9393 2143 6331 9396 2134 6312 8754 4102 9098 3086 8023 5964 9052 3228 8220 5502 9306 2428 9382 2181 6413 8651 4389 9262 2572 7184 7608 6845 8122 5736 9199 2772 7536 4178 9150 2927 7787 6482 8578 4589 9340 2319 6699 8317 5264 9377 2196 6446 9112 3044 7965 6097 8952 3529 8591 4553 9330 2353 6768 8229 5483 9317 2394 9395 2138 6324 8747 4125 9118 3026 7940 6154 8905 3668 8739 4147 9132 2982 4931 9406 2104 6251 8818 3922 8970 3476 8534 4709 9375 2203 6464 8600 4530 8670 4341 9245 2627 7289 7437 7174 7629 6807 8180 5603 9272 2540 7132 7698 8396 5068 9408 2096 6236 8835 3874 8933 3588 8659 4370 9261 2578 7201 7586 8737 4155 9142 2952 7832 6392 8681 4309 9231 2671 7369 7298 7423 7201 7588 8870 3775 8847 3840 8906 3670 8746 4129 9127 3000 7906 6232 8841 3858 8922 4532 9331 2351 6771 8233 5478 9328 2361 6792 8205 5547 9301 2448 6961 7965 3913 8970 3481 8546 4680 9376 2202 6467 8605 4522 9329 2358 6787 8213 5528 3925 8981 3447 8508 4781 9398 2131 6316 8764 4080 9097 3094 8048 5918 9099 2247 6563 8498 4809 9404 2113 6277 8803 3968 9016 3341 8380 5114 9412 2083 9319 2391 6854 8124 5742 9211 2738 7491 7081 7787 6493 8579 4592 9356 2271 8172 5628 9271 2547 7152 7675 6723 8301 5314 9383 2182 6428 8652 4396 9282 9421 2056 6156 8917 3638 8722 4201 9181 2835 7654 6766 8246 5451 9344 2309 8064 5885 9127 3002 7918 6213 8868 3784 8865 3793 8873 3768 8850 3834 8910 6140 8934 3591 8675 4332 9255 2599 7250 7515 7039 7857 6346 8740 4150 9152 7963 6115 8957 3523 8603 4532 9342 2317 6711 8321 5267 9398 2133 6327 8761 5358 9378 2201 6471 8610 4513 9337 2335 6749 8273 5387 9370 2227 6526 8548 9130 2995 7912 6230 8857 3818 8901 3689 8780 4041 9080 3149 8136 5719 9232 4881 9423 2050 6146 8933 3595 8684 4310 9249 2619 7291 7449 7167 7657 6765 6356 8736 4164 9166 2882 7738 6603 8461 4912 9427 2038 6120 8957 3525 8609 8016 5999 9054 3230 8249 5449 9355 2276 6632 8427 5001 9431 2024 6090 8983 9374 2215 6505 8577 4604 9373 2216 6509 8573 4615 9376 2206 6487 8598 4548 5782 9203 2768 7553 6974 7963 6120 8960 3516 8603 4536 9352 2286 6653 8402 5979 9073 3173 8175 5631 9285 2507 7089 7788 6502 8583 4589 9371 2224 6527 6059 9013 3359 8420 5022 9436 2009 6060 9012 3360 8421 5019 9436 2009 6059 8469 4894 9433 2019 6082 8995 3412 8485 4853 9429 2032 6112 8971 3486 8572 8813 3950 9023 3330 8385 5113 9434 2017 6078 9000 3399 8471 4890 9434 2016 7899 6266 8834 3888 8973 3480 8567 4636 9390 2164 6402 8697 4278 9243 2641 1993 6026 9044 3266 8306 5313 9404 2116 6301 8802 3982 9050 3247 8280 5378 3390 8464 4911 9439 1999 6040 9034 3298 8348 5210 9426 2045 6143 8949 3553 6255 8849 3847 8942 3575 8676 4338 9278 2531 7140 7713 6663 8399 5079 9441 2059 6177 8922 3635 8741 4158 9177 2852 7702 6686 8371 5151 9436 2010 6067 6297 8810 3961 9038 3286 8336 5242 9424 2051 6161 8937 3590 8694 4289 9255 2125 6324 8785 4034 9095 3111 8099 5819 9194 2801 7620 6854 8149 5700 9262 6439 8666 4368 9298 2467 7024 7900 6271 8838 3881 8976 3475 8570 4632 9397 2750 7536 7019 7910 6250 8859 3820 8923 3631 8742 4158 9182 2841 7687 6720 6582 8505 4806 9437 2009 6070 9018 3347 8418 5035 9451 1963 5964 9100 3097 9110 3067 8040 5959 9104 3083 8063 5905 9142 2965 7886 6303 8810 3963 9046 8715 4235 9232 2681 7420 7239 7557 6981 7970 6118 8981 3460 8557 4669 9412 6013 9067 3200 8229 5512 9356 2279 6655 8419 5035 9454 1951 5939 9121 3031 7670 6759 8286 5372 9404 2121 6321 8796 4005 9081 3156 8170 5656 9293 2484 6244 8872 3787 8900 3702 8820 3937 9030 3315 8383 5127 9451 1962 5966 9104 3847 8956 3538 8650 4418 9330 2364 6830 8191 5605 9320 2398 6896 8098 5827 8954 3543 8657 4401 9324 2386 6873 8132 5749 9248 2632 7338 7391 7297 7464 9460 1935 5905 9151 2940 7855 6376 8744 4156 9191 2813 7651 6801 8234 5504 4705 9429 2037 6139 8972 3492 8601 4553 9387 2179 6449 8667 4372 9313 2422 1967 5980 9100 3101 8099 5828 9204 2774 7587 6930 8054 5933 9134 2994 7940 8887 3745 8868 3800 8920 3648 8773 4077 9142 2969 7904 6273 8852 3848 8963 9143 2967 7902 6278 8848 3859 8973 3488 8600 4558 9392 2162 6415 8707 4262 5231 9447 1978 6009 9082 3159 8183 5630 9317 2410 6927 8062 5917 9149 2950 5935 9138 2984 7930 6217 8908 3686 8814 3958 9058 3233 8285 5380 9414 2090 6801 8241 5492 9378 2209 6519 8596 4573 9401 2134 6359 8770 4085 9153 2937 4697 9436 2015 6097 9016 3362 8455 4948 9470 1901 5833 9208 2763 7575 6959 4353 9314 2422 6955 8024 6007 9088 3140 8162 5684 9295 2483 7071 7847 6401 8753 4135 9190 2820 7673 6766 8292 5367 9422 2062 6203 8925 3636 8768 4093 7021 7927 6227 8904 3698 8833 3908 9023 3342 8433 5008 9475 1886 5800 9232 7989 6090 9026 3332 8422 5038 9476 1884 5795 9236 2673 7424 7248 7560 6992 2130 6354 8782 4054 9138 2986 7939 6202 8930 3624 8759 4121 9184 2841 7710 8474 4904 9475 1886 5802 9235 2679 7436 7229 7594 6927 8070 5905 9168 2892 6621 8483 4879 9474 1889 5809 9231 2690 7457 7191 7660 6797 8255 5462 9399 9455 1955 5964 9128 3017 7990 6090 9031 3319 8410 5072 9479 1873 5772 9255 9171 2885 7785 6540 8583 4613 9425 2054 6191 8944 3581 8719 4237 9261 2594 8057 5939 9149 2953 7894 6306 8836 3901 9025 3338 8436 5006 9484 1858 5738 9230 2697 7472 7166 7705 6709 8377 5159 9475 1887 5807 9238 2672 7429 7246 3800 8940 3596 8738 4185 9234 2684 7451 7207 7638 6845 8194 5615 9342 2331 9295 2487 7091 7828 6452 8688 4327 9315 2421 6962 8026 6013 9098 3114 8137 2576 7258 7553 7015 7948 6191 8950 3566 8708 4269 9286 2517 7149 7736 6647 7228 7605 6914 8099 5845 9219 2734 7540 7041 7909 6278 8870 3804 8947 3576 7773 6572 8553 4699 9457 1950 5961 9141 2982 7945 6200 8945 3583 8729 4212 6008 9107 3089 8106 5829 9232 2694 7472 7171 7702 6719 8370 5181 9480 1872 4233 9270 2569 7250 7571 6983 8001 6074 9055 3248 8328 5286 9462 1932 5919 9011 3384 8503 4834 9484 1857 5744 9284 2523 7165 7715 6695 8403 5096 9491 9369 2246 6614 8506 4826 9485 1857 5744 9286 2518 7157 7729 6667 8441 5000 5574 9372 2235 6593 8533 4755 9474 1892 5827 9238 2675 7444 7229 7611 6908 5447 9423 2067 6231 8923 3650 8807 3993 9113 3070 8083 5887 9200 2798 7656 9270 2570 7256 7566 6998 7983 6118 9025 3343 8457 4959 9499 1808 5628 9350 1823 5665 9333 2365 6863 8183 5652 9340 2344 6819 8243 5504 9405 2128 6366 2265 6659 8456 4963 9502 1799 5608 9362 2272 6673 8439 5008 9502 1798 5604 8833 3918 9058 3242 8329 5290 9471 1903 5857 9224 2720 7528 7074 7869 6375 6666 8450 4981 9505 1790 5587 9374 2232 6591 8542 4735 9478 1881 5805 9258 5796 9265 2589 7296 7502 7125 7788 6550 8593 4598 9445 1995 6072 9069 3211 6339 8825 3942 9082 3171 8235 5527 9402 2139 6394 8769 4107 9204 2787 7645 6489 8665 4400 9372 2239 6610 8523 4787 9491 1836 5702 9321 2406 6949 8063 7019 7960 6178 8982 3477 8627 4504 9416 2090 6290 8877 3792 8955 3561 8722 9306 2457 7051 7911 6287 8881 3782 8947 3585 8750 4162 9244 2659 7427 7270 6481 8678 4366 9360 2281 6699 8414 5078 9510 1773 5550 9397 2156 6434 8730 9411 2108 6332 8839 3906 9058 3246 8343 5260 9488 1849 5736 9307 2453 7045 2148 6418 8749 4165 9250 2642 7398 7326 7456 7220 7640 6862 8195 5630 9364 9395 2163 6452 8713 4268 9312 2438 7017 7967 6166 8999 3430 8577 4645 9468 2767 7619 6905 8135 5775 9288 2516 7169 7727 6686 8435 5025 9517 1750 5496 5832 9255 2625 7372 7377 7367 7385 7354 7410 7308 7491 7157 7748 6644 8489 8894 3745 8920 3669 8845 3891 9051 3270 8380 5169 9509 1778 5567 9398 2156 9414 2100 6317 8860 3846 9014 3385 8527 4782 9503 1799 5618 9376 2230 6598 9522 1733 5456 9443 2003 6101 9060 3243 8346 5257 9497 1819 5668 9352 2308 9365 2265 6674 8456 4973 9523 1729 5449 9447 1991 6074 9084 3169 8246 5509 1798 5618 9379 2219 6577 8577 4650 9478 1884 5826 9265 2594 7320 7474 7193 2409 6968 8050 5982 9158 2937 7904 6312 8870 3818 8994 3448 8608 4565 9454 5932 9196 2817 7711 6726 8392 5144 9519 1743 5486 9437 2023 6151 9023 3360 9457 1959 6003 9145 2979 7972 6162 9014 3387 8538 4759 9506 1788 5597 9393 8871 3818 8998 3438 8600 4589 9465 1929 5934 9197 2815 7710 6731 8388 5155 6588 8570 4672 9490 1845 5736 9325 2400 6955 8074 5928 9203 2797 7681 6790 9011 3398 8553 4718 9502 1804 5638 9377 2227 6600 8556 4711 9501 1809 5651 9412 2109 6346 8843 3902 9074 3204 8303 5373 9481 1878 5816 9280 2549 7242 9450 1981 6058 9108 3100 8158 5732 9331 2382 6921 8128 5804 9288 2521 7192 9459 1953 5995 9159 2939 7916 6292 8900 3736 8926 3656 8847 3891 9067 3228 5657 9373 2243 6638 8513 4829 9526 1722 5438 9464 1935 5954 9190 2839 7755 9164 2922 7891 6351 8843 3905 9081 3184 8281 5431 9468 1923 5927 9211 2774 9450 1983 6066 9106 3106 8171 5704 9351 2317 6792 8314 5348 9494 1835 5716 2752 7613 6935 8111 5846 9268 2590 7325 7479 7196 7700 6759 8360 5232 9521 6587 8581 4648 9495 1830 5707 9352 2314 6788 8321 5331 9500 1812 5662 9375 5362 9494 1835 5721 9345 2336 6834 8260 5487 9453 1974 6047 9125 3049 8090 9454 1970 6040 9132 3028 8060 5971 9185 2859 7794 6564 8610 4568 9474 1904 9111 3092 8155 5744 9334 2372 6910 8154 5748 9332 2380 6924 8133 5799 9302 5534 9438 2024 6165 9029 3348 8505 4855 9539 1678 5334 9505 1798 5632 9395 5579 9421 2085 6302 8901 3737 8939 3622 8823 3967 9141 3000 8021 6063 9117 9310 2453 7071 7911 6313 8892 3764 8966 3540 8735 4220 9317 2430 7027 7980 9124 3053 8103 5872 9261 2616 7379 7388 7372 7402 7347 7446 7266 7590 6988 2905 7876 6392 8812 4001 9171 2905 7875 6394 8810 4007 9175 2891 7853 6442 7156 7777 6607 8567 4692 9517 1755 5531 9446 2000 6114 9080 3194 8307 5375 9249 2655 7454 7254 7614 6943 8111 5855 9275 2569 7296 7539 7090 7885 6374 3237 8368 5220 9538 1686 5357 9507 1791 5619 9410 2123 6393 8814 3995 9170 6099 9096 3144 8240 5543 9444 2006 6130 9069 3228 8357 5248 9534 1699 5393 1715 5433 9487 1861 5792 9319 2427 7028 7986 6150 9053 3277 8424 5077 9556 7663 6848 8254 5510 9460 1952 6007 9172 2904 7880 6389 8822 3973 9156 2955 5342 9516 1760 5547 9446 2000 6119 9083 3187 8304 5386 9504 1803 5652 9398 9475 1904 5895 9256 2635 7422 7318 7507 7159 7779 6608 8573 4679 9523 1738 9373 2247 6664 8504 4866 9557 1621 5195 9549 1647 5264 9537 1689 5370 9511 1850 5769 9339 2363 6904 8177 5702 9376 2238 6646 8528 4803 9550 1644 5256 9526 1727 5467 9483 1878 5836 9299 2495 7165 7773 6624 8557 4724 9537 1690 9459 1957 6025 9166 2927 7922 6299 8921 3683 8904 3736 8956 3579 8794 4057 8055 5997 9188 2856 7809 6548 8651 4466 9459 1957 6024 9167 2923 7917 6311 9517 1759 5549 9454 1974 6065 9135 3024 8075 5951 9224 2741 7617 6948 8117 1597 5138 9564 1597 5138 9564 1597 5138 9564 1597 5138 9564 1597 5138 9564 1578 5089 9569 1569 5067 9572 1569 5067 9572 1562 5049 9574 1557 5034 9576 1551 5021 9577 1547 5010 9579 1543 4999 9580 1538 4989 9581 1538 4989 9581 1535 4980 9582 1531 4971 9583 1528 4962 9584 1528 4962 9584 1524 4954 9585 1521 4946 9586 1521 4946 9586 1521 4946 9586 1518 4939 9587 1515 4932 9588 1512 4925 9589 1512 4925 9589 1512 4925 9589 1510 4918 9590 1507 4911 9591 1507 4911 9591 1504 4905 9591 1504 4905 9591 1502 4899 9592 1502 4899 9592 1502 4899 9592 1499 4893 9593 1499 4893 1499 4893 9593 1497 4887 9594 1497 4887 9594 1497 4887 9594 1497 4887 9594 1497 4887 9594 1495 4881 9594 1494 4881 9594 1495 4881 9594 1494 4881 9594 1495 4881 9594 1493 4878 9595 1491 4873 9595 1493 4877 9595 1491 4874 9595 1493 4877 9595 1493 4879 9597 1487 4861 9595 1493 4878 9597 1487 4862 9595 1493 4877 9596 1498 4892 9599 1478 4840 9594 1497 4891 9599 1479 4840 9594 1497 4890 9599 1506 4916 9602 1468 4812 9591 1506 4915 9602 1468 4812 9591 1506 4915 9602 1515 4938 1459 4789 9589 1515 4938 9605 1452 4771 9587 1521 4956 9607 1447 4756 9586 1527 4971 9608 1447 4756 9586 1527 4971 9608 1442 4743 9584 1531 4985 9610 1442 4743 9584 1531 4985 9610 1437 4731 9583 1535 4997 9611 1433 4720 9582 1539 5008 9612 1429 4710 9581 1543 5018 9613 1425 4701 9580 1546 5027 9615 1422 4692 9579 1549 5036 9616 1422 4692 9579 1549 5036 9616 1553 5045 9617 1419 4683 9579 1552 5045 9617 1419 4683 9579 1553 5045 9617 1558 5060 9617 1417 4678 9579 1553 5047 9618 1415 4673 9577 1558 5059 9617 1570 5092 9617 1419 4685 9582 1542 5020 9620 1408 4655 9574 1570 5092 9617 1577 5113 9616 1421 4690 9584 1534 4997 9621 1403 4642 9572 1577 5113 9616 1583 5129 9616 1422 4694 9586 1527 4979 9622 1399 4633 9570 1583 5128 9616 1592 5152 9615 1426 4707 9590 1512 4940 9622 1399 4633 9572 1578 5116 9618 1547 5033 9624 1392 4613 9567 1595 5161 9615 1426 4706 9592 1508 4931 9623 1480 4855 9618 1415 4677 9586 1528 4985 9626 1386 4598 9564 1606 5191 9612 1604 5185 9614 1429 4716 9596 1492 4889 9623 1399 4633 9575 1565 5085 9625 1431 4722 9599 1483 4866 9622 1402 4643 9579 1551 5048 9628 1381 4583 9562 1446 4765 9609 1449 4772 9610 1445 4761 9608 1452 4780 9611 1439 4747 9605 1370 4556 9555 1638 5276 9602 1473 4840 9621 1404 4650 9584 1537 5011 9631 1529 4992 9632 1365 4541 9551 1652 5314 9594 1500 4913 9629 1375 4570 9561 1563 5080 9631 1369 4554 9557 1632 5263 9607 1455 4791 9617 1420 4696 9598 1357 4521 9546 1669 5358 9585 1531 4998 9635 1356 4517 9545 1674 5370 9582 1662 5342 9591 1512 4947 9635 1356 4517 9546 1670 5362 9586 1531 4998 9636 1534 5006 9637 1348 4495 9539 1696 5429 9566 1599 5178 9625 1391 4616 9580 1664 5348 9592 1510 4942 9637 1348 4496 9541 1690 5414 9573 1578 5123 9633 1582 5136 9633 1364 4543 9559 1624 5246 9617 1422 4703 9606 1460 4807 9626 1649 5309 9604 1466 4825 9629 1377 4578 9572 1578 5126 9635 1356 4521 9553 1741 5546 9527 1737 5535 9532 1721 5494 9548 1664 5350 9595 1499 4915 9639 9392 2203 6626 8624 4577 9575 1571 5108 9639 1342 4482 9540 1692 5424 9574 1693 5426 9575 1571 5109 9640 1338 4472 9537 1703 5451 9566 1601 5187 9631 1341 4481 9542 1686 5410 9581 1548 5048 9645 1321 4422 9517 1773 5627 9494 9646 1318 4415 9515 1780 5645 9487 1879 5889 9342 2372 6982 8132 5862 9360 1762 5603 9508 1805 5708 9455 1988 6148 9140 3033 8155 5807 9397 2186 6593 4382 9502 1826 5761 9426 2087 6375 8920 3719 9016 3424 8691 4391 9507 1810 9265 2628 7480 7277 7650 6940 8197 5704 9460 1974 6116 9171 2936 8007 6161 8330 5370 9599 1485 4881 9647 1315 4410 9518 1771 5627 9501 1832 5777 9419 4891 9649 1308 4390 9510 1800 5700 9464 1958 6080 9203 2833 7840 6539 8739 1293 4346 9490 1870 5871 9362 2307 6854 8328 5377 9600 1484 4880 9649 1307 4957 9655 1285 4326 9481 1901 5947 9310 2482 7208 7774 6684 8560 4760 9634 7464 7312 7592 7063 8013 6149 9147 3014 8134 5863 9370 2282 6803 8402 5187 7506 7233 7733 6774 8443 5078 9656 1283 4320 9480 1905 5958 9304 2502 7247 8971 3567 8866 3884 9179 2912 7976 6238 9068 3267 8499 4929 9658 1277 4304 1304 4382 9513 1789 5677 9484 1892 5929 9328 2423 7095 7964 6265 9042 3346 9118 3108 8279 5508 9563 1617 5238 9640 1340 4485 9560 1627 5265 9635 1358 4728 9635 1359 4540 9582 1549 5061 9662 1262 4262 9453 1998 6180 9125 3086 1285 4328 9490 1870 5877 9367 2291 6827 8375 5262 9638 1348 4509 9571 1586 7760 6721 8521 4873 9660 1271 4288 9470 1940 6046 9243 2704 7628 6995 8127 1485 4888 9662 1261 4262 9456 1988 6159 9148 3013 8141 5853 9386 2229 6699 3864 9169 2946 8037 6103 9198 2852 7883 6453 8852 3931 9227 2760 7727 6792 9556 1641 5307 9633 1366 4562 9595 1501 4935 9668 1241 4204 9425 2097 6411 2494 7242 7727 6794 8425 5132 9664 1255 4246 9451 2007 6206 9108 3142 8336 6559 8732 4284 9474 1928 6021 9269 2621 7482 7289 7645 6965 8178 5765 9446 7395 7455 7342 7551 7155 7876 6473 8834 3985 9275 2603 7451 7349 7539 7179 9583 1546 5058 9674 1222 4152 9396 2195 6629 8647 4526 9588 1529 5012 9675 1355 4535 9592 1514 4973 9676 1214 4129 9382 2243 6733 8513 4899 9672 1228 6824 8390 5230 9657 1283 4329 9503 1829 5785 9439 2051 6310 9013 3444 8740 9510 1803 5721 9477 1919 6003 9289 2556 7366 7511 7238 7739 6774 8460 5045 6477 8835 3984 9280 2586 7424 7406 7439 7376 7494 7272 7681 6896 8288 5495 1216 4136 9392 2211 6668 8604 4652 9634 1364 4563 9607 1462 4834 9670 1234 6098 9216 2800 7808 6630 8654 4512 9590 1523 5000 9682 1191 4064 9343 2377 2906 7986 6230 9097 3181 8402 5199 9668 1243 4215 9445 2030 6267 9062 3293 9649 1312 4415 9552 1656 5354 9636 1358 4546 9605 1470 4857 9677 1211 4124 8725 4311 9502 1834 5802 9437 2059 6336 8995 3503 8817 4040 9329 2426 7119 1233 4189 9432 2074 6371 8959 3613 8942 3665 8997 3496 8811 4059 9345 2373 4026 9321 2453 7175 7855 6531 8781 4149 9408 2158 6559 8747 4249 9470 1946 9431 2080 6385 8946 3655 8989 3523 8844 3961 9272 2618 7490 7287 7663 6942 6532 8781 4149 9410 2152 6546 8764 4198 9442 2043 6302 9034 3383 8677 4450 2081 6390 8943 3663 9000 3491 8809 4067 9355 2339 6947 8222 5666 9520 1771 6771 8477 5006 9694 1152 3952 9268 2632 7519 7233 7760 6740 8520 4890 9689 3945 9264 2646 7545 7183 7847 6552 8761 4211 9453 2005 6216 9122 3107 8304 6533 8785 4140 9409 2157 6561 8751 4239 9471 1942 6070 9252 2684 7616 7041 8283 5517 9594 1512 4979 9697 1139 3916 9241 2720 7681 6909 8283 5516 9594 1134 3901 9230 2757 7747 6772 8481 4998 9699 1134 3901 9230 2757 7747 6771 9237 2735 7709 6853 8368 5299 9665 1256 4260 9487 1887 5939 9357 2333 6940 8163 5820 9440 2050 6324 9021 3428 8742 4269 9493 1866 5890 9394 2209 6679 7158 7895 6449 8888 3837 9177 2930 8040 6116 9219 2795 7815 6627 8675 4461 9641 1344 4517 9613 1444 4797 9687 1175 4025 9335 2411 7101 7990 6234 9113 9334 2414 7109 7978 6263 9086 3225 8481 5000 9705 1112 3837 9180 2923 8030 5716 9507 1819 5777 9472 1943 6078 9255 2676 7609 7063 8054 6085 9249 2696 2199 6661 8636 4574 9637 1359 4561 9632 1375 4605 9647 1324 4459 9594 1514 8831 4008 9326 2441 7165 7889 6468 8872 3886 9227 2770 7778 6711 8571 4755 3866 9210 2826 7874 6502 8834 4002 9323 2452 7187 7852 6551 8775 4175 9445 9200 2860 7932 6371 8980 3557 8902 3797 9149 3024 8194 5749 9493 1870 5904 5059 9711 1090 3774 9129 3090 8295 5495 9617 1431 4763 9690 1166 4000 9324 5036 9713 1083 3752 9109 3155 8391 5247 9690 1168 4007 9331 2427 7141 7932 1087 3764 9121 3116 8336 5390 9656 1292 4371 9561 1631 5305 9679 1208 4128 5387 9658 1284 4350 9552 1664 5391 9657 1288 4361 9558 1643 5337 9672 1234 9679 1209 4132 9425 2108 6466 8881 3861 9213 2817 7865 6526 8812 4069 9380 9674 1225 4178 9456 2000 6219 9140 3054 8247 5621 9569 1605 5237 9697 1143 7655 6979 8198 5744 9504 1831 5816 9461 1983 6182 9177 2937 8065 6068 9277 5245 9698 1140 3927 9273 2620 7519 7255 7744 6792 8472 5034 9721 1056 3673 7677 6935 8266 5575 9594 1516 5002 9722 1050 3655 9018 3443 8779 4168 9453 6985 8190 5764 9496 1861 5890 9415 2141 6543 8797 4116 9419 2127 6514 8832 2555 7399 7485 7322 7628 7038 8108 5966 9362 2325 6941 8259 5594 9587 1539 9588 1536 5058 9725 1041 3629 8995 3516 8869 3901 9256 2678 7628 7039 8108 1046 3646 9013 3460 8804 4096 9409 2162 6594 8739 4287 9530 1744 5601 9587 4015 9351 2362 7021 8140 5892 9419 2130 6524 8824 4037 9368 2305 6902 8320 9375 2280 6850 8398 5237 9708 1103 3821 9189 2902 8016 6189 9180 2930 8063 4338 9561 1635 5323 9690 1168 4015 9353 2354 7006 8164 5834 9461 1986 6196 3592 8961 3625 8996 3515 8874 3890 9252 2693 7660 6979 8208 5726 9527 1754 1026 3585 8954 3647 9021 3439 8785 4156 9456 2003 6236 9139 3064 8274 5560 7536 7230 7798 6686 8628 4608 9675 1224 4183 9475 1937 6081 9280 2603 7497 9592 1524 5029 9736 1002 3511 8873 3894 9260 2669 7620 7062 8080 6043 9313 3505 8867 3913 9277 2613 7518 7267 7735 6824 8441 5126 9731 1019 3565 8935 8182 5795 9492 1877 5940 9394 2217 6722 8583 4738 9712 1091 3785 9164 2986 8798 4119 9438 2068 6390 8987 3547 8917 3763 9144 3050 8259 5602 9599 1501 4191 9486 1899 5993 9357 2346 6996 8189 5779 9505 1834 5836 9468 1961 6142 3350 8681 4463 9630 1389 4662 9698 1142 3942 9306 2517 7339 7610 7088 8044 7361 7571 7167 7913 6437 8938 3698 9083 3247 8545 4844 9734 1009 3535 8907 2606 7512 7286 7708 6887 8357 5351 9697 1146 3955 9319 2472 7255 7763 6768 4299 9554 1660 5398 9684 1192 4092 9425 2113 6497 8872 3901 9276 2619 7537 2272 6847 8418 5193 9733 1014 3553 8930 3724 9113 3152 8416 5197 9732 1016 4301 9558 1647 5364 9697 1146 3957 9324 2457 7227 7814 6661 8673 4488 9646 9564 1625 5307 9713 1087 3778 9167 2977 8154 5870 9454 2012 6268 9123 3120 1627 5313 9713 1088 3782 9172 2961 8129 5932 9412 2158 6600 8753 4258 9537 946 3341 8679 4473 9644 1340 4527 9665 1263 4305 9564 1627 5313 9714 1084 5709 9558 1649 5374 9699 1139 3937 9313 2497 7310 7671 6970 8240 5658 9585 2140 6563 8802 4115 9449 2030 6313 9082 3254 8565 4795 9738 994 3493 8868 9322 2465 7248 7784 6731 8586 4737 9729 1029 3601 8993 3536 8919 3762 9158 7586 7148 7957 6344 9052 3348 8693 4436 9633 1380 4643 9707 1108 3847 9238 934 3306 8639 4590 9693 1161 4007 9373 2293 6898 8352 5372 9704 1120 3881 1048 3663 9062 3317 8654 4546 9679 1211 4155 9481 1920 6056 9325 2459 7238 9760 914 3242 8555 4827 9749 954 3370 8723 4349 9595 1516 5022 9761 911 914 3244 8558 4818 9749 954 3371 8725 4343 9594 1523 5040 9762 909 3225 3051 8280 5562 9640 1355 4575 9693 1163 4013 9383 2261 6834 8449 5117 9758 9765 898 3191 8487 5017 9765 898 3191 8487 5017 9766 893 3176 8466 5074 9764 901 3201 8502 4976 9766 893 3178 8470 5063 4948 9766 892 3174 8464 5078 9765 897 3190 8487 5017 9767 888 3163 8448 5890 9459 2000 6253 9156 3021 8238 5671 9592 1528 5057 9767 888 3162 8449 9080 3263 8591 4731 9742 984 3467 8851 3974 9358 2347 7018 8178 5823 9505 6236 9174 2960 8145 5905 9451 2028 6319 9091 3229 8545 4859 9763 903 3211 9347 2387 7104 8042 6155 9251 2710 7722 6876 8397 5261 9746 969 3421 8798 4064 9431 2099 6482 8914 3783 9195 2894 8040 6160 9248 2720 7741 6837 8455 1421 4766 9753 941 3332 8686 4462 9661 1279 4361 9615 1447 4838 9765 899 3595 9004 3508 8905 3813 9225 2796 7877 6540 8848 3984 9373 2299 6923 8329 855 3057 8301 5516 9673 1237 4240 9551 1676 5457 9696 1154 3992 9380 2275 9513 1814 5807 9524 1774 5708 9583 1564 5161 9768 885 3155 8447 5131 9772 9768 888 3165 8462 5091 9777 855 3057 8303 5511 9678 1220 4190 9523 1776 2200 6713 8633 4617 9724 1051 3681 9101 3203 8517 4942 9780 843 3020 8247 9141 3074 8330 5443 9705 1119 3887 9298 2554 7442 7450 7434 7464 7407 7515 7922 6442 8970 3617 9035 3414 8799 4137 9492 1888 5993 9398 2214 6747 8589 6047 9356 2360 7057 8129 5952 9430 2104 6502 8901 3827 9247 2727 7762 6799 9138 3083 8348 5399 9724 1051 3683 9107 3184 8495 5006 9786 820 2946 8134 2821 7929 6428 8989 3559 8974 3603 9024 3449 8846 3997 9393 2231 6787 8538 8805 4119 9485 1913 6058 9351 2377 7096 8069 6100 9315 2500 7341 7643 7054 4328 9613 1457 4873 9783 830 2979 8190 5804 9537 1730 5602 9648 1330 4515 7262 7787 6750 8592 4739 9764 901 3211 8537 4890 9786 819 2945 8137 5937 9435 2087 6469 8947 3689 9119 3147 8447 5137 9785 824 2963 8166 5866 9499 958 3393 8782 4189 9536 1734 5615 9645 1340 4547 9713 1092 3811 9239 2753 7732 6871 8423 5205 9778 849 3044 8296 5539 9681 1210 4166 9522 1783 5740 3512 8928 3750 9184 2936 8126 5967 9430 2107 6515 8896 3848 9276 2632 7599 4768 9776 857 3072 8340 5424 9727 1042 3657 9090 3241 8585 4762 9775 862 9246 2734 7786 6757 8588 4752 9774 864 3095 8376 5331 9756 934 3319 8692 9793 793 2863 8009 6251 9187 2929 8119 5986 9419 2147 6608 8786 4181 9537 3333 8712 4398 9659 1291 4407 9663 1277 4366 9643 1348 4573 9730 1031 3627 3388 8783 4192 9546 1699 5530 9692 1170 4052 9450 2039 6366 9071 3304 8674 3675 9115 3162 8479 5058 9802 760 2754 7826 6672 8708 4413 9668 1257 4310 9535 1740 5636 9646 1338 4545 9724 1054 3698 9140 3082 8362 5373 9750 955 9242 2749 7819 6690 8686 4477 9699 1146 3980 9398 2219 6773 8573 4800 9790 7864 6589 8817 4093 9484 1919 6082 9348 2392 7138 8013 6245 9199 2889 8060 7031 8190 5816 9547 1696 5527 9700 1143 3971 9393 2236 6811 8521 4943 9807 9682 1207 4164 9535 1739 5636 9651 1322 4501 9712 1098 3835 9277 2631 7607 7778 6782 8565 4825 9799 773 2799 7910 6487 8944 3708 9156 3034 8294 5553 2327 7008 8230 5718 9610 1472 4927 9810 731 2659 7661 7032 8192 5814 9552 9324 2473 7306 7726 6896 8402 5271 9785 827 2977 8208 5775 9578 1587 5241 8897 3852 9297 2565 7487 7386 7580 7201 7913 6483 8952 3683 9134 3104 8404 7753 6840 8487 5042 9815 712 2595 7546 7272 7790 6759 8601 4726 9787 820 3793 9245 2742 7814 6707 8673 4520 9727 1043 3670 9122 3145 8465 5101 9813 7974 6345 9108 3191 8534 4914 9816 711 2593 7543 7278 7780 6783 8570 4814 6904 8396 5289 9787 819 2952 8172 5866 9525 1777 5741 9604 1493 4989 9820 731 2661 7672 7016 8225 5736 9608 1478 4949 9820 694 2538 7441 7481 7403 8475 5079 9820 695 2541 7446 7471 7424 7514 7339 7673 7015 8227 5732 9612 736 2678 7706 6947 8334 5456 9742 988 3499 8938 3730 9189 2927 8136 5960 7891 6540 8893 3870 9323 2481 7331 7689 6982 8280 5596 9685 1198 4143 9536 1208 4173 9557 1663 5450 9747 971 3446 8876 3920 9368 2327 7019 8224 5740 1712 5578 9696 1159 4027 9455 2024 6347 9114 3173 8516 4968 9827 669 2453 5988 9444 2063 6437 9017 3484 8925 3771 9235 2779 7889 6547 8887 3888 9343 6526 8914 3806 9270 2662 7681 7004 8250 5676 9650 1327 4524 9741 992 3515 2418 7210 7911 6499 8948 3702 9169 2997 8254 5667 9656 1307 4467 9719 1073 8012 6264 9204 2881 8066 6136 9325 2475 7325 7707 6951 8335 5458 9750 959 6668 8739 4336 9660 1292 4424 9703 1133 3952 9402 2212 6777 8591 4761 9811 7873 6588 8843 4026 9462 2003 6302 9167 3003 8265 5641 9673 1243 4282 9632 1352 4601 9773 872 3131 8462 5122 9830 657 2414 7205 7924 6473 8983 3596 8155 5920 9504 1853 5941 9489 1909 6079 9380 2290 6948 8345 5435 9763 911 2404 7185 7959 6393 9075 3304 8707 4432 9711 1103 3862 9329 2463 7306 7746 6463 8997 3551 9013 3500 8954 3685 9160 3030 8312 5522 9732 1025 3621 9091 9094 3244 8627 4663 9796 785 2848 8018 6256 9220 2830 7987 6328 9147 3071 1867 5978 9466 1991 6277 9200 2898 8102 6054 9405 2202 6760 8622 4677 9801 4455 9727 1047 3690 9168 3003 8273 5627 9689 1187 4119 9538 1736 5650 9677 2039 6392 9081 3286 8687 4491 9743 987 3504 8963 3659 9137 3106 8432 5205 8126 5997 9454 2032 6376 9100 3226 8606 4724 9816 711 2603 7583 7219 7907 5960 9484 1927 6129 9346 2409 7203 7935 6454 9015 3498 8958 3675 9156 3044 7338 7695 6987 8294 5575 9718 1078 3789 9271 2663 7697 6983 8300 5559 9725 6593 8850 4010 9464 2000 6303 9181 2962 8213 5781 9609 1480 4967 9849 585 7407 7568 7252 7853 6645 8785 4205 9602 1506 5041 9850 581 2156 6663 8761 8535 4928 9850 581 2158 6669 8755 4296 9657 1305 4472 9742 990 3514 8982 3359 8793 4184 9591 1545 5148 9845 602 2230 6829 8534 4930 9852 576 2140 7533 7326 7722 6934 8380 5352 9806 750 2736 7834 6689 8730 4370 9698 1153 9819 701 2570 7529 7335 7707 6968 8330 5485 9763 912 3266 8671 4542 9774 5092 9854 567 2110 6565 8891 3886 9368 2333 7054 8194 5834 9583 1576 5235 7044 8211 5793 9611 1476 4961 9858 552 2058 6444 9036 3435 8893 3882 9366 6653 8782 4218 9619 1447 4881 9854 567 2109 6563 8897 3871 9357 2373 7137 738 2695 7765 6846 8517 4983 9861 541 2018 6354 9138 3108 8449 5169 9850 636 2349 7090 8139 5976 9487 1921 6121 9366 2341 7074 8166 5909 9537 1743 8965 3660 9156 3050 8364 5399 9801 770 2805 7963 6399 9092 3258 8667 4559 2032 6389 9103 3221 8616 4704 9830 658 2427 7253 7862 6632 8814 4125 9563 4218 9625 1426 4824 9854 568 2115 6582 8878 3930 9414 2177 6720 8699 4468 7690 7011 8271 5644 9704 1135 3971 9449 2054 6442 9046 3405 8863 3977 9454 2153 6669 8769 4261 9653 1323 4532 9782 842 3044 8359 5416 9800 773 2814 3250 8661 4580 9800 774 2818 7990 6341 9160 3039 8351 5437 9794 795 2888 8943 3733 9237 2782 7929 6483 9002 3546 9036 3438 8908 3842 9341 2430 7263 2413 7230 7908 6533 8944 3731 9236 2787 7938 6464 9026 3472 8950 3711 9216 9004 3542 9034 3447 8920 3803 9308 2544 7491 7424 7553 7298 7787 6806 8586 525 1963 6232 9275 2657 7706 6982 8323 5514 9770 887 3191 8583 4805 9860 8291 5597 9735 1018 3612 9115 3187 8577 4821 9863 533 1992 6301 9207 2884 3645 9152 3067 8400 5309 9840 624 2310 7019 8267 5660 9705 1131 3963 9453 5202 9862 536 2005 6335 9174 2993 8287 5609 9732 1031 3654 9162 3033 8349 3969 9460 2020 6370 9139 3111 8470 5122 9874 492 1849 5955 9519 1808 5853 6155 9353 2390 7189 7987 6356 9155 3058 8391 5336 9836 636 2353 7113 8117 9858 554 2068 6484 9012 3520 9016 3507 9002 3553 9054 3385 8851 4020 9503 5544 9766 902 3245 8666 4572 9811 733 2685 7765 6860 8516 4997 9884 455 1701 5580 9752 958 3424 8903 3861 9372 2327 7059 8208 5815 9622 1437 4865 9810 737 2698 7791 6806 8597 4771 9865 526 1969 6254 9264 2695 7785 6819 7627 7158 8045 6219 9299 2578 7566 7282 7827 6726 8709 4447 9766 902 3247 9081 3301 8746 4337 9714 1097 3864 9378 2308 7023 8270 5660 9716 1090 3842 6956 8376 5380 9833 651 2407 7230 7922 6512 8985 3607 9122 3168 8562 4871 1234 4281 9686 1202 4185 9628 1416 4810 9877 482 1814 5876 9588 1564 5220 9813 725 2661 7728 6947 8392 5340 9846 598 2226 6847 8543 4926 9890 430 2797 7972 6397 9121 3173 8573 4841 9884 456 1721 5638 9733 1030 3656 9179 2757 7904 6557 8935 3766 9292 2603 7620 7178 8018 6290 9236 2792 7966 6413 9236 2794 7970 6405 9114 3196 8608 4744 9870 507 1906 6107 9411 2194 6780 8847 4038 9531 1771 5769 9663 1289 4446 9776 868 3139 8526 4976 9897 403 3562 9080 3308 8766 4284 9696 1168 4085 9567 1640 5429 9826 678 2501 7427 2164 6715 8735 4375 9745 983 3511 9021 3496 9004 3551 9069 3344 8814 4140 4988 9901 388 1478 4989 9901 388 1478 9901 389 1481 4998 9902 383 1460 4939 9901 389 1481 4998 9902 383 1460 9900 391 1488 5017 9903 379 1444 4894 9899 396 1505 5065 9902 385 1466 451 1706 5606 9759 930 3343 8817 4133 9607 1496 5040 9904 376 1434 4867 5521 9799 782 2855 8084 6138 9393 2260 6931 8429 5247 9882 463 1749 5718 447 1692 5570 9779 858 3107 8487 5088 9904 376 1434 4868 9900 391 1488 4939 9907 365 1394 4753 9884 453 1713 5627 9753 955 3424 8925 3804 9341 8253 5715 9707 1127 3964 9484 1940 6197 9342 2438 7309 7797 6809 8613 4735 461 1744 5708 9713 1107 3902 9433 2120 6623 8867 3984 9502 1878 6046 9477 9850 584 2181 6761 8682 4537 9827 674 2491 7416 7599 7235 7933 6503 9017 9824 687 2535 7505 7426 7580 7273 7865 6659 8822 4121 9607 1497 5048 9913 4232 9681 1225 4264 9700 1155 4052 9559 1673 5526 9805 758 2777 7954 6453 8990 3603 9142 3112 8503 5050 9915 334 1281 4430 9787 827 3008 8341 5488 8164 5945 9563 1657 5485 9824 686 2536 7508 7422 7591 7254 7902 6576 8932 2019 6394 9148 3093 8476 5125 9912 345 1321 4547 9837 635 2361 7155 8076 9890 431 1638 5433 9845 605 2254 6928 8445 5212 9902 385 1470 4975 9920 503 1895 6096 9444 2082 6542 8977 3645 9192 2947 8249 5731 9709 1122 3954 9503 1875 6046 9488 1929 6179 9371 2341 7116 8146 5995 9530 1779 5805 9665 1455 4936 9922 308 1183 4141 9631 1412 4813 9910 356 1362 4669 9880 471 9300 2586 7612 7217 7973 6416 9129 3156 8575 4852 9916 330 1268 4396 9780 9144 3109 8506 5047 9925 295 1136 3999 9528 1784 5821 9659 1309 4517 9833 1600 5338 9882 463 1753 5742 9709 1122 3956 9495 1905 6124 9426 2150 6701 7188 8027 6289 9268 2693 7816 6780 8670 4579 9858 556 2084 6552 8972 3662 9752 960 3448 8973 3660 9217 2867 8123 6056 9487 1934 6196 9361 2375 7194 7991 6377 9178 2998 8339 5501 9831 659 2445 7338 7760 6905 8489 5096 9927 7932 6516 9019 3514 9055 3400 8915 3843 9400 2240 6905 8490 5092 9929 280 9703 1145 4030 9559 1673 5536 9819 705 2605 7654 7134 8125 6054 9492 1917 4832 9924 301 1161 4079 9597 1535 5164 9924 299 1154 4057 9581 1594 5324 7300 7833 6746 8724 4424 9804 764 2804 8019 6315 9249 2760 7943 6494 9048 8364 5440 9860 547 2057 6493 9051 3415 8938 3772 9338 2458 7369 7706 7027 8321 5553 9817 715 2639 7722 6992 8360 5449 9858 555 2085 6561 8970 3674 9421 2168 6750 8722 4433 9812 733 2702 7840 6734 8745 4365 9779 858 3120 9338 2458 7372 7703 7036 8293 5630 9783 844 3072 8463 5173 9929 280 1082 8722 4434 9815 723 2666 7776 6878 8540 4958 9942 231 897 3248 8721 4435 9717 1095 3878 9442 2094 6585 8944 3756 9328 2494 7447 7563 7331 7782 6866 9498 1898 6118 9448 2076 6543 8998 3588 9151 3089 8492 5093 9941 232 901 3035 8411 5318 9906 372 1423 4857 9938 246 953 3431 8967 3685 9258 2733 9641 1375 4720 9916 331 1274 4423 9815 723 2668 7784 6864 8564 4892 9943 6178 9397 2256 6953 8430 5266 9920 314 1212 4237 9717 1094 3877 9447 2079 5993 9558 1683 5571 9820 703 2603 7663 7128 8148 6007 9546 1724 5678 9767 3765 9343 2442 7346 7761 6917 8488 5109 9946 213 828 3022 8394 5365 9898 9589 1568 5264 9924 299 1153 4060 9601 1525 5146 9944 223 867 3152 8592 7772 6893 8526 5003 9954 184 720 2660 7773 6893 8527 5000 9954 184 720 276 1069 3803 9384 2301 7053 8276 5681 9770 893 3240 8721 4442 9831 662 3428 8972 3674 9256 2742 7926 6547 9003 3575 9148 3105 8526 5006 9956 174 9579 1607 5373 9902 387 1482 5028 9957 171 668 2483 7434 7598 7269 7906 8199 5881 9649 1349 4648 9909 358 1375 4725 9928 283 1096 3887 9465 2016 3130 8566 4894 9955 177 694 2574 7616 7234 7971 6442 9131 3162 8614 4758 2785 8006 6361 9223 2857 8130 6057 9516 1834 5968 9588 1574 5285 9929 282 5539 9847 602 2253 6956 8438 5251 9937 249 967 3482 9043 3447 9001 3583 316 1220 4269 9751 968 3485 9049 3429 8980 3651 9238 2806 8044 6270 9321 9146 3113 8546 4953 9964 143 563 2119 6657 8870 3996 9563 1667 5536 9850 188 735 2716 7886 6646 8885 3948 9525 1804 5893 9648 1354 4666 9922 310 4286 9764 919 3327 8851 4054 9610 1493 5063 9966 136 536 2021 6430 9152 6034 9542 1743 5738 9751 967 3484 9052 3423 8976 3664 9257 2743 7938 6527 208 811 2974 8332 5542 9853 579 2176 6789 8693 4531 9882 465 1769 5806 2149 6730 8777 4280 9764 918 3325 8853 4051 9612 1488 5052 9970 119 471 1470 5000 9972 110 435 1660 5522 9864 537 2027 6447 9137 3145 8599 4804 9822 697 2587 7651 7169 8096 6149 9446 2086 6586 8970 3686 9285 2648 7767 4016 9588 1575 5295 9940 238 925 3350 8889 3940 9527 1798 5885 9662 1302 2193 6833 8636 4701 9940 236 921 3338 8874 3988 9568 1651 5501 9876 489 1840 5992 9584 1590 5338 9932 271 1051 3753 9357 2403 7285 7894 6636 8909 4333 9801 778 2865 8159 5996 9583 1596 5354 9929 283 1099 3904 9499 1901 2285 7036 8324 5568 9851 587 2204 6859 8600 4807 9965 140 550 2076 6567 9885 453 1728 5707 9782 853 3116 8563 4911 9978 88 349 1344 4643 9930 5836 9703 1149 4061 9630 1423 4874 9976 96 379 1455 4964 9982 73 288 9975 98 388 1491 5067 9982 73 288 1119 3968 9558 1687 5600 9840 631 3038 8448 5237 9962 150 590 2217 6892 8555 4936 9983 67 267 1036 3710 5704 9788 828 3035 8443 5251 9961 156 612 2296 7065 8283 5682 9800 782 9777 870 3172 8653 4658 9940 236 922 3344 8892 3936 9535 1770 5819 9719 1969 6317 9295 2617 7719 7035 8335 5546 9869 515 1951 6274 9340 2462 7415 9989 43 172 675 2515 7522 7447 7596 7296 7884 6667 8879 3977 9572 1638 2339 7161 8125 6089 9517 1838 5995 9596 1550 5235 9969 124 489 1860 6050 4843 9982 70 278 1079 3847 9461 2039 6489 9106 3254 8774 4300 9796 797 4900 9990 42 167 655 2447 7388 7714 7050 8314 5603 9848 597 2245 6959 295 1146 4058 9640 1388 4779 9975 99 392 1506 5113 9990 41 165 648 9916 333 1289 4488 9891 430 1644 5492 9899 398 1530 5180 9983 68 269 175 689 2565 7625 7241 7989 6425 9185 2994 8388 5407 9931 274 1066 3810 58 230 899 3273 8805 4207 9747 985 3552 9160 3076 8518 5050 9998 10)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPC") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1280 730) (om-make-point 0 23) nil)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "population-equation-x-voices" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "x-value" nil) (om-load-inputfun (quote input-funbox) "" "list-of-r-values-smaller-than-4" nil) (om-load-inputfun (quote input-funbox) "" "initializing-value" nil) (om-load-inputfun (quote input-funbox) "" "multiplicator-for-pitches" nil) (om-load-inputfun (quote input-funbox) "" "how-many-voices" nil))) (om-make-point 65 219) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 185 339) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "plotter" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "initialized-x-value" nil) (om-load-inputfun (quote input-funbox) "" "how-many-voices" nil) (om-load-inputfun (quote input-funbox) "" "r-value-less-than-4" nil))) (om-make-point 93 267) (om-make-point 128 59) nil nil (list (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 177 183) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 225 345) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 169 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "r-value-less-than-4" 2 (om-make-point 289 28) "" "r-value-less-than-4" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "how-many-voices" 1 (om-make-point 140 29) "" "how-many-voices" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "initialized-x-value" 0 (om-make-point 19 25) "" "initialized-x-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "accum" (quote accumulator) (quote ((om-load-inputfun (quote input-funbox) "items to collect" "DATA" nil) (om-load-inputfun (quote input-funbox) "initial value" "INIT" nil) (om-load-inputfun (quote input-funbox) "accumulation function" "FUN" nil))) (om-make-point 238 276) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "logistic-equation" (om-load-patch-abs1 "logistic-equation" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "R-value" 1 (om-make-point 184 50) "" "R-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "X-value" 0 (om-make-point 50 50) "" "X-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 318 359/2) nil (list nil) "l" "logistic-equation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 302 448) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 202 448) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (6 0 1 0 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (0 0 6 0 nil 0) (5 0 6 1 nil 0) (7 0 6 2 nil 0) (1 1 8 0 nil 0) (1 0 9 0 nil 0))) 1 "plotter" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "how-many-voices" 4 (om-make-point 489 100) "" "how-many-voices" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 139 92) (quote "^^ how many times the initial recursion will take place (100 at least, but more recommended though it'll slow down things considerably)$") "" (om-make-point 331 109) nil (om-make-color 0 0 0) (om-make-font "Verdana" 9.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 274 489) (om-make-point 83 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "multiplicator-for-pitches" 3 (om-make-point 359 209) "" "multiplicator-for-pitches" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "initializing-value" 2 (om-make-point 310 35) "" "initializing-value" nil (om-make-point 98 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "initializer" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "x-value" nil) (om-load-inputfun (quote input-funbox) "" "init-value" nil) (om-load-inputfun (quote input-funbox) "" "list-of-r-values" nil))) (om-make-point 70 185) nil nil nil (list (let ((box (om-load-boxin "list-of-r-values" 2 (om-make-point 299 41) "" "list-of-r-values" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "init-value" 1 (om-make-point 224 41) "" "init-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 237 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 1000) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 231 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "accum" (quote accumulator) (quote ((om-load-inputfun (quote input-funbox) "items to collect" "DATA" nil) (om-load-inputfun (quote input-funbox) "initial value" "INIT" nil) (om-load-inputfun (quote input-funbox) "accumulation function" "FUN" nil))) (om-make-point 289 267) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x-value" 0 (om-make-point 151 43) "" "x-value" nil (om-make-point 36 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "logistic-equation" (om-load-patch-abs1 "logistic-equation" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 184 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 355 379/2) nil (list nil) "l" "logistic-equation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 315 349) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 210 349) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0) (2 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 4 2 nil 0) (4 1 7 0 nil 0) (4 0 8 0 nil 0))) 1 "initializer" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 266 372) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 182 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 214 422) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list-of-r-values-smaller-than-4" 1 (om-make-point 120 32) "" "list-of-r-values-smaller-than-4" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x-value" 0 (om-make-point 62 35) "" "x-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 301 532) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 106 533) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (7 0 1 0 nil 0) (2 0 1 1 nil 0) (9 0 1 2 nil 0) (10 0 4 0 nil 0) (5 0 4 1 nil 0) (12 0 7 0 nil 0) (6 0 7 1 ((om-make-point 357 92) (om-make-point 357 111) (om-make-point 98 112) (om-make-point 98 185)) 0) (9 0 7 2 nil 0) (11 0 9 0 nil 0) (0 1 10 0 nil 0) (8 0 10 2 nil 0) (4 0 13 0 nil 0) (0 0 14 0 nil 0))) 1 "population-equation-x-voices" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 25" (quote t) (quote nil) (om-make-point 299 178) (om-make-point 34 30) 15 "15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 76 156) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER 3" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 113 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 107 50) (om-make-point 45 30) 2.75 "2.75" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 138 51) (om-make-point 59 30) 3.9999 "3.9999" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 194 75) (om-make-point 59 30) 5.0E-4 "0.0005" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 233 169) (om-make-point 55 30) 10000 "10000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 50 365) (om-make-point 438 141) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (5025) (5050) (5074) (5098) (5122) (5146) (5169) (5192) (5215) (5238) (5261) (5283) (5305 5305) (5327) (5349) (5370) (5392) (5413 5413) (5434) (5455) (5475) (5495) (5516) (5536 5536) (5556 5556) (5575 5575) (5595) (5614) (5633) (5652 5652) (5671) (5690) (5708) (5726 5726) (5745) (5763) (5781) (5798) (5816 5816) (5833 5833) (5851) (5868 5868) (5885 5885) (5902 5902) (5918) (5935 5935) (5951 5951) (5968 5968) (5984 5984) (6000 6000) (6016) (6032 6032) (6047 6047) (6063) (6078 6078) (6094 6094) (6109 6109) (6124 6124) (6139 6139) (6154 6154) (6169) (6183 6183) (6198 6198) (6212) (6226) (6241) (6255 6255) (6269 6269) (6283 6283) (6296 6296) (6310 6310) (6324 6324) (6337 6337) (6350 6350) (6364) (6377 6377) (6390 6390) (6403) (6416 6416) (6429 6429) (6441 6441) (6454 6454) (6466 6466) (6479 6479) (6491 6491) (6503 6503) (6516 6516) (6528 6528) (6540 6540 6540 6540 6540 6540 6540) (6552 6552 6552 6552 6552 6552 6552) (6564 6564 6564 6564 6564 6564 6564) (6575 6575 6575 6575 6575 6575 6575) (6587 6587 6587 6587 6587 6587 6587) (6600 6598 6600 6598 6600 6598 6599) (6613 6607 6613 6607 6613 6608 6613) (6630 6613 6630 6614 6629 6615 6628) (6655 6611 6654 6613 6653 6614 6651) (6698 6591 6696 6593 6694 6595 6692) (6772 6536 6770 6538 6767 6541 6765) (6884 6435 6882 6437 6880 6439 6878) (7011 6307 7011 6308 7010 6309 7009) (7127 6183 7127 6184 7127 6184 7127) (7224 6076 7224 6076 7224 6076 7224) (7306 5984 7306 5984 7306 5984 7306) (5902 7377) (5828 7440) (5759 7498) (5696 7551) (5636 7600) (5580 7646) (5527 7689) (5476 7729) (5427 7768) (5380 7805) (5335 7840) (5291 7873) (5249 7905) (5208 7936) (5169 7966) (5130 7995) (5093 8022) (5057 8049) (5021 8075) (4986 8100) (4953 8124) (4920 8148) (4887 8171) (4856 8193) (4825 8215) (4794 8236) (4765 8257 4765 8257) (4735 8277) (4707 8296) (4679 8315) (4651 8334) (4624 8352 4624 8352 4624 8352) (4597 8370 4597 8370) (4571 8388 4571 8388) (4545 8405) (4520 8422 4520 8422) (8438 4495 8438 4495 8438 4495 8438) (8454 4470 8454 4470 8454 4470 8454) (8470 4444 8469 4447 8470 4445 8469) (8492 4404 8478 4439 8492 4406 8479) (8547 4285 8449 4522 8546 4287 8450) (8613 4132 8389 4675 8613 4132 8389) (4786 8659 4029 8348) (4872 8694 3951 8317) (8724 3885 8291 4944 8724 3885 8291) (5009 8750 3828 8269) (5067 8773 3777 8250) (5121 8795 3731 8233) (8815 3688 8217 5171 8815 3688 8217) (8832 3652 8207 5210 8834 3645 8200) (8817 3703 8278 5060 8874 3548 8127) (8808 3738 8333 4945 8899 3488 8086) (8785 3809 8419 4752 8903 3487 8107) (8852 3638 8286 5085 8947 3372 8001) (8968 3323 7965 5818 8735 3968 8592) (8917 3475 8163 5398 8943 3403 8082) (7833 6128 8565 4436 8910 3506 8219) (8829 3744 8479 4670 9010 3228 7913) (8324 5063 9074 3051 7697 6435 8327) (9100 2983 7618 6604 8163 5458 9024) (8355 5016 9125 2915 7538 6775 7976) (9065 3101 7830 6218 8607 4388 9013) (8558 4529 9094 3025 7743 6414 8442) (8916 3557 8434 4861 9193 2731 7305) (8620 4390 9088 3060 7836 6257 8642) (8269 5296 9218 2668 7239 7396 7126) (2792 7467 7018 7764 6440 8506 4716) (4056 8968 3442 8397 5008 9300 2422) (7631 6742 8193 5523 9223 2673 7304) (6572 8425 4962 9349 2275) (7971 6064 8950 3524 8558 4629 9323) (5412 9336 2330 6720 8287 5337 9357) (3247 8266 5403 9364 2246 6567 8500) (7122 7747 6597 8486 4858 9442 1990) (6253 8880 3769 8901 3707 8842 3881) (9380 2211 6545 8593 4595 9438 2017) (5722 9326 2393 6936 8096 5872 9235) (5597 9414 2108 6356 8848 3894 9083) (5047 9574 1562) (1494 4881 9595 1494 4880 9594 1494) (1495 4895 9621 1405 4649 9578 1558) (1562 5086 9647 1314 4406 9514 1786) (4363 9518 1775 5651 9511 1800 5711) (6594 8714 4349 9536 1718 5522 9594) (4014 9347 2376 7046 8097 5993 9341) (9621 1422 4757 9727 1036 3621 9008) (8388 5287 9743 980 3456 8843 4000) (5315 9761 914 3257 8609 4694 9763) (1559 5172 9813 720 2625 7608 7152) (7179 7979 6354 9127 3138 8484 5069) (5425 9804 761 2776 7922 6503 8982) (9664 1285 4435 9774 876 3164 8565) (6332 9221 2852 8094 6125 9422 2161) (3672 9248 2766 7964 6453 9110 3227) (4611 9915 338 1303 4523 9884 457))) :lonset (quote (0 150 300 450 600 750 900 1050 1200 1350 1500 1650 1800 1950 2100 2250 2400 2550 2700 2850 3000 3150 3300 3450 3600 3750 3900 4050 4200 4350 4500 4650 4800 4950 5100 5250 5400 5550 5700 5850 6000 6150 6300 6450 6600 6750 6900 7050 7200 7350 7500 7650 7800 7950 8100 8250 8400 8550 8700 8850 9000 9150 9300 9450 9600 9750 9900 10050 10200 10350 10500 10650 10800 10950 11100 11250 11400 11550 11700 11850 12000 12150 12300 12450 12600 12750 12900 13050 13200 13350 13500 13650 13800 13950 14100 14250 14400 14550 14700 14850 15000 15150 15300 15450 15600 15750 15900 16050 16200 16350 16500 16650 16800 16950 17100 17250 17400 17550 17700 17850 18000 18150 18300 18450 18600 18750 18900 19050 19200 19350 19500 19650 19800 19950 20100 20250 20400 20550 20700 20850 21000 21150 21300 21450 21600 21750 21900 22050 22200 22350 22500 22650 22800 22950 23100 23250 23400 23550 23700 23850 24000 24150 24300 24450 24600 24750 24900 25050 25200 25350 25500 25650 25800 25950 26100 26250 26400 26550 26700 26850 27000 27150 27300 27450 27600 27750 27900 28050 28200 28350 28500 28650 28800 28950 29100 29250 29400 29550 29700 29850 29950)) :ldur (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100) (100 100) (100 100) (100 100) (100) (100) (100) (100 100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100) (100 100) (100 100) (100 100) (100) (100) (100) (100 100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 16 12 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 31/50 nil 1000 0 (om-make-point 737 415) (om-make-point 221 163) 1 1 (quote :normal) (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 168 294) (om-make-point 62 30) (list 0 150) "(0 150)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 222 328) (om-make-point 51 30) (list 100) "(100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 174 156) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 2 1 nil 0) (0 1 2 2 nil 0) (5 0 3 0 nil 0) (6 0 3 1 nil 0) (14 0 3 2 nil 0) (10 0 3 3 nil 0) (4 0 3 4 nil 0) (7 0 6 0 nil 0) (8 0 6 1 nil 0) (9 0 6 2 nil 0) (3 0 11 1 nil 0) (12 0 11 2 nil 0) (13 0 11 3 nil 0))) 7.02 nil "" (om-make-point 293 23) (om-make-point 987 730)) (quote nil) (om-make-point 2041/4 1343/6) nil nil nil "Final-Version-bpc-realization"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Final-Version" (om-load-patch-abs1 "Final-Version" (quote ((let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 271 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "population-equation-x-voices" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "x-value" nil) (om-load-inputfun (quote input-funbox) "" "list-of-r-values-smaller-than-4" nil) (om-load-inputfun (quote input-funbox) "" "initializing-value" nil) (om-load-inputfun (quote input-funbox) "" "multiplicator-for-pitches" nil) (om-load-inputfun (quote input-funbox) "" "how-many-voices" nil))) (om-make-point 65 219) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 185 339) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "plotter" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "initialized-x-value" nil) (om-load-inputfun (quote input-funbox) "" "how-many-voices" nil) (om-load-inputfun (quote input-funbox) "" "r-value-less-than-4" nil))) (om-make-point 93 267) (om-make-point 128 59) nil nil (list (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 177 183) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 225 345) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 169 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "r-value-less-than-4" 2 (om-make-point 289 28) "" "r-value-less-than-4" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "how-many-voices" 1 (om-make-point 140 29) "" "how-many-voices" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "initialized-x-value" 0 (om-make-point 19 25) "" "initialized-x-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "accum" (quote accumulator) (quote ((om-load-inputfun (quote input-funbox) "items to collect" "DATA" nil) (om-load-inputfun (quote input-funbox) "initial value" "INIT" nil) (om-load-inputfun (quote input-funbox) "accumulation function" "FUN" nil))) (om-make-point 238 276) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "logistic-equation" (om-load-patch-abs1 "logistic-equation" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "R-value" 1 (om-make-point 184 50) "" "R-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "X-value" 0 (om-make-point 50 50) "" "X-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 318 359/2) nil (list nil) "l" "logistic-equation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 302 448) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 202 448) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (6 0 1 0 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (0 0 6 0 nil 0) (5 0 6 1 nil 0) (7 0 6 2 nil 0) (1 1 8 0 nil 0) (1 0 9 0 nil 0))) 1 "plotter" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "how-many-voices" 4 (om-make-point 489 100) "" "how-many-voices" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 139 92) (quote "^^ how many times the initial recursion will take place (100 at least, but more recommended though it'll slow down things considerably)$") "" (om-make-point 331 109) nil (om-make-color 0 0 0) (om-make-font "Verdana" 9.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 274 489) (om-make-point 83 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "multiplicator-for-pitches" 3 (om-make-point 359 209) "" "multiplicator-for-pitches" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "initializing-value" 2 (om-make-point 310 35) "" "initializing-value" nil (om-make-point 98 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "initializer" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "x-value" nil) (om-load-inputfun (quote input-funbox) "" "init-value" nil) (om-load-inputfun (quote input-funbox) "" "list-of-r-values" nil))) (om-make-point 70 185) nil nil nil (list (let ((box (om-load-boxin "list-of-r-values" 2 (om-make-point 299 41) "" "list-of-r-values" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "init-value" 1 (om-make-point 224 41) "" "init-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 237 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 1000) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 231 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "accum" (quote accumulator) (quote ((om-load-inputfun (quote input-funbox) "items to collect" "DATA" nil) (om-load-inputfun (quote input-funbox) "initial value" "INIT" nil) (om-load-inputfun (quote input-funbox) "accumulation function" "FUN" nil))) (om-make-point 289 267) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x-value" 0 (om-make-point 151 43) "" "x-value" nil (om-make-point 36 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "logistic-equation" (om-load-patch-abs1 "logistic-equation" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 184 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 337 355)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 355 379/2) nil (list nil) "l" "logistic-equation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 315 349) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 210 349) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0) (2 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 4 2 nil 0) (4 1 7 0 nil 0) (4 0 8 0 nil 0))) 1 "initializer" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 266 372) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 182 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 214 422) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list-of-r-values-smaller-than-4" 1 (om-make-point 120 32) "" "list-of-r-values-smaller-than-4" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x-value" 0 (om-make-point 62 35) "" "x-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 301 532) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 106 533) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (7 0 1 0 nil 0) (2 0 1 1 nil 0) (9 0 1 2 nil 0) (10 0 4 0 nil 0) (5 0 4 1 nil 0) (12 0 7 0 nil 0) (6 0 7 1 ((om-make-point 357 92) (om-make-point 357 111) (om-make-point 98 112) (om-make-point 98 185)) 0) (9 0 7 2 nil 0) (11 0 9 0 nil 0) (0 1 10 0 nil 0) (8 0 10 2 nil 0) (4 0 13 0 nil 0) (0 0 14 0 nil 0))) 1 "population-equation-x-voices" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 25" (quote t) (quote nil) (om-make-point 299 178) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 76 156) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER 3" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 113 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 107 50) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 138 51) (om-make-point 59 30) 3.9999 "3.9999" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 194 75) (om-make-point 45 30) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 233 169) (om-make-point 55 30) 10000 "10000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 50 365) (om-make-point 438 141) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (5025) (5050) (5074) (5098) (5122) (5146) (5169) (5192) (5215) (5238) (5261) (5283) (5305 5305) (5327) (5349) (5370) (5392) (5413 5413) (5434) (5455) (5475) (5495) (5516) (5536 5536) (5556 5556) (5575 5575) (5595) (5614) (5633) (5652 5652) (5671) (5690) (5708) (5726 5726) (5745) (5763) (5781) (5798) (5816 5816) (5833 5833) (5851) (5868 5868) (5885 5885) (5902 5902) (5918) (5935 5935) (5951 5951) (5968 5968) (5984 5984) (6000 6000) (6016) (6032 6032) (6047 6047) (6063) (6078 6078) (6094 6094) (6109 6109) (6124 6124) (6139 6139) (6154 6154) (6169) (6183 6183) (6198 6198) (6212) (6226) (6241) (6255 6255) (6269 6269) (6283 6283) (6296 6296) (6310 6310) (6324 6324) (6337 6337) (6350 6350) (6364) (6377 6377) (6390 6390) (6403) (6416 6416) (6429 6429) (6441 6441) (6454 6454) (6466 6466) (6479 6479) (6491 6491) (6503 6503) (6516 6516) (6528 6528) (6540 6540 6540 6540 6540 6540 6540) (6552 6552 6552 6552 6552 6552 6552) (6564 6564 6564 6564 6564 6564 6564) (6575 6575 6575 6575 6575 6575 6575) (6587 6587 6587 6587 6587 6587 6587) (6600 6598 6600 6598 6600 6598 6599) (6613 6607 6613 6607 6613 6608 6613) (6630 6613 6630 6614 6629 6615 6628) (6655 6611 6654 6613 6653 6614 6651) (6698 6591 6696 6593 6694 6595 6692) (6772 6536 6770 6538 6767 6541 6765) (6884 6435 6882 6437 6880 6439 6878) (7011 6307 7011 6308 7010 6309 7009) (7127 6183 7127 6184 7127 6184 7127) (7224 6076 7224 6076 7224 6076 7224) (7306 5984 7306 5984 7306 5984 7306) (5902 7377) (5828 7440) (5759 7498) (5696 7551) (5636 7600) (5580 7646) (5527 7689) (5476 7729) (5427 7768) (5380 7805) (5335 7840) (5291 7873) (5249 7905) (5208 7936) (5169 7966) (5130 7995) (5093 8022) (5057 8049) (5021 8075) (4986 8100) (4953 8124) (4920 8148) (4887 8171) (4856 8193) (4825 8215) (4794 8236) (4765 8257 4765 8257) (4735 8277) (4707 8296) (4679 8315) (4651 8334) (4624 8352 4624 8352 4624 8352) (4597 8370 4597 8370) (4571 8388 4571 8388) (4545 8405) (4520 8422 4520 8422) (8438 4495 8438 4495 8438 4495 8438) (8454 4470 8454 4470 8454 4470 8454) (8470 4444 8469 4447 8470 4445 8469) (8492 4404 8478 4439 8492 4406 8479) (8547 4285 8449 4522 8546 4287 8450) (8613 4132 8389 4675 8613 4132 8389) (4786 8659 4029 8348) (4872 8694 3951 8317) (8724 3885 8291 4944 8724 3885 8291) (5009 8750 3828 8269) (5067 8773 3777 8250) (5121 8795 3731 8233) (8815 3688 8217 5171 8815 3688 8217) (8832 3652 8207 5210 8834 3645 8200) (8817 3703 8278 5060 8874 3548 8127) (8808 3738 8333 4945 8899 3488 8086) (8785 3809 8419 4752 8903 3487 8107) (8852 3638 8286 5085 8947 3372 8001) (8968 3323 7965 5818 8735 3968 8592) (8917 3475 8163 5398 8943 3403 8082) (7833 6128 8565 4436 8910 3506 8219) (8829 3744 8479 4670 9010 3228 7913) (8324 5063 9074 3051 7697 6435 8327) (9100 2983 7618 6604 8163 5458 9024) (8355 5016 9125 2915 7538 6775 7976) (9065 3101 7830 6218 8607 4388 9013) (8558 4529 9094 3025 7743 6414 8442) (8916 3557 8434 4861 9193 2731 7305) (8620 4390 9088 3060 7836 6257 8642) (8269 5296 9218 2668 7239 7396 7126) (2792 7467 7018 7764 6440 8506 4716) (4056 8968 3442 8397 5008 9300 2422) (7631 6742 8193 5523 9223 2673 7304) (6572 8425 4962 9349 2275) (7971 6064 8950 3524 8558 4629 9323) (5412 9336 2330 6720 8287 5337 9357) (3247 8266 5403 9364 2246 6567 8500) (7122 7747 6597 8486 4858 9442 1990) (6253 8880 3769 8901 3707 8842 3881) (9380 2211 6545 8593 4595 9438 2017) (5722 9326 2393 6936 8096 5872 9235) (5597 9414 2108 6356 8848 3894 9083) (5047 9574 1562) (1494 4881 9595 1494 4880 9594 1494) (1495 4895 9621 1405 4649 9578 1558) (1562 5086 9647 1314 4406 9514 1786) (4363 9518 1775 5651 9511 1800 5711) (6594 8714 4349 9536 1718 5522 9594) (4014 9347 2376 7046 8097 5993 9341) (9621 1422 4757 9727 1036 3621 9008) (8388 5287 9743 980 3456 8843 4000) (5315 9761 914 3257 8609 4694 9763) (1559 5172 9813 720 2625 7608 7152) (7179 7979 6354 9127 3138 8484 5069) (5425 9804 761 2776 7922 6503 8982) (9664 1285 4435 9774 876 3164 8565) (6332 9221 2852 8094 6125 9422 2161) (3672 9248 2766 7964 6453 9110 3227) (4611 9915 338 1303 4523 9884 457))) :lonset (quote (0 150 300 450 600 750 900 1050 1200 1350 1500 1650 1800 1950 2100 2250 2400 2550 2700 2850 3000 3150 3300 3450 3600 3750 3900 4050 4200 4350 4500 4650 4800 4950 5100 5250 5400 5550 5700 5850 6000 6150 6300 6450 6600 6750 6900 7050 7200 7350 7500 7650 7800 7950 8100 8250 8400 8550 8700 8850 9000 9150 9300 9450 9600 9750 9900 10050 10200 10350 10500 10650 10800 10950 11100 11250 11400 11550 11700 11850 12000 12150 12300 12450 12600 12750 12900 13050 13200 13350 13500 13650 13800 13950 14100 14250 14400 14550 14700 14850 15000 15150 15300 15450 15600 15750 15900 16050 16200 16350 16500 16650 16800 16950 17100 17250 17400 17550 17700 17850 18000 18150 18300 18450 18600 18750 18900 19050 19200 19350 19500 19650 19800 19950 20100 20250 20400 20550 20700 20850 21000 21150 21300 21450 21600 21750 21900 22050 22200 22350 22500 22650 22800 22950 23100 23250 23400 23550 23700 23850 24000 24150 24300 24450 24600 24750 24900 25050 25200 25350 25500 25650 25800 25950 26100 26250 26400 26550 26700 26850 27000 27150 27300 27450 27600 27750 27900 28050 28200 28350 28500 28650 28800 28950 29100 29250 29400 29550 29700 29850 29950)) :ldur (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100) (100 100) (100 100) (100 100) (100) (100) (100) (100 100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100) (100 100) (100 100) (100 100) (100) (100) (100) (100 100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 16 12 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 31/50 nil 1000 0 (om-make-point 737 415) (om-make-point 221 163) 1 1 (quote :normal) (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 168 294) (om-make-point 62 30) (list 0 150) "(0 150)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 222 328) (om-make-point 51 30) (list 100) "(100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 174 156) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 1 1 nil 0) (12 0 1 2 nil 0) (8 0 1 3 nil 0) (2 0 1 4 nil 0) (5 0 4 0 nil 0) (6 0 4 1 nil 0) (7 0 4 2 nil 0) (1 0 9 1 nil 0) (10 0 9 2 nil 0) (11 0 9 3 nil 0))) 7.02 nil "" (om-make-point 208 84) (om-make-point 530 587)) (quote nil) (om-make-point 1409/4 1319/6) nil nil nil "Final-Version"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "using-funcall" (om-load-patch-abs1 "using-funcall" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 362 62) (om-make-point 45 30) 1.24 "1.24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "population-equation-4-voices" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "x-value" nil) (om-load-inputfun (quote input-funbox) "" "r-value-less-than-4" nil) (om-load-inputfun (quote input-funbox) "" "initializing-value" nil) (om-load-inputfun (quote input-funbox) "" "input3" nil))) (om-make-point 50 221) nil nil nil (list (let ((box (om-load-boxcomment "comment" (om-make-point 134 173) (quote "how many times the initial recursion will take place (100 at least, but more recommended though it'll slow down things considerably)$") "" (om-make-point 238 110) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 324 622) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input3" 3 (om-make-point 380 41) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "initializing-value" 2 (om-make-point 250 39) "" "initializing-value" nil (om-make-point 98 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "initializer" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 70 122) nil nil nil (list (let ((box (om-load-boxin "input 3" 2 (om-make-point 274 41) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 224 41) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 237 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 1000) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 231 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "accum" (quote accumulator) (quote ((om-load-inputfun (quote input-funbox) "items to collect" "DATA" nil) (om-load-inputfun (quote input-funbox) "initial value" "INIT" nil) (om-load-inputfun (quote input-funbox) "accumulation function" "FUN" nil))) (om-make-point 289 267) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 177 46) "" nil nil (om-make-point 36 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 184 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 355 379/2) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 315 420) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 160 389) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0) (2 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 4 2 nil 0) (4 1 7 0 nil 0) (4 0 8 0 nil 0))) 1 "initializer" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 302 509) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 164 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 258 550) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 73 457) (om-make-point 263 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 182 516) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALL 3" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 265 416) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALL 2" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 212 366) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch 2" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "R-value" 1 (om-make-point 184 50) "" "R-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "X-value" 0 (om-make-point 50 50) "" "X-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 100 433/2) nil (list 0.5) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALL" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 159 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "R-value" 1 (om-make-point 184 50) "" "R-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "X-value" 0 (om-make-point 50 50) "" "X-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 25 433/2) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "r-value-less-than-4" 1 (om-make-point 132 39) "" "r-value-less-than-4" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x-value" 0 (om-make-point 59 45) "" "x-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 273 648) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 101 594) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((7 0 1 0 nil 0) (2 0 1 1 nil 0) (16 0 4 0 nil 0) (3 0 4 1 nil 0) (6 0 4 2 nil 0) (15 0 6 0 nil 0) (9 1 7 0 nil 0) (5 0 7 2 nil 0) (12 0 8 0 nil 0) (13 0 8 1 nil 0) (11 0 8 2 nil 0) (10 0 8 3 nil 0) (8 0 9 0 nil 0) (14 0 10 0 ((om-make-point 51 563/2) (om-make-point 51 711/2) (om-make-point 83 851/2) (om-make-point 280 416)) 0) (11 0 10 1 nil 0) (14 0 11 0 ((om-make-point 51 563/2) (om-make-point 51 661/2) (om-make-point 85 753/2) (om-make-point 227 366)) 0) (13 0 11 1 nil 0) (4 0 12 0 nil 0) (6 0 12 1 ((om-make-point 186 175) (om-make-point 186 189) (om-make-point 138 206) (om-make-point 138 433/2)) 0) (14 0 13 0 ((om-make-point 51 563/2) (om-make-point 51 591/2) (om-make-point 83 613/2) (om-make-point 174 306)) 0) (12 0 13 1 nil 0) (6 0 14 1 ((om-make-point 186 175) (om-make-point 186 189) (om-make-point 63 207) (om-make-point 63 433/2)) 0) (1 0 17 0 nil 0) (9 0 18 0 nil 0))) 1 "population-equation-4-voices" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 64 164) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 105 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 92 52) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 121 50) (om-make-point 59 30) 3.9999 "3.9999" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 176 77) (om-make-point 45 30) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 230 176) (om-make-point 55 30) 10000 "10000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 101 392) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (5025) (5050) (5074) (5098) (5122) (5146) (5169) (5192) (5215) (5238) (5261) (5283) (5305 5305) (5327) (5349) (5370) (5392) (5413 5413) (5434) (5455) (5475) (5495) (5516) (5536 5536) (5556 5556) (5575 5575) (5595) (5614) (5633) (5652 5652) (5671) (5690) (5708) (5726 5726) (5745) (5763) (5781) (5798) (5816 5816) (5833 5833) (5851) (5868 5868) (5885 5885) (5902 5902) (5918) (5935 5935) (5951 5951) (5968 5968) (5984 5984) (6000 6000) (6016) (6032 6032) (6047 6047) (6063) (6078 6078) (6094 6094) (6109 6109) (6124 6124) (6139 6139) (6154 6154) (6169) (6183 6183) (6198 6198) (6212) (6226) (6241) (6255 6255) (6269 6269) (6283 6283) (6296 6296) (6310 6310) (6324 6324) (6337 6337) (6350 6350) (6364) (6377 6377) (6390 6390) (6403) (6416 6416) (6429 6429) (6441 6441) (6454 6454) (6466 6466) (6479 6479) (6491 6491) (6503 6503) (6516 6516) (6528 6528) (6540 6540 6540 6540) (6552 6552 6552 6552) (6564 6564 6564 6564) (6575 6575 6575 6575) (6587 6587 6587 6587) (6600 6598 6600 6598) (6613 6607 6613 6607) (6630 6613 6630 6614) (6655 6611 6654 6613) (6698 6591 6696 6593) (6772 6536 6770 6538) (6884 6435 6882 6437) (7011 6307 7011 6308) (7127 6183 7127 6184) (7224 6076 7224 6076) (7306 5984 7306 5984) (7377 5902) (7440 5828) (7498 5759) (7551 5696) (7600 5636) (7646 5580) (7689 5527) (7729 5476) (7768 5427) (7805 5380) (7840 5335) (7873 5291) (7905 5249) (7936 5208) (7966 5169) (7995 5130) (8022 5093) (8049 5057) (8075 5021) (8100 4986) (8124 4953) (8148 4920) (8171 4887) (8193 4856) (8215 4825) (8236 4794) (8257 4765 8257 4765) (8277 4735) (8296 4707) (8315 4679) (8334 4651) (8352 4624 8352 4624) (8370 4597 8370 4597) (8388 4571 8388 4571) (8405 4545) (8422 4520 8422 4520) (8438 4495 8438 4495) (8454 4470 8454 4470) (8470 4444 8469 4447) (8492 4404 8478 4439) (8547 4285 8449 4522) (8613 4132 8389 4675) (8659 4029 8348 4786) (8694 3951 8317 4872) (8724 3885 8291 4944) (8750 3828 8269 5009) (8773 3777 8250 5067) (8795 3731 8233 5121) (8815 3688 8217 5171) (8832 3652 8207 5210) (8817 3703 8278 5060) (8808 3738 8333 4945) (8785 3809 8419 4752) (8852 3638 8286 5085) (8968 3323 7965 5818) (8917 3475 8163 5398) (7833 6128 8565 4436) (8829 3744 8479 4670) (8324 5063 9074 3051) (9100 2983 7618 6604) (8355 5016 9125 2915) (9065 3101 7830 6218) (8558 4529 9094 3025) (8916 3557 8434 4861) (8620 4390 9088 3060) (8269 5296 9218 2668) (2792 7467 7018 7764) (4056 8968 3442 8397) (7631 6742 8193 5523) (9349 2275 6572 8425) (7971 6064 8950 3524) (5412 9336 2330 6720) (3247 8266 5403 9364) (7122 7747 6597 8486) (6253 8880 3769 8901) (9380 2211 6545 8593) (5722 9326 2393 6936) (5597 9414 2108 6356) (5047 9574 1562) (1494 4881 9595 1494) (1495 4895 9621 1405) (1562 5086 9647 1314) (4363 9518 1775 5651) (6594 8714 4349 9536) (4014 9347 2376 7046) (9621 1422 4757 9727) (8388 5287 9743 980) (5315 9761 914 3257) (1559 5172 9813 720) (7179 7979 6354 9127) (5425 9804 761 2776) (9664 1285 4435 9774) (6332 9221 2852 8094) (3672 9248 2766 7964) (4611 9915 338 1303))) :lonset (quote (0 150 300 450 600 750 900 1050 1200 1350 1500 1650 1800 1950 2100 2250 2400 2550 2700 2850 3000 3150 3300 3450 3600 3750 3900 4050 4200 4350 4500 4650 4800 4950 5100 5250 5400 5550 5700 5850 6000 6150 6300 6450 6600 6750 6900 7050 7200 7350 7500 7650 7800 7950 8100 8250 8400 8550 8700 8850 9000 9150 9300 9450 9600 9750 9900 10050 10200 10350 10500 10650 10800 10950 11100 11250 11400 11550 11700 11850 12000 12150 12300 12450 12600 12750 12900 13050 13200 13350 13500 13650 13800 13950 14100 14250 14400 14550 14700 14850 15000 15150 15300 15450 15600 15750 15900 16050 16200 16350 16500 16650 16800 16950 17100 17250 17400 17550 17700 17850 18000 18150 18300 18450 18600 18750 18900 19050 19200 19350 19500 19650 19800 19950 20100 20250 20400 20550 20700 20850 21000 21150 21300 21450 21600 21750 21900 22050 22200 22350 22500 22650 22800 22950 23100 23250 23400 23550 23700 23850 24000 24150 24300 24450 24600 24750 24900 25050 25200 25350 25500 25650 25800 25950 26100 26250 26400 26550 26700 26850 27000 27150 27300 27450 27600 27750 27900 28050 28200 28350 28500 28650 28800 28950 29100 29250 29400 29550 29700 29850 29950)) :ldur (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100) (100 100) (100 100) (100 100) (100) (100) (100) (100 100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100) (100 100) (100 100) (100 100) (100) (100) (100) (100 100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 16 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 737 415) (om-make-point 221 163) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 152 296) (om-make-point 62 30) (list 0 150) "(0 150)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 189 330) (om-make-point 51 30) (list 100) "(100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 181 158) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER 2" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 392 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 408 60) (om-make-point 59 30) 3.9999 "3.9999" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 463 82) (om-make-point 45 30) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 393 387) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((1935) (2000) (2063) (2126) (2188) (2248) (2308) (2366) (2424) (2481) (2537) (2593) (2647) (2701) (2754) (2806) (2857) (2908) (2958) (3007) (3056) (3103) (3151 3151) (3197) (3243) (3289) (3333) (3377) (3421) (3464) (3506) (3548) (3590) (3631) (3671 3671) (3711) (3750) (3789 3789) (3827) (3865 3865) (3902) (3939) (3976) (4012 4012) (4048) (4083 4083) (4118) (4152) (4186 4186) (4220 4220) (4253 4253) (4286 4286) (4318) (4350) (4382) (4413) (4444) (4475 4475) (4505) (4536) (4565) (4595 4595 4595) (4624) (4652) (4681) (4709) (4737 4737) (4764) (4792) (4819 4819) (4845 4845) (4872 4872) (4898 4898) (4924) (4949 4949) (4975 4975) (5000) (5025) (5050) (5074) (5098) (5122) (5146) (5169) (5192) (5215) (5238) (5261 5261) (5283) (5305) (5327) (5349) (5370 5370) (5392) (5413) (5434) (5455) (5475) (5495 5495) (5516) (5536 5536) (5556) (5575) (5595) (5614 5614) (5633 5633) (5652) (5671 5671) (5690) (5708) (5726 5726) (5745) (5763) (5781 5781) (5798 5798) (5816) (5833) (5851 5851) (5868) (5885 5885) (5902 5902) (5918) (5935 5935) (5951 5951) (5968 5968) (5984 5984) (6000 6000) (6016 6016) (6032) (6047) (6063 6063) (6078) (6094 6094) (6109) (6124 6124) (6139 6139) (6154) (6169 6169) (6183 6183) (6198 6198) (6212 6212) (6226 6226) (6241 6241) (6255 6255) (6269) (6283) (6296 6296) (6310 6310) (6324 6324) (6337 6337) (6350 6350) (6364 6364) (6377) (6390 6390) (6403 6403) (6416 6416) (6429 6429) (6441 6441) (6454 6454) (6466 6466) (6479 6479) (6491 6491) (6503 6503) (6516 6516) (6528 6528) (6540 6540 6540 6540 6540 6540 6540 6540) (6552 6552 6552 6552 6552 6552 6552 6552) (6564 6564 6564 6564 6564 6564 6564 6564) (6575 6575 6575 6575 6575 6575 6575 6575) (6587 6587 6587 6587 6587 6587 6587 6587) (6600 6598 6600 6598 6600 6598 6599 6598) (6613 6607 6613 6607 6613 6608 6613 6608) (6630 6613 6630 6614 6629 6615 6628 6615) (6655 6611 6654 6613 6653 6614 6651 6615) (6698 6591 6696 6593 6694 6595 6692 6597) (6772 6536 6770 6538 6767 6541 6765 6544) (6884 6435 6882 6437 6880 6439 6878 6442) (7011 6307 7011 6308 7010 6309 7009 6310) (7127 6183 7127 6184 7127 6184 7127 6184) (7224 6076 7224 6076 7224 6076 7224 6076) (7306 5984 7306 5984 7306 5984 7306 5984) (7377 5902 7377 5902) (7440 5828) (7498 5759) (7551 5696) (7600 5636) (7646 5580) (7689 5527) (7729 5476) (7768 5427) (7805 5380 7805 5380) (7840 5335 7840 5335) (7873 5291 7873 5291) (7905 5249) (7936 5208) (7966 5169) (7995 5130) (8022 5093) (8049 5057) (8075 5021) (8100 4986) (8124 4953) (8148 4920 8148 4920) (8171 4887 8171 4887) (8193 4856 8193 4856) (8215 4825 8215 4825) (8236 4794) (8257 4765) (8277 4735) (8296 4707) (8315 4679 8315 4679) (8334 4651 8334 4651) (8352 4624 8352 4624) (8370 4597 8370 4597) (8388 4571) (8405 4545 8405 4545) (8422 4520 8422 4520) (8438 4495 8438 4495) (8454 4470 8454 4470 8454 4470 8454 4470) (8470 4444 8469 4447 8470 4445 8469 4447) (8492 4404 8478 4439 8492 4406 8479 4437) (8547 4285 8449 4522 8546 4287 8450 4520) (8613 4132 8389 4675 8613 4132 8389 4675) (8659 4029 8348 4786) (8694 3951 8317 4872) (8724 3885 8291 4944) (8750 3828 8269 5009) (8773 3777 8250 5067 8773 3777 8250 5067) (8795 3731 8233 5121) (8815 3688 8217 5171 8815 3688 8217 5171) (8832 3652 8207 5210 8834 3645 8200 5224) (8817 3703 8278 5060 8874 3548 8127 5405) (8808 3738 8333 4945 8899 3488 8086 5509) (8785 3809 8419 4752 8903 3487 8107 5478) (8829 3702 8347 4940 8949 3368 7996 5736) (8704 4050 8651 4189 8739 3956 8584 4365) (8850 3663 8356 4945 8999 3243 7889 5996) (8975 3320 8006 5764 8814 3773 8481 4650) (7760 6292 8446 4752 9028 3177 7847 6115) (8324 5063 9074 3051 7697 6435 8327 5056) (8593 4401 8969 3365 8127 5540 8994 3294) (8167 5465 9046 3149 7875 6109 8676 4192) (7500 6863 7879 6116 8694 4155 8888 3616) (9166 2804 7405 7052 7630 6636 8193 5433) (7563 6783 8030 5821 8952 3453 8319 5147) (7490 6938 7839 6251 8648 4315 9052 3167) (7239 7396 7126 7577 6793 8061 5784 9023) (2529 7011 7775 6418 8529 4654 9230 2635) (5630 9152 2886 7638 6712 8210 5467 9219) (5812 9079 3119 8006 5955 8985 3403 8373) (9349 2275 6572 8425 4962 9349 2275 6572) (4491 9278 2513 7055 7792 6453 8584 4559) (9202 2762 7516 7019 7867 6310 8755 4098) (9115 3043 7980 6076 8988 3428 8493 4825) (3743 8853 3839 8940 3581 8689 4306 9268) (7787 6532 8586 4601 9415 2088 6262 8872) (5625 9352 2304 6738 8352 5231 9480 1874) (2650 7420 7293 7521 7103 7840 6452 8721) (5484 9460 1950 5997 9170 2906 7875 6392) (9574 1562 5047) (1494 4881 9595 1494 4880 9594 1494 4881) (1495 4895 9621 1405 4649 9578 1558 5063) (1556 5072 9648 1311 4397 9509 1801 5699) (3955 9253 2676 7585 7089 7987 6222 9097) (2686 7622 7032 8098 5976 9331 2423 7123) (3564 8923 3737 9105 3170 8422 5169 9714) (7039 8128 5934 9409 2167 6620 8727 4334) (5497 9679 1216 4178 9511 1820 5821 9512) (9795 787 2844 7977 6325 9112 3172 8490) (8952 3686 9146 3069 8360 5389 9765 900) (692 2537 7460 7466 7454 7477 7433 7518) (7336 7719 6955 8366 5400 9812 729 2671) (5089 9897 404 1536 5148 9891 426 1615) (8835 4085 9593 1550 5200 9909 358 1369) (6768 8705 4486 9845 608 2274 6993 8370) (7694 7080 8249 5764 9742 1002 3596 9189))) :lonset (quote (0 150 300 450 600 750 900 1050 1200 1350 1500 1650 1800 1950 2100 2250 2400 2550 2700 2850 3000 3150 3300 3450 3600 3750 3900 4050 4200 4350 4500 4650 4800 4950 5100 5250 5400 5550 5700 5850 6000 6150 6300 6450 6600 6750 6900 7050 7200 7350 7500 7650 7800 7950 8100 8250 8400 8550 8700 8850 9000 9150 9300 9450 9600 9750 9900 10050 10200 10350 10500 10650 10800 10950 11100 11250 11400 11550 11700 11850 12000 12150 12300 12450 12600 12750 12900 13050 13200 13350 13500 13650 13800 13950 14100 14250 14400 14550 14700 14850 15000 15150 15300 15450 15600 15750 15900 16050 16200 16350 16500 16650 16800 16950 17100 17250 17400 17550 17700 17850 18000 18150 18300 18450 18600 18750 18900 19050 19200 19350 19500 19650 19800 19950 20100 20250 20400 20550 20700 20850 21000 21150 21300 21450 21600 21750 21900 22050 22200 22350 22500 22650 22800 22950 23100 23250 23400 23550 23700 23850 24000 24150 24300 24450 24600 24750 24900 25050 25200 25350 25500 25650 25800 25950 26100 26250 26400 26550 26700 26850 27000 27150 27300 27450 27600 27750 27900 28050 28200 28350 28500 28650 28800 28950 29100 29250 29400 29550 29700 29850 30000 30150 30300 30450 30600 30750 30900 31050 31200 31350 31500 31650 31800 31950 32100 32250 32400 32550 32700 32850 33000 33150 33300 33450 33600 33750 33900 34050 34200 34350 34500 34650 34800 34950 35100 35250 35400 35550 35700 35850 36000 36150 36300 36450 36600 36750 36900 37050 37200 37350 37500 37650 37800 37950 38100 38250 38400 38550 38700 38850 39000 39150 39300 39450 39600 39750 39900 40050 40200 40350 40500 40650 40800 40950 41100 41250 41350)) :ldur (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100 100) (100) (100 100) (100) (100) (100) (100 100) (100) (100 100) (100) (100) (100 100) (100 100) (100 100) (100 100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100 100 100) (100) (100) (100) (100) (100 100) (100) (100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100) (100 100) (100) (100 100) (100) (100) (100) (100 100) (100 100) (100) (100 100) (100) (100) (100 100) (100) (100) (100 100) (100 100) (100) (100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100) (100 100) (100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100 100) (100) (100 100) (100) (100) (100) (100 100) (100) (100 100) (100) (100) (100 100) (100 100) (100 100) (100 100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100 100 100) (100) (100) (100) (100) (100 100) (100) (100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100) (100 100) (100) (100 100) (100) (100) (100) (100 100) (100 100) (100) (100 100) (100) (100) (100 100) (100) (100) (100 100) (100 100) (100) (100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100) (100 100) (100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 16 36 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 143/100 nil 1000 0 (om-make-point 583 562) (om-make-point 188 59) 0 1 (quote :normal) (quote t) nil)) nil nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 439 306) (om-make-point 62 30) (list 0 150) "(0 150)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 480 340) (om-make-point 51 30) (list 100) "(100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 350 167) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 517 186) (om-make-point 55 30) 10000 "10000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 468 168) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "population-equation-8-voices" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "x-value" nil) (om-load-inputfun (quote input-funbox) "" "list-of-r-value-less-than-4" nil) (om-load-inputfun (quote input-funbox) "" "initializing-value" nil) (om-load-inputfun (quote input-funbox) "" "multiplication for pitches" nil))) (om-make-point 337 224) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "FUNCALL 7" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 464 457) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALL 6" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 314 388) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALL 5" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 375 421) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALL 4" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 420 448) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 134 173) (quote "how many times the initial recursion will take place (100 at least, but more recommended though it'll slow down things considerably)$") "" (om-make-point 286 112) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 364 628) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "multiplication for pitches" 3 (om-make-point 487 41) "" "multiplication for pitches" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "initializing-value" 2 (om-make-point 324 43) "" "initializing-value" nil (om-make-point 98 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "initializer" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 70 122) nil nil nil (list (let ((box (om-load-boxin "input 3" 2 (om-make-point 274 41) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 224 41) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 237 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 1000) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 231 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "accum" (quote accumulator) (quote ((om-load-inputfun (quote input-funbox) "items to collect" "DATA" nil) (om-load-inputfun (quote input-funbox) "initial value" "INIT" nil) (om-load-inputfun (quote input-funbox) "accumulation function" "FUN" nil))) (om-make-point 289 267) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 177 46) "" nil nil (om-make-point 36 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 184 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 355 379/2) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 315 420) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 160 389) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0) (2 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 4 2 nil 0) (4 1 7 0 nil 0) (4 0 8 0 nil 0))) 1 "initializer" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 304 571) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 164 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 260 636) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 97 501) (om-make-point 419 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 206 560) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALL 3" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 265 356) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALL 2" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 212 326) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "logistic-equation" (om-load-patch-abs1 "logistic-equation" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "R-value" 1 (om-make-point 184 50) "" "R-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "X-value" 0 (om-make-point 50 50) "" "X-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 98 433/2) nil (list 0.5) nil "logistic-equation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALL" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 159 296) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "logistic-equation" (om-load-patch-abs1 "logistic-equation" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "R-value" 1 (om-make-point 184 50) "" "R-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "X-value" 0 (om-make-point 50 50) "" "X-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 4 433/2) nil (list nil) "l" "logistic-equation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list-of-r-value-less-than-4" 1 (om-make-point 132 39) "" "list-of-r-value-less-than-4" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x-value" 0 (om-make-point 59 40) "" "x-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 353 662) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 166 664) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((18 0 0 0 ((om-make-point 52 563/2) (om-make-point 51 749/2) (om-make-point 78 933/2) (om-make-point 479 457)) 0) (3 0 0 1 nil 0) (18 0 1 0 ((om-make-point 52 563/2) (om-make-point 51 669/2) (om-make-point 79 801/2) (om-make-point 329 388)) 0) (14 0 1 1 nil 0) (18 0 2 0 ((om-make-point 52 563/2) (om-make-point 51 703/2) (om-make-point 78 843/2) (om-make-point 390 421)) 0) (1 0 2 1 nil 0) (18 0 3 0 ((om-make-point 52 563/2) (om-make-point 51 729/2) (om-make-point 77 891/2) (om-make-point 435 448)) 0) (2 0 3 1 nil 0) (11 0 5 0 nil 0) (6 0 5 1 ((om-make-point 557 98) (om-make-point 601 365) (om-make-point 570 565) (om-make-point 378 628)) 0) (20 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 8 2 nil 0) (19 0 10 0 nil 0) (13 1 11 0 nil 0) (9 0 11 2 nil 0) (16 0 12 0 nil 0) (17 0 12 1 nil 0) (15 0 12 2 nil 0) (14 0 12 3 nil 0) (1 0 12 4 nil 0) (2 0 12 5 nil 0) (3 0 12 6 nil 0) (0 0 12 7 nil 0) (12 0 13 0 nil 0) (18 0 14 0 ((om-make-point 52 563/2) (om-make-point 51 711/2) (om-make-point 80 741/2) (om-make-point 280 356)) 0) (15 0 14 1 nil 0) (18 0 15 0 ((om-make-point 52 563/2) (om-make-point 51 661/2) (om-make-point 81 677/2) (om-make-point 227 326)) 0) (17 0 15 1 nil 0) (8 0 16 0 nil 0) (10 0 16 1 nil 0) (18 0 17 0 ((om-make-point 52 563/2) (om-make-point 51 591/2) (om-make-point 83 613/2) (om-make-point 174 296)) 0) (16 0 17 1 nil 0) (10 0 18 1 ((om-make-point 186 175) (om-make-point 186 189) (om-make-point 63 207) (om-make-point 70 433/2)) 0) (5 0 21 0 nil 0) (13 0 22 0 nil 0))) 1 "population-equation-8-voices" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (3 0 1 1 nil 0) (11 0 1 2 nil 0) (7 0 1 3 nil 0) (4 0 3 0 nil 0) (5 0 3 1 nil 0) (6 0 3 2 nil 0) (1 0 8 1 nil 0) (9 0 8 2 nil 0) (10 0 8 3 nil 0) (0 0 12 0 nil 0) (13 0 12 1 nil 0) (14 0 12 2 nil 0) (21 0 15 1 nil 0) (16 0 15 2 nil 0) (17 0 15 3 nil 0) (18 0 21 0 nil 0) (12 0 21 1 nil 0) (20 0 21 2 nil 0) (19 0 21 3 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 642 517)) (quote nil) (om-make-point 2034/11 2435/11) nil nil nil "using-funcall"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "test-3" (om-load-patch-abs1 "test-3" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "1000-times 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 24 185) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 232 81) (om-make-point 48 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 237 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 1000) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 231 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "accum" (quote accumulator) (quote ((om-load-inputfun (quote input-funbox) "items to collect" "DATA" nil) (om-load-inputfun (quote input-funbox) "initial value" "INIT" nil) (om-load-inputfun (quote input-funbox) "accumulation function" "FUN" nil))) (om-make-point 289 267) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 302 46) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 194 45) "" nil nil (om-make-point 36 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 184 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 355 379/2) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 315 420) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 160 389) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 1 0 nil 0) (0 0 2 0 nil 0) (4 0 2 1 nil 0) (1 0 3 0 nil 0) (5 0 3 1 nil 0) (6 0 3 2 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0))) 1 "1000-times" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "1000-times" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 117 271) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 232 81) (om-make-point 48 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 237 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 1000) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 231 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "accum" (quote accumulator) (quote ((om-load-inputfun (quote input-funbox) "items to collect" "DATA" nil) (om-load-inputfun (quote input-funbox) "initial value" "INIT" nil) (om-load-inputfun (quote input-funbox) "accumulation function" "FUN" nil))) (om-make-point 289 267) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 302 46) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 194 45) "" nil nil (om-make-point 36 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 184 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 355 379/2) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 315 420) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 160 389) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 1 0 nil 0) (0 0 2 0 nil 0) (4 0 2 1 nil 0) (1 0 3 0 nil 0) (5 0 3 1 nil 0) (6 0 3 2 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0))) 1 "1000-times" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 84 51) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 170 50) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 128 54) (om-make-point 38 30) 0.2 "0.2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch 6" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 184 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 135 80) nil (list 0.32000002) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALL 6" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 108 295/2) (om-make-point 45 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch 5" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 184 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 50 81) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 5 0 nil 0) (3 0 5 1 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (2 0 7 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 295 272)) (quote nil) (om-make-point 81/2 1511/4) nil nil nil "test-3"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "test-2" (om-load-patch-abs1 "test-2" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 207 50) (om-make-point 52 30) 2.161 "2.161" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALL 5" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 50 815/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALL 4" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 90 705/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALL 3" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 121 603/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch 4" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 184 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 203 150) nil (list 0.54025) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALL 2" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 139 465/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch 3" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 184 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 98 147) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 134 70) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 1 0 nil 0) (2 0 1 1 nil 0) (6 0 2 0 nil 0) (3 0 2 1 nil 0) (6 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 4 0 nil 0) (0 0 4 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (0 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 332 1065/2)) (quote nil) (om-make-point 141/4 1771/8) nil nil nil "test-2"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "test" (om-load-patch-abs1 "test" (quote ((let ((box (om-load-boxcall (quote lispfun) "FUNCALL" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 92 264) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch 2" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 184 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 50 391/2) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 217 257) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 184 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 112 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 183 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 144 162) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 133 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 153 413/2) nil (list 0.5) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 271 124) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 194 120) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 99 50) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 152 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 0 1 nil 0) (3 0 1 1 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (5 0 6 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 396 389)) (quote nil) (om-make-point 283/7 585/7) nil nil nil "test"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 7.02))