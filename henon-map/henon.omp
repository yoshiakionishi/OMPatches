; OM File Header - Saved 2023/12/29 00:09:34
; (7.02 :patc (om-make-point 10 160) (om-make-point 615 42) (om-make-point 475 711) "" 183 0 nil "2023/12/29 00:09:34")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "henon" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 189 28) (quote "initial value of a and b") nil (om-make-point 217 32) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 230 87) (om-make-point 70 30) (list 1.4 0.3) "(1.4 0.3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 139 30) (quote "how many iterations?") "" (om-make-point 319 61) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 139 30) (quote "initial value of (x, y)") "" (om-make-point 80 55) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDDR" (quote cddr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 276 231) (om-make-point 65 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 349 385) (om-make-point 34 30) 80 "80" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 295 392) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 279 432) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 211 401) (om-make-point 48 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 166 398) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 149 428) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "x-y-divider" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 209 305) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 220 229) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 224 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 153 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 176 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 128 224) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 49 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 214 312) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 112 317) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (2 0 4 0 nil 0) (4 1 6 0 nil 0) (0 1 6 1 nil 0) (4 0 7 0 nil 0) (0 0 7 1 nil 0))) 2 "x-y-divider" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 359 92) (om-make-point 48 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "henon" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "initial coordinates" nil) (om-load-inputfun (quote input-funbox) "" "values for a and b" nil) (om-load-inputfun (quote input-funbox) "" "how many iterations?" nil))) (om-make-point 231 160) nil nil nil (list (let ((box (om-load-boxin "how many iterations?" 2 (om-make-point 365 42) "" "how many iterations?" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "values for a and b" 1 (om-make-point 240 27) "" "values for a and b" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "initial coordinates" 0 (om-make-point 67 35) "" "initial coordinates" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 262 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "henon" (om-load-patch-abs1 "henon" (quote ((let ((box (om-load-boxcall (quote lispfun) "SECOND 3" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 396 94) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 3" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 338 96) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "values a and b" 2 (om-make-point 348 2) "" "values a and b" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "yn+1 2" (om-load-patch-abs1 "yn+1" (quote ((let ((box (om-load-boxin "value b" 1 (om-make-point 220 24) "" "value b" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 61 133) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 103 13) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 77 81) (om-make-point 25 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 50 50) (om-make-point 28 30) 0.3 "0.3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 3609/14 2825/14) nil nil nil "yn+1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "xn+1 2" (om-load-patch-abs1 "xn+1" (quote ((let ((box (om-load-boxin "input" 2 (om-make-point 338 15) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 111 262) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "xn" 1 (om-make-point 201 5) "" "xn" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "yn" 0 (om-make-point 97 8) "" "yn" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 135 204) (om-make-point 45 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 98 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 50 65) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 178 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 147 55) (om-make-point 28 30) 1.4 "1.4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 271 47) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 229 80) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (5 0 4 0 nil 0) (7 0 4 1 nil 0) (6 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (10 0 7 1 nil 0) (2 0 10 0 nil 0) (9 0 10 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "yn" nil) (om-load-inputfun (quote input-funbox) "" "xn" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 190 209) nil nil nil "xn+1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 166 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND 2" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 227 106) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x,y subsequent" 1 (om-make-point 204 2) "" "x,y subsequent" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 123 285) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 113 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 57 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 72 346) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x,y" 0 (om-make-point 79 0) "" "x,y" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "xn+1" (om-load-patch-abs1 "xn+1" (quote ((let ((box (om-load-boxin "value a" 2 (om-make-point 329 16) "" "value a" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 111 262) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "xn" 1 (om-make-point 201 5) "" "xn" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "yn" 0 (om-make-point 97 8) "" "yn" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 135 204) (om-make-point 45 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 96 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 50 65) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 178 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 271 47) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 229 80) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (5 0 4 0 nil 0) (7 0 4 1 nil 0) (6 0 5 0 nil 0) (3 0 5 1 nil 0) (0 0 7 0 nil 0) (9 0 7 1 nil 0) (2 0 9 0 nil 0) (8 0 9 1 nil 0))) 7.02 nil "" (om-make-point 693 216) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "yn" nil) (om-load-inputfun (quote input-funbox) "" "xn" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 50 199) nil nil nil "xn+1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "yn+1" (om-load-patch-abs1 "yn+1" (quote ((let ((box (om-load-boxin "value b" 1 (om-make-point 232 17) "" "value b" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 61 133) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 103 13) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 77 81) (om-make-point 25 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 1677/14 2797/14) nil nil nil "yn+1"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (2 0 1 0 nil 0) (5 0 3 0 nil 0) (0 0 3 1 nil 0) (6 0 4 0 nil 0) (5 0 4 1 nil 0) (1 0 4 2 nil 0) (7 0 5 0 nil 0) (7 0 6 0 nil 0) (13 0 8 0 nil 0) (14 0 8 1 nil 0) (4 0 8 2 nil 0) (3 0 8 3 nil 0) (12 0 9 0 nil 0) (12 0 10 0 nil 0) (8 0 11 0 nil 0) (9 0 13 0 nil 0) (10 0 13 1 nil 0) (1 0 13 2 nil 0) (10 0 14 0 nil 0) (0 0 14 1 nil 0))) 7.02 nil "" (om-make-point 1026 667) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "x,y" nil) (om-load-inputfun (quote input-funbox) "" "x,y subsequent" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 181 89) nil (list (list 0.79599995 0.18)) "l" "henon"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 94 226) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "accum" (quote accumulator) (quote ((om-load-inputfun (quote input-funbox) "items to collect" "DATA" nil) (om-load-inputfun (quote input-funbox) "initial value" "INIT" nil) (om-load-inputfun (quote input-funbox) "accumulation function" "FUN" nil))) (om-make-point 107 143) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 127 310) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 48 306) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((0 0 3 1 nil 0) (1 0 4 2 nil 0) (6 0 5 0 nil 0) (2 0 6 1 nil 0) (4 0 6 2 nil 0) (5 1 7 0 nil 0) (5 0 8 0 nil 0))) 1 "henon" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 175 87) (om-make-point 48 30) (list 1 1) "(1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 169 535) (om-make-point 120 136) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (617 940 243 783 534 974 106 471 771 626 919 309 884 314 880 327 896 287 844 412 966 97 443 759 640 902 362 943 158 599 757 691 843 535 992 47 295 601 796 615 937 252 799 504 982 70 365 696 719 784 674 873 454 996 7 161 327 680 729 764 717 808 624 932 269 827 447 980 62 340 667 749 726 788 668 881 431 988 27 227 478 808 551 977 103 463 768 630 915 323 901 272 822 459 982 56 323 643 769 682 859 493 1000 5 154 309 654 753 714 808 622 934 263 816 469 983 55 320 640 771 676 866 472 999 2 142 276 601 791 625 926 289 856 383 948 149 577 767 665 879 436 990 22 212 447 795 571 965 150 585 763 675 865 474 999 2 142 276 601 791 626 925 290 858 377 943 161 606 752 701 827 576 972 128 531 778 630 918 313 889 301 864 365 934 185 662 708 791 658 894 392 967 89 418 744 660 877 440 991 19 202 424 781 592 948 209 717 640 890 398 970 80 392 722 688 837 549 986 70 369 699 715 791 660 892 399 972 75 378 710 703 812 610 945 226 751 590 940 233 765 567 957 172 638 729 751 740 766 717 808 623 934 265 819 463 983 56 322 642 769 681 860 489 1000 3 149 294 631 772 672 872 456 996 6 158 319 669 739 743 758 731 783 680 865 477 1000 1 140 271 592 795 614 937 250 796 511 981 76 384 715 696 823 584 966 149 584 764 674 867 468 999 2 144 283 613 784 642 908 346 927 201 693 673 847 520 996 28 233 489 812 547 979 94 438 756 645 897 379 957 117 497 778 621 926 287 854 386 950 141 558 774 647 901 369 949 140 555 775 644 904 360 941 163 611 750 707 818 600 954 193 685 682 833 557 982 87 418 743 662 875 444 993 15 189 393 756 631 911 335 914 236 761 574 953 190 677 691 819 591 961 168 629 736 737 767 713 814 609 947 219 737 611 921 298 869 352 922 219 730 623 910 337 917 230 751 591 940 236 769 559 962 155 599 756 692 841 540 990 54 317 635 775 667 879 437 991 21 208 437 789 579 958 173 639 728 753 736 773 702 833 563 980 97 446 760 639 904 359 939 168 622 742 724 790 665 886 417 982 45 287 590 802 600 950 207 714 645 885 413 979 53 311 626 781 652 897 381 959 112 483 775 622 924 294 864 364 932 191 673 696 810 613 942 234 766 564 959 167 625 739 731 778 690 850 517 997 23 215 453 799 565 968 136 551 775 642 905 354 935 179 647 722 764 714 812 615 941 239 776 547 968 130 536 778 632 916 321 899 276 827 448 980 61 337 662 752 718 802 636 919 311 887 306 871 350 920 224 740 609 924 289 855 383 948 147 573 769 660 885 418 982 45 285 586 803 595 953 193 685 681 834 555 983 82 403 732 676 855 501 999 10 173 355 716 686 837 548 986 69 365 696 719 784 675 872 458 997 5 155 311 657 751 720 799 643 912 336 916 230 751 590 941 232 763 570 955 181 657 712 783 674 873 454 996 7 161 327 680 728 765 715 810 619 937 251 797 508 982 73 376 707 706 807 623 933 266 821 459 982 57 325 647 766 689 848 521 996 28 232 489 812 548 979 94 439 756 644 898 376 955 124 514 779 623 925 292 860 372 940 171 629 737 735 771 706 826 581 968 141 564 772 653 894 391 966 91 425 748 654 885 415 981 49 299 609 792 626 926 289 856 382 947 150 581 766 669 873 451 995 9 169 345 704 701 814 606 948 213 726 628 904 353 934 184 658 712 784 673 874 452 995 9 166 338 696 711 796 648 906 355 936 177 643 725 758 727 791 664 887 412 979 53 311 627 781 654 895 386 963 101 453 764 634 910 338 918 226 743 604 929 274 834 431 975 74 377 709 704 810 616 940 243 782 535 974 109 479 773 624 922 300 872 344 914 240 769 561 961 158 606 752 701 827 576 972 127 528 778 629 919 310 885 312 878 331 901 274 826 451 981 59 332 656 758 705 823 586 965 153 594 759 686 850 517 997 23 215 454 799 565 968 136 551 775 642 906 353 934 182 654 716 776 689 851 516 997 21 211 444 794 573 963 154 597 757 689 845 529 994 37 264 549 814 560 975 112 487 775 623 924 295 864 363 931 193 678 691 819 591 961 168 630 735 738 765 717 808 624 933 267 823 455 981 59 330 653 761 700 832 565 978 103 462 767 630 914 325 903 266 813 479 984 55 321 640 771 677 866 474 999 1 141 275 599 792 622 929 277 839 420 970 86 412 739 666 869 463 997 5 152 303 646 761 698 834 559 981 90 426)) (quote (65 50 75 20 63 43 78 9 38 62 50 74 25 71 26 71 27 72 24 68 33 77 9 36 61 52 72 30 75 13 48 61 56 68 43 79 5 24 48 64 50 75 21 64 41 79 6 30 56 58 63 54 70 37 80 1 14 27 55 59 61 58 65 50 75 22 66 36 78 6 28 54 60 58 63 54 71 35 79 3 19 39 65 45 78 9 38 62 51 73 26 72 22 66 37 79 5 26 52 62 55 69 40 80 1 13 25 53 60 57 65 50 75 22 65 38 79 5 26 52 62 54 69 38 80 1 12 23 48 63 50 74 24 69 31 76 13 47 62 54 70 35 79 3 18 36 64 46 77 13 47 61 54 69 38 80 1 12 23 48 63 50 74 24 69 31 76 14 49 60 56 66 46 78 11 43 62 51 74 26 71 25 69 30 75 16 53 57 63 53 72 32 77 8 34 60 53 70 36 79 2 17 34 63 48 76 17 58 52 71 32 78 7 32 58 55 67 44 79 6 30 56 57 63 53 71 32 78 7 31 57 56 65 49 76 19 60 48 75 19 61 46 77 15 51 59 60 59 61 58 65 50 75 22 66 38 79 5 26 52 62 55 69 40 80 1 13 24 51 62 54 70 37 80 1 13 26 54 59 60 61 59 63 55 69 39 80 1 12 22 48 64 49 75 21 64 41 79 7 31 57 56 66 47 77 13 47 61 54 70 38 80 1 12 23 49 63 52 73 28 74 17 56 54 68 42 80 3 19 40 65 44 78 8 36 61 52 72 31 77 10 40 62 50 74 24 68 31 76 12 45 62 52 72 30 76 12 45 62 52 72 29 75 14 49 60 57 66 48 76 16 55 55 67 45 79 8 34 60 53 70 36 79 2 16 32 61 51 73 27 73 20 61 46 76 16 54 56 66 48 77 14 51 59 59 62 57 65 49 76 18 59 49 74 24 70 29 74 18 59 50 73 28 73 19 60 48 75 20 62 45 77 13 48 61 56 67 44 79 5 26 51 62 54 70 35 79 3 17 35 63 47 77 15 51 58 60 59 62 56 67 45 78 9 36 61 51 72 29 75 14 50 60 58 63 53 71 34 79 5 24 48 64 48 76 17 57 52 71 34 78 5 25 50 63 52 72 31 77 10 39 62 50 74 24 69 30 75 16 54 56 65 49 75 19 62 46 77 14 50 59 59 62 56 68 42 80 3 18 37 64 46 77 12 45 62 52 73 29 75 15 52 58 61 57 65 50 75 20 62 44 77 11 43 62 51 73 26 72 23 66 36 78 6 28 53 60 58 64 51 74 26 71 25 70 29 74 19 59 49 74 24 69 31 76 13 46 62 53 71 34 79 4 23 47 64 48 76 16 55 55 67 45 79 7 33 59 54 69 41 80 2 15 29 58 55 67 44 79 6 30 56 58 63 54 70 37 80 1 13 26 53 60 58 64 52 73 27 73 19 60 48 75 19 61 46 76 15 53 57 63 54 70 37 80 1 14 27 55 59 61 57 65 50 75 21 64 41 79 7 31 57 57 65 50 75 22 66 37 79 5 27 52 61 55 68 42 80 3 19 40 65 44 78 8 36 61 52 72 31 76 11 42 63 50 74 24 69 30 75 14 51 59 59 62 57 66 47 77 12 45 62 53 72 32 77 8 35 60 53 71 34 78 5 25 49 64 50 74 24 69 31 76 13 47 61 54 70 37 80 2 14 28 57 56 65 49 76 18 58 51 72 29 75 15 53 57 63 54 70 37 80 2 14 28 56 57 64 52 73 29 75 15 52 58 61 58 63 53 71 33 78 5 26 50 63 53 72 31 77 9 37 61 51 73 28 74 19 60 49 74 23 67 35 78 7 31 57 57 65 50 75 20 63 43 78 10 39 62 50 74 25 70 28 73 20 62 45 77 13 49 60 56 66 46 78 11 43 62 51 74 25 71 26 70 27 72 23 66 37 78 6 27 53 61 57 66 47 77 13 48 61 55 68 42 80 3 18 37 64 46 77 12 44 62 52 73 29 75 15 53 58 62 55 68 42 80 3 18 36 64 46 77 13 48 61 55 68 43 80 4 22 44 65 45 78 10 39 62 50 74 24 69 30 75 16 55 56 66 48 77 14 51 59 59 61 58 65 50 75 22 66 37 79 6 27 53 61 56 67 46 78 9 37 62 51 73 27 72 22 65 39 79 5 26 52 62 54 69 38 80 1 12 23 48 64 50 74 23 67 34 78 8 34 59 54 70 38 80 1 13 25 52 61 56 67 45 79 8)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPC") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1160 699) (om-make-point 905 769) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 4 0 nil 0) (11 1 7 0 nil 0) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (11 0 10 0 nil 0) (9 0 10 1 nil 0) (8 0 10 2 nil 0) (4 0 11 0 nil 0) (14 0 13 0 nil 0) (1 0 13 1 nil 0) (12 0 13 2 nil 0) (10 0 15 1 nil 0) (7 0 15 2 nil 0))) nil 7.02))