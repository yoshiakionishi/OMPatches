; OM File Header - Saved 2023/09/12 06:04:50
; (7.02 :patc (om-make-point 10 160) (om-make-point 294 23) (om-make-point 700 730) "" 183 0 nil "2023/09/12 06:04:50")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "henon-sonification" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 370 772) (om-make-point 44 30) (list 50) "(50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 318 802) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8671) (8671) (7253) (9646) (8671) (7253) (9646) (8671) (4418) (7253) (9646) (8494) (8671) (4418) (7253) (9646) (8494) (8671) (4418) (7253) (6633) (9911) (9646) (8494) (8671) (4418) (7253) (6633) (9911) (9646) (3443) (8494) (8671) (4418) (7253) (6633) (9911) (9646) (3443) (8494) (8671) (6101) (4418) (7253) (6633) (9911) (9646) (3443) (8494) (8671) (8405) (6101) (4418) (7253) (6633) (9911) (9646) (3443) (8494) (8671) (8405) (6101) (4418) (7253) (7253) (6633) (9911) (9646) (9468) (3443) (8494) (8671) (8405) (6101) (4418) (7253) (7253) (6633) (9911) (9646) (9468) (3443) (8494) (8671) (8405) (6101) (4418) (4949) (7253) (7253) (6633) (9911) (9646) (9468) (9203) (3443) (8494) (8671) (8405) (6101) (4418) (4949) (7253) (7253) (6633) (9911) (9646) (9468) (9203) (3443) (8494) (8671) (8405) (6101) (4418) (4949) (4949) (7253) (7253) (6633) (9911) (9646) (9468) (9203) (9203) (3443) (8494) (8671) (8405) (6101) (4418) (4949) (4949) (7253) (7253) (6633) (9911) (9646) (9468) (9203) (9203) (3443) (8494) (8671) (8405) (6101) (4418) (4949) (4949) (5038) (7253) (7253) (6633) (9911) (9646) (9291) (9468) (9203) (9203) (3443) (8494) (8671) (8405) (6101) (4418) (4949) (4949) (5038) (7253) (7253) (6633) (9911) (9646) (9291) (9468) (9203) (9203) (3443) (8494) (8671) (8405) (6101) (4418) (4772) (4949) (4949) (5038) (7253) (7253) (6633) (9911) (9646) (9291) (9468) (9203) (9203) (8937) (3443) (8494) (8671) (8405) (6101) (4418) (4772) (4949) (4949) (5038) (7253) (7253) (6633) (9911) (9646) (9291) (9468) (9203) (9203) (8937) (3443) (8494) (8671) (8405) (6101) (4418) (4772) (4949) (4949) (5038) (7253) (7253) (5747) (6633) (9823) (9911) (9646) (9291) (9468) (9203) (9203) (8937) (3443) (8494) (8671) (8405) (6101) (4418) (4772) (4949) (4949) (5038) (7253) (7253) (5747) (6633) (9823) (9911) (9646) (9291) (9468) (9203) (9203) (8937) (3354) (3443) (8494) (8671) (8405) (6101) (4418) (4772) (4949) (4949) (5038) (7253) (7253) (5747) (6633) (9823) (9911) (9646) (9291) (9468) (9203) (9203) (8937) (3354) (3443) (8494) (8671) (8405) (5924) (6101) (4418) (4772) (4949) (4949) (5038) (7253) (7253) (5747) (6633) (9823) (9911) (9646) (9291) (9468) (9203) (9203) (8937) (3354) (3443) (8494) (8671) (8405) (8316) (5924) (6101) (4418) (4772) (4949) (4949) (5038) (7253) (7253) (5747) (6633) (9823) (9911) (9646) (9291) (9468) (9203) (9203) (8937) (3354) (3443) (8494) (8671) (8405) (8316) (5924) (6101) (4418) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5747) (6633) (9823) (9911) (9646) (9291) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (8671) (8405) (8316) (5924) (6101) (4418) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5747) (6633) (9823) (9911) (9646) (9291) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (8671) (8405) (8316) (5924) (6101) (4418) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5304) (5747) (6633) (9823) (9911) (9646) (9646) (9291) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (8671) (8405) (8316) (5924) (6101) (4418) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5304) (5747) (6633) (9823) (9911) (9646) (9646) (9291) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (3797) (8671) (8405) (8316) (5924) (6101) (4418) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5304) (5747) (6633) (9823) (9911) (9646) (9646) (9291) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (3797) (8671) (8405) (8316) (7076) (5924) (6101) (4418) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5304) (5747) (6633) (9823) (9911) (9646) (9646) (9291) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (3797) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5304) (5747) (6633) (9823) (9911) (9646) (9646) (9291) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (3797) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5304) (5747) (6633) (9823) (9911) (9646) (9646) (9291) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (8937) (3797) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5304) (5747) (6633) (9823) (9911) (9646) (9646) (9291) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (8937) (3797) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5304) (5747) (6633) (6633) (10000) (9823) (9911) (9646) (9646) (9291) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (8937) (3797) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5304) (5747) (6633) (6633) (10000) (9823) (9911) (9646) (9646) (9291) (3000) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (8937) (3797) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5304) (5747) (6633) (6633) (10000) (9823) (9911) (9646) (9646) (9291) (3000) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (8937) (3797) (4861) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5304) (5747) (6633) (6633) (10000) (9823) (9911) (9646) (9646) (9291) (3000) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (8937) (3797) (4861) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7076) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5304) (5747) (6633) (6633) (10000) (9823) (9911) (9646) (9646) (9291) (3000) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (8937) (3797) (4861) (8582) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7076) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7253) (5304) (5747) (6633) (6633) (10000) (9823) (9911) (9646) (9646) (9291) (3000) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (8937) (3797) (4861) (8582) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7076) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7165) (7253) (5304) (5747) (6633) (6633) (10000) (9823) (9911) (9646) (9646) (9557) (9291) (3000) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (8937) (3797) (4861) (8582) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7076) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7165) (7253) (5304) (5747) (6633) (6633) (10000) (9823) (9911) (9646) (9646) (9557) (9291) (3000) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8494) (8937) (3797) (4861) (8582) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7076) (4506) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7165) (7253) (5304) (5747) (6633) (6633) (10000) (9823) (9911) (9646) (9646) (9557) (9291) (3000) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8582) (8494) (8937) (3797) (4861) (8582) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7076) (4506) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7165) (7253) (5304) (5747) (6633) (6633) (10000) (9823) (9911) (9646) (9646) (9557) (9291) (3000) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8582) (8494) (8937) (3797) (4861) (8582) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7076) (4506) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7165) (7253) (5304) (5747) (6633) (6367) (6633) (10000) (9911) (9823) (9911) (9646) (9646) (9557) (9291) (3000) (9468) (9203) (9203) (9380) (8937) (3354) (3443) (8582) (8494) (8937) (3797) (4861) (8582) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7076) (4506) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7165) (7253) (5304) (5747) (6633) (6367) (6633) (10000) (9911) (9823) (9911) (9646) (9646) (9557) (9291) (3000) (9468) (9203) (9203) (9380) (3177) (8937) (3354) (3443) (8582) (8494) (8937) (3797) (4861) (8582) (8671) (8405) (8316) (8228) (7076) (5924) (6101) (4418) (7076) (4506) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7165) (7253) (5304) (5747) (6633) (6367) (6633) (10000) (9911) (9823) (9911) (9646) (9646) (9557) (9291) (3000) (9468) (9203) (9203) (9380) (3177) (8937) (3354) (3443) (8582) (8494) (8937) (3797) (4861) (8582) (8671) (8405) (8316) (8228) (5392) (7076) (5924) (6101) (4418) (7076) (4506) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7165) (7253) (5304) (5747) (6633) (6367) (6633) (10000) (9911) (9823) (9911) (9646) (9646) (9557) (9291) (3000) (9468) (9203) (9203) (9380) (3177) (8937) (3354) (3443) (8582) (8494) (8937) (3797) (4861) (8582) (8671) (8405) (8316) (8228) (5392) (7785) (7076) (5924) (6101) (4418) (7076) (4506) (7785) (4772) (4949) (4949) (5038) (7430) (7253) (7165) (7253) (5304) (5747) (6633) (6367) (6633))) :lonset (quote (1207 3457 4139 4916 5707 6389 7166 7957 8308 8639 9416 10030 10207 10558 10889 11666 12280 12457 12808 13139 13212 13626 13916 14530 14707 15058 15389 15462 15876 16166 16648 16780 16957 17308 17639 17712 18126 18416 18898 19030 19207 19532 19558 19889 19962 20376 20666 21148 21280 21457 21476 21782 21808 22139 22212 22626 22916 23398 23530 23707 23726 24032 24058 24346 24389 24462 24876 25166 25306 25648 25780 25957 25976 26282 26308 26596 26639 26712 27126 27416 27556 27898 28030 28207 28226 28532 28558 28772 28846 28889 28962 29376 29666 29806 29815 30148 30280 30457 30476 30782 30808 31022 31096 31139 31212 31626 31916 32056 32065 32398 32530 32707 32726 33032 33058 33263 33272 33346 33389 33462 33876 34166 34306 34315 34343 34648 34780 34957 34976 35282 35308 35513 35522 35596 35639 35712 36126 36416 36556 36565 36593 36898 37030 37207 37226 37532 37558 37763 37772 37797 37846 37889 37962 38376 38666 38757 38806 38815 38843 39148 39280 39457 39476 39782 39808 40013 40022 40047 40096 40139 40212 40626 40916 41007 41056 41065 41093 41398 41530 41707 41726 42032 42058 42186 42263 42272 42297 42346 42389 42462 42876 43166 43257 43306 43315 43343 43522 43648 43780 43957 43976 44282 44308 44436 44513 44522 44547 44596 44639 44712 45126 45416 45507 45556 45565 45593 45772 45898 46030 46207 46226 46532 46558 46686 46763 46772 46797 46846 46889 46945 46962 47357 47376 47666 47757 47806 47815 47843 48022 48148 48280 48457 48476 48782 48808 48936 49013 49022 49047 49096 49139 49195 49212 49607 49626 49916 50007 50056 50065 50093 50272 50338 50398 50530 50707 50726 51032 51058 51186 51263 51272 51297 51346 51389 51445 51462 51857 51876 52166 52257 52306 52315 52343 52522 52588 52648 52780 52957 52976 53257 53282 53308 53436 53513 53522 53547 53596 53639 53695 53712 54107 54126 54416 54507 54556 54565 54593 54772 54838 54898 55030 55207 55226 55256 55507 55532 55558 55686 55763 55772 55797 55846 55889 55945 55962 56357 56376 56666 56757 56806 56815 56843 57022 57088 57148 57280 57457 57476 57506 57757 57782 57808 57936 58013 58022 58047 58060 58096 58139 58195 58212 58607 58626 58916 59007 59056 59065 59093 59168 59272 59338 59398 59530 59707 59726 59756 60007 60032 60058 60186 60263 60272 60297 60310 60346 60389 60445 60462 60857 60876 61166 61257 61306 61315 61343 61418 61522 61588 61648 61780 61957 61976 62006 62257 62282 62308 62436 62513 62522 62547 62560 62596 62639 62645 62695 62712 63107 63126 63235 63416 63507 63556 63565 63593 63668 63772 63838 63898 64030 64207 64226 64256 64507 64532 64558 64686 64763 64772 64797 64810 64846 64889 64895 64945 64962 65357 65376 65485 65666 65757 65806 65815 65843 65918 66022 66088 66148 66280 66418 66457 66476 66506 66757 66782 66808 66936 67013 67022 67047 67060 67096 67139 67145 67195 67212 67607 67626 67735 67916 68007 68056 68065 68093 68168 68272 68338 68398 68530 68668 68707 68726 68756 69002 69007 69032 69058 69186 69263 69272 69297 69310 69346 69389 69395 69445 69462 69857 69876 69985 70166 70257 70306 70315 70343 70418 70522 70588 70648 70780 70918 70957 70976 71006 71113 71252 71257 71282 71308 71436 71513 71522 71547 71560 71596 71639 71645 71695 71712 72107 72126 72235 72416 72507 72556 72565 72593 72668 72772 72838 72898 73030 73168 73207 73226 73256 73363 73502 73507 73532 73558 73684 73686 73763 73772 73797 73810 73846 73889 73895 73945 73962 74357 74376 74485 74666 74757 74806 74815 74843 74918 75022 75088 75148 75280 75284 75418 75457 75476 75506 75613 75752 75757 75782 75808 75934 75936 76013 76022 76047 76060 76096 76139 76145 76195 76212 76607 76626 76735 76916 77007 77056 77065 77093 77168 77272 77338 77398 77530 77534 77668 77707 77726 77756 77863 78002 78007 78032 78058 78184 78186 78263 78272 78297 78310 78346 78389 78395 78445 78462 78499 78750 78857 78876 78985 79166 79257 79306 79315 79343 79418 79522 79588 79648 79780 79784 79918 79957 79976 80006 80113 80252 80257 80282 80308 80434 80436 80513 80522 80547 80560 80596 80639 80645 80695 80712 80749 81000 81107 81126 81235 81416 81507 81525 81556 81565 81593 81668 81772 81838 81898 82030 82034 82168 82207 82226 82256 82363 82502 82507 82532 82558 82684 82686 82763 82772 82797 82810 82846 82889 82895 82945 82962 82999 83250 83357 83376 83485 83666 83757 83775 83806 83815 83843 83918 84022 84088 84148 84280 84284 84418 84423 84457 84476 84506 84613 84752 84757 84782 84808 84934 84936 85013 85022 85047 85060 85096 85139 85145 85195 85212 85249 85500 85607 85626 85735 85916 86007 86025 86056 86065 86093 86168 86272 86338 86398 86530 86534 86668 86673 86707 86726 86756 86863 87002 87007 87032 87058 87085 87184 87186 87263 87272 87297 87310 87346 87389 87395 87445 87462 87499 87750 87857 87876 87985 88166 88257 88275 88306 88315 88343 88418 88522 88588 88648 88780 88784 88918 88923 88951 88957 88976 89006 89113 89252 89257 89282 89308 89335 89434 89436 89513 89522 89547 89560 89596 89639 89645 89695 89712 89749 90000 90107 90126 90235 90416 90507 90525 90556 90565 90593 90668 90772 90838 90898 91030 91034 91168 91173 91201 91207 91226 91256 91363 91502 91507 91532 91558 91585 91684 91686 91763 91772 91797 91810 91846 91883 91889 91895 91945 91962 91999 92250 92357 92376 92485 92666 92685 92757 92775 92806 92815 92843 92918 93022 93088 93148 93280 93284 93418 93423 93451 93457 93476 93506 93613 93752 93757 93782 93808 93835 93934 93936 94013 94022 94047 94060 94096 94133 94139 94145 94195 94212 94249 94500 94607 94626 94735 94916 94935 95007 95025 95056 95065 95093 95168 95272 95338 95398 95530 95534 95668 95673 95701 95707 95726 95756 95863 96002 96007 96032 96058 96085 96091 96184 96186 96263 96272 96297 96310 96346 96383 96389 96395 96445 96462 96499 96750 96857 96876 96985 97166 97185 97257 97275 97306 97315 97343 97418 97522 97588 97648 97717 97780 97784 97918 97923 97951 97957 97976 98006 98113 98252 98257 98282 98308 98335 98341 98434 98436 98513 98522 98547 98560 98596 98633 98639 98645 98695 98712 98749 99000 99107 99126 99235 99416 99435 99507 99525 99556 99565 99593 99668 99772 99838 99898 99967 100030 100034 100168 100173 100201 100207 100226 100256 100363 100502 100507 100532 100558 100585 100591 100684 100686 100763 100772 100797 100810 100846 100883 100889 100895 100945 100962 100979 100999 101250 101299 101357 101376 101485 101666 101685 101757 101775 101806 101815 101843 101918 102022 102088 102148 102217 102280 102284 102418 102423 102451 102457 102476 102506 102613 102752 102757 102782 102808 102835 102841 102934 102936 103013 103022 103047 103060 103096 103133 103139 103145 103195 103212 103229 103249 103500 103549 103607 103626 103735 103916 103935 104007 104025 104056 104065 104093 104168 104174 104272 104338 104398 104467 104530 104534 104668 104673 104701 104707 104726 104756 104863 105002 105007 105032 105058 105085 105091 105184 105186 105263 105272 105297 105310 105346 105383 105389 105395 105445 105462 105479 105499 105750 105799 105857 105876 105985 106166 106185 106257 106275 106306 106315 106343 106418 106424 106522 106588 106648 106717 106780 106784 106918 106923 106951 106957 106976 107006 107113 107123 107252 107257 107282 107308 107335 107341 107434 107436 107513 107522 107547 107560 107596 107633 107639 107645 107695 107712 107729 107749 108000 108049 108107 108126 108235 108416 108435 108507 108525 108556 108565 108593 108668 108674 108772 108838 108898 108967 109030 109034 109168 109173 109201 109207 109226 109256 109363 109373 109421 109502 109507 109532 109558 109585 109591 109684 109686 109763 109772 109797 109810 109846 109883 109889 109895 109945 109962 109979 109999 110049)) :ldur (quotelvel (quoteloffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 615 308) 4 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 72 16)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 63 58) (quote "Same as \"henon\" patch") "" (om-make-point 69 166) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 139 30) (quote "how many iterations?") "" (om-make-point 260 52) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 139 30) (quote "initial value of (x, y)") "" (om-make-point 105 51) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 617 616) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 513 639) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 551 678) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 563 615) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND 3" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 260 706) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 358 563) (om-make-point 55 30) 10000 "10000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 307 563) (om-make-point 48 30) 3000 "3000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 259 645) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 295 473) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 2) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 246 508) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "x-y-divider" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 222 567) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 220 229) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 224 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 153 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 176 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 128 224) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 49 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 214 312) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 112 317) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (2 0 4 0 nil 0) (4 1 6 0 nil 0) (0 1 6 1 nil 0) (4 0 7 0 nil 0) (0 0 7 1 nil 0))) 2 "x-y-divider" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 581 304) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 579 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER 2" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 591 333) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 452 457) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 439 294) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 504 173) (om-make-point 48 30) 2250 "2250" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 473 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 451 339) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "henon" (om-load-patch-abs1 "henon" (quote ((let ((box (om-load-boxout "output 4" 3 (om-make-point 276 484) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 145 483) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 91 488) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 40 474) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 265 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 175 52) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 211 366) (om-make-point 48 30) 1999 "1999" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 166 363) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "henon" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "initial coordinates" nil) (om-load-inputfun (quote input-funbox) "" "how many times?" nil))) (om-make-point 231 125) nil nil nil (list (let ((box (om-load-boxin "how many times?" 1 (om-make-point 388 43) "" "how many times?" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "initial coordinates" 0 (om-make-point 185 39) "" "initial coordinates" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 412 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "henon" (om-load-patch-abs1 "henon" (quote ((let ((box (om-load-boxcall (quote abstraction) "yn+1 2" (om-load-patch-abs1 "yn+1" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 61 133) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 103 13) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 77 81) (om-make-point 25 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 50 50) (om-make-point 28 30) 0.3 "0.3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 3637/14 2937/14) nil nil nil "yn+1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "xn+1 2" (om-load-patch-abs1 "xn+1" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 111 262) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "xn" 1 (om-make-point 201 5) "" "xn" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "yn" 0 (om-make-point 97 8) "" "yn" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 135 204) (om-make-point 45 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 98 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 50 65) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 178 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 147 55) (om-make-point 28 30) 1.4 "1.4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 271 47) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 229 80) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (4 0 3 0 nil 0) (6 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (7 0 6 0 nil 0) (9 0 6 1 nil 0) (1 0 9 0 nil 0) (8 0 9 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 190 209) nil nil nil "xn+1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 166 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND 2" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 227 106) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x,y subsequent" 1 (om-make-point 207 4) "" "x,y subsequent" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 123 285) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 113 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 57 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 72 346) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x,y" 0 (om-make-point 79 0) "" "x,y" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "xn+1" (om-load-patch-abs1 "xn+1" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 111 262) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "xn" 1 (om-make-point 201 5) "" "xn" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "yn" 0 (om-make-point 97 8) "" "yn" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FIRST-ARG" 0) (om-load-inputfun (quote input-funbox) "number or list" "SECOND-ARG" 0))) (om-make-point 135 204) (om-make-point 45 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 98 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 50 65) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 178 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 147 55) (om-make-point 28 30) 1.4 "1.4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 271 47) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 229 80) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (4 0 3 0 nil 0) (6 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (7 0 6 0 nil 0) (9 0 6 1 nil 0) (1 0 9 0 nil 0) (8 0 9 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 50 199) nil nil nil "xn+1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "yn+1" (om-load-patch-abs1 "yn+1" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 61 133) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 103 13) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 77 81) (om-make-point 25 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 50 50) (om-make-point 28 30) 0.3 "0.3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1677/14 2797/14) nil nil nil "yn+1"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (4 0 3 0 nil 0) (10 0 5 0 nil 0) (11 0 5 1 nil 0) (1 0 5 2 nil 0) (0 0 5 3 nil 0) (9 0 6 0 nil 0) (9 0 7 0 nil 0) (5 0 8 0 nil 0) (6 0 10 0 nil 0) (7 0 10 1 nil 0) (7 0 11 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "x,y" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 325 64) nil (list (list 0.79599995 0.18)) "l" "henon"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 244 226) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "accum" (quote accumulator) (quote ((om-load-inputfun (quote input-funbox) "items to collect" "DATA" nil) (om-load-inputfun (quote input-funbox) "initial value" "INIT" nil) (om-load-inputfun (quote input-funbox) "accumulation function" "FUN" nil))) (om-make-point 257 143) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 277 310) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 198 306) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((0 0 2 1 nil 0) (5 0 4 0 nil 0) (1 0 5 1 nil 0) (3 0 5 2 nil 0) (4 1 6 0 nil 0) (4 0 7 0 nil 0))) 1 "henon" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "x-y-divider" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 214 241) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 220 229) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 224 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 153 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 176 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 128 224) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 49 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 214 312) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 112 317) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (2 0 4 0 nil 0) (4 1 6 0 nil 0) (0 1 6 1 nil 0) (4 0 7 0 nil 0) (0 0 7 1 nil 0))) 2 "x-y-divider" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 149 393) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 279 397) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 295 357) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 349 350) (om-make-point 34 30) 80 "80" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDDR" (quote cddr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 234 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (10 0 1 0 nil 0) (11 0 2 0 nil 0) (10 0 3 0 nil 0) (5 0 8 0 nil 0) (4 0 8 1 nil 0) (14 0 9 0 nil 0) (9 0 10 0 nil 0) (7 0 10 1 nil 0) (6 0 10 2 nil 0) (9 1 11 0 nil 0) (12 0 11 1 nil 0) (13 0 11 2 nil 0) (8 0 14 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 474 679)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 1174/9 482/3) (om-make-point 144 67) (list (list 1206.8927 1889.2842 415.99277 1558.322 1029.8201 1962.1141 125.763665 897.8105 1531.9043 1226.3068 1845.5038 555.7019 1771.9032 564.96186 1762.5127 593.2689 1796.6862 507.4208 1686.3869 771.9374 1944.6795 106.79592 838.04944 1506.5991 1255.9153 1810.1939 667.83417 1895.4349 234.94516 1167.9912 1502.3229 1362.7167 1684.2472 1033.7496 1999.0001 0.0 524.5643 1173.45 1585.4 1201.3635 1882.5983 435.20035 1591.4066 967.198 1979.1906 48.78138 674.0506 1373.2006 1421.445) (list 65.125985 48.696106 75.66406 17.439934 62.584504 41.698243 78.54228 5.970149 36.481255 61.540486 49.46335 73.93385 22.961207 71.02518 23.327157 70.654076 24.445845 72.0046 21.053147 67.6456 31.50678 77.853264 5.2205505 34.11951 60.540432 50.63347 72.53842 27.392647 75.907135 10.284977 47.15873 60.371434 54.854233 67.561035 41.853535 80.0 1.0 21.730654 47.37446 63.654625 48.477593 75.399826 18.19901 63.891995 39.223435 79.21713 2.9278283 27.638314 55.268555) (list 1206.8927 1889.2842 415.99277 1558.322 1029.8201 1962.1141 125.763665 897.8105 1531.9043 1226.3068 1845.5038 555.7019 1771.9032 564.96186 1762.5127 593.2689 1796.6862 507.4208 1686.3869 771.9374 1944.6795 106.79592 838.04944 1506.5991 1255.9153 1810.1939 667.83417 1895.4349 234.94516 1167.9912 1502.3229 1362.7167 1684.2472 1033.7496 1999.0001 0.0 524.5643 1173.45 1585.4 1201.3635 1882.5983 435.20035 1591.4066 967.198 1979.1906 48.78138 674.0506 1373.2006 1421.445) (list 65.125985 48.696106 75.66406 17.439934 62.584504 41.698243 78.54228 5.970149 36.481255 61.540486 49.46335 73.93385 22.961207 71.02518 23.327157 70.654076 24.445845 72.0046 21.053147 67.6456 31.50678 77.853264 5.2205505 34.11951 60.540432 50.63347 72.53842 27.392647 75.907135 10.284977 47.15873 60.371434 54.854233 67.561035 41.853535 80.0 1.0 21.730654 47.37446 63.654625 48.477593 75.399826 18.19901 63.891995 39.223435 79.21713 2.9278283 27.638314 55.268555)) nil "henon"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "sort-by-onset" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 207 443) nil nil nil (list (let ((box (om-load-boxwithed1 (quote box-with-win) "onset-sorter" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 294 302) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 156 236) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 151 112) (om-make-point 29 30) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 196 119) (om-make-point 42 30) (quote first) "first" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputkeyword (quote input-keyword) "test function" "test" (quote :test) (quote (quote <)) nil) (om-load-inputkeyword (quote input-keyword) "test key" "key" (quote :key) nil nil))) (om-make-point 133 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 86 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 83 26) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 229 308) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 113 313) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (4 0 3 0 nil 0) (1 0 3 1 nil 0) (2 0 3 2 nil 0) (5 0 4 0 nil 0) (0 1 6 0 nil 0) (0 0 7 0 nil 0))) 1 "onset-sorter" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 242 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 209 160) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 69 24) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 136 57) (om-make-point 58 30) (quote butlast) "butlast" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "onlist" (quote onlistloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil) (om-load-inputfun (quote input-funbox) "step function" "BY" nil))) (om-make-point 100 94) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 291 389) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 128 381) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 1 1 0 nil 0) (5 0 2 0 nil 0) (3 0 5 0 nil 0) (4 0 5 1 nil 0) (0 0 6 0 nil 0) (2 0 7 0 nil 0))) 1 "sort-by-onset" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 189 400) (om-make-point 124 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 163 335) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND 2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 206 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 275 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 265 84) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 159 85) (om-make-point 48 30) (list 1 1) "(1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 10 278) (om-make-point 120 136) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (1207 1889 416 1558 1030 1962 126 898 1532 1226 1846 556 1772 565 1763 593 1797 507 1686 772 1945 107 838 1507 1256 1810 668 1895 235 1168 1502 1363 1684 1034 1999 0 525 1173 1585 1201 1883 435 1591 967 1979 49 674 1373 1421)) (quote (65 49 76 17 63 42 79 6 36 62 49 74 23 71 23 71 24 72 21 68 32 78 5 34 61 51 73 27 76 10 47 60 55 68 42 80 1 22 47 64 48 75 18 64 39 79 3 28 55)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPC") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1160 699) (om-make-point 155 149) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 1 1 nil 0) (7 0 1 2 nil 0) (0 0 1 3 nil 0) (17 0 5 0 nil 0) (6 0 7 0 nil 0) (8 0 7 1 nil 0) (5 0 7 2 nil 0) (15 0 8 0 ((om-make-point 243 624) (om-make-point 400 651) (om-make-point 399 610) (om-make-point 556 610) (om-make-point 576 615)) 0) (12 0 9 0 nil 0) (15 1 12 0 nil 0) (11 0 12 1 ((om-make-point 329 591) (om-make-point 329 618) (om-make-point 287 639) (om-make-point 287 645)) 0) (10 0 12 2 ((om-make-point 384 591) (om-make-point 384 606) (om-make-point 301 640) (om-make-point 301 645)) 0) (25 0 14 0 nil 0) (13 0 14 1 nil 0) (14 0 15 0 nil 0) (19 0 17 0 nil 0) (18 0 17 1 nil 0) (23 0 17 2 ((om-make-point 482 396) (om-make-point 482 426) (om-make-point 615 506) (om-make-point 615 544)) 0) (16 0 18 0 nil 0) (30 0 18 1 nil 0) (30 0 22 0 nil 0) (21 0 22 1 nil 0) (20 0 23 0 nil 0) (22 0 23 1 nil 0) (21 0 23 2 nil 0) (31 0 24 0 nil 0) (30 0 24 1 nil 0) (26 0 25 0 nil 0) (27 0 26 0 nil 0) (28 0 26 1 nil 0) (29 0 26 2 nil 0) (24 2 28 0 nil 0) (24 3 29 0 nil 0) (24 0 32 1 nil 0) (24 1 32 2 nil 0))) nil 7.02))